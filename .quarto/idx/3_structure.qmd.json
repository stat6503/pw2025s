{"title":"3.1. 자료구조","markdown":{"yaml":{"jupyter":"python3"},"headingText":"3.1. 자료구조","containsRefs":false,"markdown":"\n\n<h1>3. 자료구조</h1>\n<br>\n\n### 3.1.1. 자료구조의 중요성\n+ 자료구조(data structure)\n  + 데이터를 효율적으로 저장하고 접근하기 위한 구조적 방식\n \n<br>\n\n+ 자료구조의 중요성\n  + 데이터 저장과 검색 효율화 : (예) 빠른 검색이 필요한 경우 딕셔너리 사용\n  + 연산 속도 최적화 : (예) 중복을 제거하는 경우 리스트보다 세트가 효율적임\n  + 메모리 사용 절약 : (예) 불변형 객체를 다룰 때는 리스트 대신 튜플 사용\n  + 코드 가독성 및 유지보수성 향상\n\n<br>\n\n### 3.1.2. Python 자료구조\n+ 대표적인 자료구조에는 리스트(list), 튜플(tuple), 세트(set), 딕셔너리(dictionary)가 있음\n\n|자료구조|설명|\n|:---:|:------------|\n|리스트(list)|여러 개의 값을 저장할 수 있는 순차적인 자료구조|\n|튜플(tuple)|리스트와 같지만 데이터의 변경을 허용하지 않는 자료구조|\n|세트(set)|데이터의 중복을 허용하지 않고, 수학의 집합 연산을 지원하는 자료구조|\n|딕셔너리(dictionary)|키(key)와 값(value)의 형태로 데이터를 저장하는 자료구조|\n\n<br>\n\n+ 자료구조 비교\n\n|자료구조|순서 유지|변경 가능|중복 허용|특징|\n|:------:|:---:|:---:|:---:|:------------------|\n|리스트(list)|○|○|○|가장 기본적인 자료구조, 인덱스로 접근|\n|튜플(tuple)|○|×|○|리스트와 유사하지만 불변형(immutable)|\n|세트(set)|×|○|×|중복 제거, 수학적 집합 연산 가능|\n|딕셔너리(dictionary)|○|○|△|키-값(key-value) 형태로 저장|\n\n<br>\n\n<br>\n\n## 3.2. 리스트\n### 3.2.1. 리스트 생성\n+ 리스트(list)\n  + 여러 개의 값을 저장할 수 있는 컬렉션 자료형(collection data type)\n  + 순서가 존재하는 시퀀스 자료형(sequence data type)\n  + 한 번 생성된 이후에도 수정할 수 있는 가변형(mutable) 객체\n  + 정수, 부동소수점수, 문자열, bool, 리스트, 튜플, 딕셔너리 등 다양한 자료형을 저장할 수 있는 컨테이너형 객체\n\n<br>\n\n+ 리스트 생성\n  + 리터럴 방식(list literal)\n    + `[]` 사용하여 리스트를 직접 정의하는 방법\n    + `[]` 안에 원소(element)를 `,`로 구분하여 나열함\n  + 생성자 방식(list constructor)\n    + `list()` 함수를 사용하여 리스트를 생성하는 방법\n    + 다른 iterable 객체(리스트, 튜플, 세트, 딕셔너리, 문자열 등)을 인수로 받아 리스트를 생성할 때 유용함\n\n<br>\n\n```{python}\n# 리스트 생성1\nlst = [1, 2, 3, 4, 5]\nprint(lst)\n```\n\n```{python}\n# 리스트 생성2\nlst = list([1, 2, 3, 4, 5])\nprint(lst)\n```\n\n```{python}\n# 리스트 생성3 : 리스트는 다양한 자료형을 저장할 수 있음\nlst = [1, 3.14, \"Hello\", True, [11, 12, 13]]\nprint(lst)\n```\n\n```{python}\n# 리스트 생성4 : iterable 객체 사용\nlst = list(\"Hello\")\nprint(lst)\n```\n\n```{python}\n# 리스트 생성5 : iterable 객체 사용\nlst = list(range(10))\nprint(lst)\n```\n\n<br>\n\n### 3.2.2. 리스트 연산\n+ 리스트 연결 연산자 `+` : 두 리스트를 연결해서 새로운 리스트 생성\n+ 리스트 반복 연산자 `*` : 리스트를 숫자만큼 반복하여 새로운 리스트 생성 - (예) 리스트\\*숫자\n\n<br>\n\n```{python}\n# 리스트 연결\nlst1 = [1, 2, 3]\nlst2 = [11, 12, 13]\nprint(lst1 + lst2)\n```\n\n```{python}\n# 리스트 반복\nprint(lst1 * 3)\n```\n\n<br>\n\n### 3.2.3. 인덱싱과 슬라이싱\n+ 인덱싱(indexing) : `[index]`를 사용하여 리스트의 특정 위치에 있는 원소에 접근함\n+ 슬라이싱(slicing) : `[(start index):(stop index)]`를 사용하여 리스트의 일부 원소를 추출함\n  + `list[(start index):(end index)] = iterable`를 사용하면 `start:end`로 지정한 부분이 iterable 객체의 모든 원소로 대체됨\n  + 슬라이싱을 이용하여 기존 리스트의 일부를 삭제하거나, 새로운 원소를 추가 및 변경할 수 있음\n\n<br>\n\n![](./images/fig3-2.png){width=60%}\n\n<br>\n\n```{python}\n# 리스트 인덱싱1\nlst = [10, 20, 30, 40, 50]\nprint(lst[0])\n```\n\n```{python}\n# 리스트 인덱싱2\nlst = [10, 20, 30, 40, 50]\nprint(lst[-1])\n```\n\n```{python}\n# 리스트 접근 연산자 []를 이중으로 사용할 수 있음\nlst = [1, 3.14, \"Hello\", True, [11, 12, 13]]\nprint(lst[2])\nprint(lst[2][0])\n```\n\n```{python}\n# 리스트 슬라이싱1\nlst = [10, 20, 30, 40, 50]\nprint(lst[0:2])\n```\n\n```{python}\n# 리스트 슬라이싱2\nlst = [10, 20, 30, 40, 50]\nprint(lst[:2])\nprint(lst[2:])\nprint(lst[::2])\n```\n\n```{python}\n# 리스트는 가변형 객체이므로 인덱스를 이용한 수정이 가능함\nlst = [10, 20, 30, 40, 50]\nlst[2] = 3\nprint(lst)\n```\n\n```{python}\n# 슬라이싱을 이용한 원소 삭제\nlst = [10, 20, 30, 40, 50]\nlst[1:4] = []                              # 빈 리스트를 할당하면 해당 부분이 삭제됨\nprint(lst)\n```\n\n```{python}\n# 슬라이싱을 이용한 원소 추가\nlst = [10, 20, 30, 40, 50]\nlst[1:1] = [6, 7]                          # 인덱스 1 위치에 [6, 7]의 원소를 개별적으로 추가\nprint(lst)\n```\n\n```{python}\n# 슬라이싱을 이용한 원소 수정\nlst = [10, 20, 30, 40, 50]\nlst[1:3] = [6, 7, 8]                       # 인덱스 1~2 부분을 [6, 7, 8]로 수정\nprint(lst)\n```\n\n<br>\n\n### 3.2.4. 중첩 리스트\n+ 리스트 안에 또 다른 리스트가 포함된 구조\n+ 2차원 리스트\n  + 모든 내부 리스트가 동일한 길이를 가진 경우\n  + 일반적으로 행(row)과 열(column)로 이루어짐\n  + 행렬(matrix)처럼 활용하거나, 데이터를 일정한 구조로 관리할 때 유용함\n\n<br>\n\n```{python}\n# 중첩 리스트\nnested_lst = [\n    [1, 2, 3],\n    [4, 5, 6, 7],\n    [8, 9]\n]\n\nprint(nested_lst)\n```\n\n```{python}\nfor items in nested_lst:\n    for item in items:\n        print(item)\n```\n\n```{python}\n# 2차원 리스트\nkor = [80, 82, 75, 95]\neng = [67, 95, 84, 83]\nmath = [74, 88, 82, 76]\nmidterm = [kor, eng, math]\nprint(midterm)\n```\n\n```{python}\n# 2차원 리스트 인덱싱\nmidterm[0][3]\n```\n\n<br>\n\n### 3.2.5. 리스트 메소드\n#### 3.2.5.1. 리스트 추가\n|함수|설명|\n|:---:|:------------|\n|append()|- 새로운 값을 기존 리스트의 맨 끝에 추가|\n|extend()|- 새로운 리스트를 기존 리스트에 추가(덧셈 연산과 같은 효과)|\n|insert()|- 기존 리스트의 i번째 인덱스에 새로운 값을 추가 <br>- i번째 인덱스를 기준으로 뒤쪽의 인덱스는 하나씩 밀림|\n\n<br>\n\n```{python}\n# 리스트에 한 개의 원소 추가1\nlst = [1, 2, 3]\nlst.append(4)                              # 실행 결과로 아무것도 출력하지 않음\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n```{python}\n# 리스트에 한 개의 원소 추가2\n# 원본 값 변화 없이 리스트에 한 개의 원소를 추가하려면 전개 연산자 *를 사용하면 됨\nlst = [1, 2, 3]\nnew_lst = [*lst, 4]\nprint(lst)                                 # lst 원본 값이 변하지 않음\nprint(new_lst)\n```\n\n```{python}\n# append() 함수는 여러 개의 인수를 입력하거나, 연속으로 사용할 수 없음\nlst = [1, 2, 3]\n#lst.append(4,5)\n#lst.append(4).append(5)\n```\n\n```{python}\n# 리스트에 여러 개의 원소 추가\nlst = [1, 2, 3]\nlst.extend([11, 12])                       # 실행 결과로 아무것도 출력하지 않음\nprint(lst)                                 # lst1 원본 값이 변함\n```\n\n```{python}\n# extend() 함수와 리스트 연결 연산자 +의 차이\nlst1 = [1, 2, 3]\nlst2 = [11, 12, 13]\nlst1 + lst2                                # 실행 결과가 출력됨\nprint(lst1)                                # lst1 원본 값이 변하지 않음\nprint(lst2)                                # lst2 원본 값이 변하지 않음\n```\n\n```{python}\n# 특정 위치에 한 개의 원소 추가\nlst = [1, 2, 3]\nlst.insert(0, 100)                         # 실행 결과로 아무것도 출력하지 않음\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n```{python}\n# 특정 위치에 여러 개의 원소 추가 : 슬라이싱을 이용\nlst = [1, 2, 3]\nlst[1:1] = [11, 12]                        # 인덱스 1의 위치에 리스트 [11, 12]의 원소를 개별적으로 삽입\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n<br>\n\n#### 3.2.5.2. 리스트 삭제\n|함수|설명|\n|:---:|:------------|\n|pop()|- 특정 인덱스 값을 삭제하고 그 값을 반환 <br>- 인덱스를 생략하면 마지막 원소를 삭제|\n|del 키워드|- 특정 인덱스 값을 삭제 <br>- 리스트 객체 자체를 삭제 가능함|\n|remove()|- 리스트에서 첫 번째로 일치하는 값을 삭제 <br>- 값으로 삭제하므로 인덱스를 사용하지 않음|\n|clear()|- 리스트의 모든 원소를 삭제|\n\n<br>\n\n```{python}\n# 특정 인덱스 값 삭제1\nlst = [1, 2, 3, 4, 5]\nresult = lst.pop(3)                        # 실행 결과로 삭제한 값을 반환\nprint(lst)                                 # lst 원본 값이 변함\nprint(result)\n```\n\n```{python}\n# 특정 인덱스 값 삭제2\nlst = [1, 2, 3, 4, 5]\nresult = lst.pop()                         # 인덱스를 생략하면 마지막 원소를 삭제 후 반환\nprint(lst)                                 # lst 원본 값이 변함\nprint(result)\n```\n\n```{python}\n# 특정 인덱스 값 삭제3\nlst = [1, 2, 3, 4, 5]\ndel lst[3]                                 # 실행 결과로 아무것도 반환하지 않음\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n```{python}\n# 리스트 객체 삭제\nlst = [1, 2, 3, 4, 5]\ndel lst\n#print(lst)\n```\n\n```{python}\n# 일치하는 값 삭제1\nlst = [1, 2, 3, 4, 5]\nlst.remove(4)                              # 실행 결과로 아무것도 출력하지 않음\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n```{python}\n# 일치하는 값 삭제2\nlst = [1, 2, 3, 1, 4, 5, 1, 6, 7]\nlst.remove(1)                              # 첫 번째로 일치하는 값만 삭제됨\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n```{python}\n# 리스트 모든 원소 삭제\nlst = [1, 2, 3, 4, 5]\nlst.clear()                                # 실행 결과로 아무것도 출력하지 않음\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n<br>\n\n#### 3.2.5.3. 리스트 재배열\n|함수|설명|\n|:---:|:------------|\n|reverse()|- 리스트 원소를 역순으로 재배열|\n|sort()|- 리스트 원소를 오름차순(default)으로 정렬 <br>- 내림차순으로 정렬하려면 reverse=True로 설정|\n\n<br>\n\n```{python}\n# 리스트 역순 재배열\nlst = [52, 273, 103, 32, 275, 1, 7]\nlst.reverse()                              # 실행 결과로 아무것도 출력하지 않음\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n```{python}\n# 리스트 정렬\nlst = [52, 273, 103, 32, 275, 1, 7]\nlst.sort()                                 # 실행 결과로 아무것도 출력하지 않음, 오름차순 정렬\nprint(lst)                                 # lst 원본 값이 변함\n\nlst.sort(reverse=True)                     # 내림차순 정렬\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n<br>\n\n#### 3.2.5.4. 리스트 검색\n|함수|설명|\n|:---:|:------------|\n|count()|리스트 내부에 특정 값이 몇 번 나타나는지 개수를 반환|\n|index()|리스트 내부에 특정 값의 첫 번째 인덱스를 반환하며, 없으면 오류 발생|\n|in 연산자|리스트 내부에 특정 값이 있다면 True, 없다면 False를 반환|\n\n<br>\n\n```{python}\n# 특정 값 개수\nlst = [1, 2, 3, 1, 4, 5, 1, 6, 7]\nprint(lst.count(1))\nprint(lst.count(9))\n```\n\n```{python}\n# 특정 값의 첫 번쩨 인덱스\nlst = [1, 2, 3, 1, 4, 5, 1, 6, 7]\nprint(lst.index(1))\n#print(lst.index(9))\n```\n\n```{python}\n# 특정 값 찾기\nlst = [1, 2, 3, 4, 5]\nprint(3 in lst)\nprint(6 in lst)\n```\n\n<br>\n\n#### 3.2.5.5. 리스트 통계\n|함수|설명|\n|:---:|:------------|\n|len()|리스트 원소의 개수(리스트 길이) 반환|\n|sum()|리스트 원소의 합계 반환|\n|max()|리스트 원소 중 최대값 반환|\n|min()|리스트 원소 중 최소값 반환|\n\n<br>\n\n```{python}\nlst = [1, 2, 3, 4, 5]\nprint(len(lst))\nprint(sum(lst))\nprint(max(lst))\nprint(min(lst))\n```\n\n<br>\n\n### 3.2.6. 리스트 컴프리헨션\n\n> [식 for 변수 in 반복범위 if 조건식]\n\n<br>\n\n+ 기존 리스트를 사용하여 간결하게 새로운 리스트를 생성하는 기법\n+ 리스트와 for 문을 한 줄에 사용할 수 있어 코드가 더 직관적으로 작성됨\n+ 필터링, 중첩 반복문, 이차원 리스트 등 다양한 방식으로 활용됨\n\n<br>\n\n+ 리스트 컴프리헨션은 수학에서 집합을 정의할 때 **특정 조건을 만족하는 원소들의 집합**으로 표현하는 방법과 유사함\n  + 수학적 집합 :  S = {x | x는 0 이상 10 이하의 정수}\n  + 리스트 컴프리헨션 :  `[x for x in range(10)]`\n\n<br>\n\n```{python}\n## 0~9 정수 저장\n# 일반적인 반복문 + 리스트\nresult1 = []\nfor i in range(10):\n    result1.append(i)\n\nprint(result1)\n```\n\n```{python}\n## 0~9 정수 저장\n# 리스트 컴프리헨션\nresult2 = [i for i in range(10)]\nprint(result2)\n```\n\n```{python}\n## 짝수만 저장 (필터링, if 문과 함께 사용)\n# 일반적인 반복문 + 리스트\nresult1 = []\nfor i in range(10):\n    if i % 2 == 0:\n        result1.append(i)\n\nprint(result1)\n```\n\n```{python}\n## 짝수만 저장 (필터링, if 문과 함께 사용)\n# 리스트 컴프리헨션\nresult2 = [i for i in range(10) if i % 2 == 0]\nprint(result2)\n```\n\n```{python}\n## 두 개의 문자열 조합하여 새로운 리스트 생성 (중첩 반복문)\n# 일반적인 반복문 + 리스트\nword1 = \"Hello\"\nword2 = \"World\"\nresult1 = []\n\nfor i in word1:\n    for j in word2:\n        result1.append(i+j)\n\nprint(result1)\n```\n\n```{python}\n## 두 개의 문자열 조합하여 새로운 리스트 생성 (중첩 반복문)\n# 리스트 컴프리헨션\nword1 = \"Hello\"\nword2 = \"World\"\n\nresult2 = [i+j for i in word1 for j in word2]\nprint(result2)\n```\n\n```{python}\n# 리스트 컴프리헨션 (필터링 + 중첩 반복문)\ncase1 = [\"A\", \"B\", \"C\"]\ncase2 = [\"D\", \"E\", \"A\"]\nresult = [i + j for i in case1 for j in case2 if not(i==j)]\nprint(result)\n```\n\n```{python}\n## 리스트의 각 원소를 대문자, 소문자, 길이로 변환하여 이차원 리스트 생성 (이차원 리스트)\n# 일반적인 반복문 + 리스트\nwords = \"The quick brown fox jumps over the lazy dog\".split()\nword_info1 = []\n\nfor w in words:\n    word_info1.append([w.upper(), w.lower(), len(w)])\n\nword_info1\n```\n\n```{python}\n## 리스트의 각 원소를 대문자, 소문자, 길이로 변환하여 이차원 리스트 생성 (이차원 리스트)\n# 리스트 컴프리헨션\nwords = \"The quick brown fox jumps over the lazy dog\".split()\nword_info2 = [[w.upper(), w.lower(), len(w)] for w in words]\nword_info2\n```\n\n```{python}\n# [주의] 반복문에서 대괄호의 위치에 따라 리스트의 구조가 달라짐\ncase1 = [\"A\", \"B\", \"C\"]\ncase2 = [\"1\", \"2\", \"3\"]\n\n# 일차원 리스트, 앞의 for 문이 먼저 실행됨\nresult1 = [i + j for i in case1 for j in case2]\nprint(result1)\n\n# 이차원 리스트, 뒤의 for 문이 바깥쪽에서 먼저 실행됨\nresult2 = [[i + j for i in case1] for j in case2]\nprint(result2)\n```\n\n<br>\n\n## 3.3. 튜플\n### 3.3.1. 튜플 생성\n+ 튜플(tuple)\n  + 여러 개의 값을 저장할 수 있는 컬렉션 자료형(collection data type)\n  + 순서가 존재하는 시퀀스 자료형(sequence data type)\n  + 한 번 생성된 이후에는 수정할 수 없는 불변형(immutable) 객체\n  + 정수, 부동소수점수, 문자열, bool, 리스트, 튜플, 딕셔너리 등 다양한 자료형을 저장할 수 있는 컨테이너형 객체\n  + 리스트와 구조 및 사용 방법이 거의 동일하지만, **수정이 불가능**하다는 차이점이 있음\n\n<br>\n\n+ 튜플 생성\n  + 리터럴 방식(tuple literal)\n    + `()`를 사용하여 튜플을 직접 정의하는 방법\n    + `()` 안에 원소(element)를 `,`로 구분하여 나열함\n    + `()`을 생략할 수도 있지만, 원소가 하나인 경우에는 `(값,)`처럼 반드시 `,`를 포함해야 함\n  + 생성자 방식(tuple constructor)\n    + `tuple()` 함수를 사용하여 튜플을 생성하는 방법\n    + 다른 iterable 객체(리스트, 튜플, 세트, 딕셔너리, 문자열 등)를 인수로 받아 튜플을 생성할 때 유용함\n\n<br>\n\n```{python}\n# 튜플 생성1\ntpl = (1, 2, 3, 4, 5)\nprint(tpl)\n```\n\n```{python}\n# 튜플 생성2\ntpl = 1, 2, 3, 4, 5\nprint(tpl)\n```\n\n```{python}\n# 튜플 생성3 : 원소가 하나인 경우에는 반드시 ,를 포함해야 함\ntpl = (1,)\nprint(tpl)\n```\n\n```{python}\n# 튜플 생성4 : 튜플은 다양한 자료형을 저장할 수 있음\ntpl = (1, 3.14, \"Hello\", True, [11, 12, 13], (21, 22))\nprint(tpl)\n```\n\n```{python}\n# 튜플 생성5 : iterable 객체 사용\ntpl = tuple(\"Hello\")\nprint(tpl)\n```\n\n```{python}\n# 튜플 생성6 : iterable 객체 사용\ntpl = tuple([1, 2, 3])\nprint(tpl)\n```\n\n<br>\n\n### 3.3.2. 튜플 연산\n+ 리스트 연산과 문법이 동일함\n+ 튜플 연결 연산자 `+` : 두 튜플을 연결해서 새로운 튜플 생성\n+ 튜플 반복 연산자 `*` : 튜플을 숫자만큼 반복하여 새로운 튜플 생성 - (예) 튜플\\*숫자\n\n<br>\n\n```{python}\n# 튜플 연결\ntpl1 = 1, 2, 3\ntpl2 = 11, 12, 13\nprint(tpl1 + tpl2)\n```\n\n```{python}\n# 튜플 반복\nprint(tpl1 * 3)\n```\n\n<br>\n\n### 3.3.3. 인덱싱와 슬라이싱\n+ 리스트와 문법이 동일함\n+ 인덱싱(indexing) : `[index]`를 사용하여 튜플의 특정 위치에 있는 원소에 접근함\n+ 슬라이싱(slicing) : `[(start index):(stop index)]`를 사용하여 튜플의 일부 원소를 추출함\n  + 리스트와 달리 불변형 객체이므로 슬라이싱을 이용하여 기존 튜플의 일부를 삭제하거나, 새로운 원소를 추가 및 변경할 수 없음\n\n<br>\n\n```{python}\n# 튜플 인덱싱1\ntpl = 1, 2, 3, 4, 5\nprint(tpl[0])\n```\n\n```{python}\n# 튜플 인덱싱2\ntpl = 1, 2, 3, 4, 5\nprint(tpl[-1])\n```\n\n```{python}\n# 튜플 슬라이싱1\ntpl = 1, 2, 3, 4, 5\nprint(tpl[0:2])\n```\n\n```{python}\n# 튜플 슬라이싱2\ntpl = 1, 2, 3, 4, 5\nprint(tpl[:2])\nprint(tpl[2:])\nprint(tpl[::2])\n```\n\n```{python}\n# 튜플은 불변형 객체이므로 인덱스를 이용한 수정이 불가능함\n#tpl = 1, 2, 3, 4, 5\n#tpl[2] = 3\n#print(tpl)\n```\n\n<br>\n\n### 3.3.4. 튜플 메소드\n|함수|설명|\n|:---:|:------------|\n|count()|튜플 내부에 특정 값이 몇 번 나타나는지 개수를 반환|\n|index()|튜플 내부에 특정 값의 첫 번째 인덱스를 반환하며, 없으면 오류 발생|\n|in 연산자|튜플 내부에 특정 값이 있다면 True, 없다면 False를 반환|\n|len()|튜플 원소의 개수(튜플 길이) 반환|\n|sum()|튜플 원소의 합계 반환|\n|max()|튜플 원소 중 최대값 반환|\n|min()|튜플 원소 중 최소값 반환|\n\n<br>\n\n```{python}\n# 특정 값 개수\ntpl = 1, 2, 3, 1, 4, 5, 1, 6, 7\nprint(tpl.count(1))\nprint(tpl.count(9))\n```\n\n```{python}\n# 특정 값의 첫 번쩨 인덱스\ntpl = 1, 2, 3, 1, 4, 5, 1, 6, 7\nprint(tpl.index(1))\n#print(tpl.index(9))\n```\n\n```{python}\n# 특정값 찾기\ntpl = 1, 2, 3, 4, 5\nprint(3 in tpl)\nprint(6 in tpl)\n```\n\n```{python}\n#| scrolled: true\ntpl = 1, 2, 3, 4, 5\nprint(len(tpl))\nprint(sum(tpl))\nprint(max(tpl))\nprint(min(tpl))\n```\n\n<br>\n\n## 3.4. 세트\n### 3.4.1. 세트 생성\n+ 세트(set)\n  + 여러 개의 값을 저장할 수 있는 컬렉션 자료형(collection data type)\n  + 순서가 없는 집합 자료형(set data type)\n  + 중복을 허용하지 않으며, 순서가 유지되지 않음\n    + 리스트, 튜플과 달리 인덱싱과 슬라이싱이 불가능함\n  + 한 번 생성된 이후에도 수정할 수 있는 가변형(mutable) 객체\n  + 정수, 부동소수점수, 문자열, bool, 튜플 등 해시 가능한(immutable) 자료형을 저장할 수 있는 컨테이너형 객체\n\n<br>\n\n+ [참고] 해시(hash)\n  + 데이터를 저장하거나 검색할 때 사용되는 고유한 숫자 값(해시 값)을 사용하는 과정\n  + 세트와 딕셔너리는 내부적으로 해시 값을 사용하여 원소 또는 key에 빠르게 접근함(검색 속도가 빠름)\n  + 해시 값은 변경되지 않아야 하므로, 불변형 객체만 사용할 수 있음\n\n<br>\n\n+ 세트 생성\n  + 리터럴 방식(set literal)\n    + `{}`를 사용하여 세트를 직접 정의하는 방법\n    + `{}` 안에 원소(element)를 `,`로 구분하여 나열함\n    + **중복된 원소는 자동으로 제거됨**\n  + 생성자 방식(set constructor)\n    + `set()` 함수를 사용하여 세트를 생성하는 방법\n    + 다른 iterable 객체(리스트, 튜플, 세트, 딕셔너리, 문자열 등)를 인수로 받아 세트를 생성할 때 유용함\n    + 빈 세트를 만들려면 반드시 `set()` 함수를 사용해야 함\n\n<br>\n\n```{python}\n# 세트 생성1\nst = {1, 2, 3, 1, 1, 4}\nprint(st)\n```\n\n```{python}\n# 세트 생성2\nst = set({1, 2, 3, 1, 1, 4})\nprint(st)\n```\n\n```{python}\n# 세트 생성3 : 세트는 해시 가능한(immutable) 자료형을 저장할 수 있음\nst = {1, 3.14, \"Hello\", True, (1, 2, 3), \"Hello\", 1, 1, 1}\nprint(st)\n```\n\n```{python}\n# 세트 생성4: iterable 객체 사용\nst = set(\"Hello\")\nprint(st)\n```\n\n```{python}\n# 세트 생성5 : iterable 객체 사용\nst1 = set([1, 2, 3, 1, 1, 4])\nst2 = set((1, 2, 3, 1, 1, 4))\nprint(st1)\nprint(st2)\n```\n\n<br>\n\n### 3.4.2. 세트 집합 연산 및 메소드\n\n|연산|연산자|함수|\n|:---:|:---:|:------------:|\n|합집합|\\||union()|\n|교집합|&|intersection()|\n|차집합|-|difference()|\n|대칭차집합|^|symmetric_difference()|\n|부분집합 여부|<=|issubset()|\n\n<br>\n\n![](./images/fig3-3.png){width=60%}\n\n<br>\n\n```{python}\n# 세트 연산1\nA = {1, 2, 3}\nB = {3, 4, 5}\n\nprint(A | B)                               # 합집합\nprint(A & B)                               # 교집합\nprint(A - B)                               # 차집합\nprint(A ^ B)                               # 대칭차집합\nprint(A <= B)                              # 부분집합 여부\n```\n\n```{python}\n# 세트 연산2\nA = {1, 2, 3}\nB = {3, 4, 5}\n\nprint(A.union(B))\nprint(A.intersection(B))\nprint(A.difference(B))\nprint(A.symmetric_difference(B))\nprint(A.issubset(B))\n```\n\n```{python}\n# 세트 연산3 : 여러 개의 세트를 연쇄적으로 한 번에 연산 가능\nA = {1, 2, 3}\nB = {3, 4, 5}\nC = {5, 6, 7}\n\n# 연산자 사용\nprint(A | B | C)\nprint(A & B & C)\n\n# 메소드 사용\nprint(A.union(B, C))\nprint(A.intersection(B, C))\n```\n\n<br>\n\n#### 3.4.2.3. 세트 추가/삭제/검색\n|함수|설명|\n|:---:|:------------|\n|add()|- 새로운 값을 세트에 추가|\n|update()|- 여러 개 값을 세트에 추가|\n|pop()|- 임의의 값을 삭제하고 그 값을 반환 <br>- 어떤 값을 삭제할지 예측 불가능|\n|remove()|- 세트에서 일치하는 값을 삭제 <br>- 일치하는 값이 없으면 오류가 발생함|\n|discard()|- 세트에서 일치하는 값을 삭제 <br>- 일치하는 값이 없어도 오류가 발생하지 않음|\n|clear()|- 세트의 모든 원소를 삭제|\n|in 연산자|세트 내부에 특정 값이 있다면 True, 없다면 False를 반환|\n\n<br>\n\n```{python}\n# 세트에 한 개의 원소 추가\nst = {1, 2, 3}\nst.add(6)                                  # 실행 결과로 아무것도 출력하지 않음\nprint(st)                                  # st 원본 값이 변함\n```\n\n```{python}\n# 세트에 여러 개의 원소 추가\nst = {1, 2, 3}\nst.update([1, 2, 6])                       # 리스트 사용\nprint(st)\n\nst.update((1, 7))                          # 튜플 사용\nprint(st)\n\nst.update({8, 9})                          # 세트 사용\nprint(st)\n```\n\n```{python}\n# 임의의 원소 삭제\nst = {1, 2, 3}\nresult = st.pop()                          # 임의의 원소를 삭제 후 반환\nprint(st)                                  # st 원본 값이 변함\nprint(result)\n```\n\n```{python}\n# 일치하는 값 삭제1\nst = {1, 2, 3}\nst.remove(3)\nprint(st)\n```\n\n```{python}\n# 일치하는 값 삭제2 : remove() 함수는 일치하는 값이 없으면 오류가 발생함\n#st = {1, 2, 3}\n#st.remove(4)\n#print(st)\n```\n\n```{python}\n# 일치하는 값 삭제3\nst = {1, 2, 3}\nst.discard(3)\nprint(st)\n```\n\n```{python}\n# 일치하는 값 삭제4 : discard() 함수는 일치하는 값이 없어도 오류가 발생하지 않음\nst = {1, 2, 3}\nst.discard(4)\nprint(st)\n```\n\n```{python}\n# 세트 모든 원소 삭제\nst = {1, 2, 3}\nst.clear()\nprint(st)\n```\n\n```{python}\n# 특정값 찾기\nst = {1, 2, 3}\nprint(3 in st)\nprint(6 in st)\n```\n\n<br>\n\n## 3.5. 딕셔너리\n### 3.5.1. 딕셔너리 생성\n+ 딕셔너리(dictionary)\n  + 여러 개의 키-값(key-value) 쌍을 저장할 수 있는 컬렉션 자료형(collection data type)\n  + 순서가 있는 매핑 자료형(mapping data type)(Python 3.7+)\n  + 키(key)를 통해 값(value)을 찾는 구조\n    + 키는 중복될 수 없고(해시 가능한 자료형만 가능), 값은 중복 가능함(모든 자료형 가능)\n  + 한 번 생성된 이후에도 수정할 수 있는 가변형(mutable) 객체\n\n<br>\n\n+ 딕셔너리 생성\n  + 리터럴 방식(dictionary literal)\n    + `{key: value}`를 사용하여 딕셔너리를 직접 정의하는 방법\n    + `{}` 안에 여러 개의 `key: value` 쌍을 `,`로 구분하여 나열함\n    + **중복된 키가 있으면 마지막에 정의한 값이 적용됨**\n  + 생성자 방식(dictionary constructor)\n    + `dict()` 함수를 사용하여 딕셔너리를 생성하는 방법\n    + 다른 iterable 객체(리스트, 튜플, 세트, 딕셔너리, 문자열 등)를 인수로 받아 딕셔너리를 생성할 때 유용함\n      + `zip()` 함수를 이용하여 여러 개의 리스트나 튜플을 병렬로 묶어 키-값 쌍의 형태로 구성할 수 있음\n      + `enumerate()` 함수를 이용하여 인덱스를 키로, 원소를 값으로 하여 쌍으로 묶어 딕셔너리를 생성할 수 있음\n\n<br>\n\n```{python}\n# 딕셔너리 생성1\ndct = {'a': 1, 'b': 2, 'c': 3}\nprint(dct)\n```\n\n```{python}\n# 딕셔너리 생성2\ndct = dict(a=1, b=2, c=3)\nprint(dct)\n```\n\n```{python}\n# 딕셔너리 생성3 : 키는 중복될 수 없음\ndct = {'a':1, 'b': 2, 'c': 3, 'a': 4, 'b': 5}\nprint(dct)\n```\n\n```{python}\n# 딕셔너리 생성4 : (key, value) 쌍의 리스트 사용\ndct = dict([('x', 100), ('y', 200)])\nprint(dct)\n```\n\n```{python}\n# 딕셔너리 생성5 : zip() 함수 사용\nkeys = ['name', 'age', 'city']\nvalues = ['Alice', 28, 'Jeonju']\ndct = dict(zip(keys, values))\nprint(dct)\n```\n\n```{python}\n# 딕셔너리 생성6 : enumerate() 함수 사용\nfruits = ['apple', 'banana', 'cherry']\ndct = dict(enumerate(fruits))\nprint(dct)\n```\n\n<br>\n\n### 3.5.2. 딕셔너리 값 접근\n+ 딕셔너리는 키를 사용하여 값에 접근함\n+ 리스트, 튜플처럼 정수 인덱스를 이용한 접근은 불가능함\n\n<br>\n\n```{python}\n# 키를 이용한 값 접근\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nprint(info['name'])\nprint(info['age'])\n```\n\n```{python}\n# 딕셔너리는 가변형 객체이므로 키를 이용한 수정이 가능함\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\ninfo['city'] = 'Iksan'\nprint(info)\n```\n\n```{python}\n# 새로운 키-값 쌍 추가\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\ninfo['email'] = 'alice123@gmail.com'\nprint(info)\n```\n\n<br>\n\n### 3.5.3. 딕셔너리 메소드\n#### 3.5.3.1. 딕셔너리 조회\n|함수|설명|\n|:---:|:------------|\n|keys()|딕셔너리의 모든 키를 반환(`dict_keys` 객체)|\n|values()|딕셔너리의 모든 값을 반환(`dict_values` 객체)|\n|items()|(키, 값) 쌍을 튜플 형태로 반환(`dict_items` 객체)|\n|get()|지정한 키의 값을 반환하며, 없으면 None 반환|\n|in 연산자|특정 키가 딕셔너리에 있다면 True, 없다면 False 반환|\n\n<br>\n\n```{python}\n# 모든 키\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nprint(list(info.keys()))\n```\n\n```{python}\n# 모든 값\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nprint(list(info.values()))\n```\n\n```{python}\n# (키, 값) 쌍\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nprint(list(info.items()))\n```\n\n```{python}\n# 키를 이용한 값 조회\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nprint(info.get('name'))\nprint(info.get('email'))\n```\n\n```{python}\n# 특정 키 찾기\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nprint('age' in info)\nprint('email' in info)\n```\n\n<br>\n\n#### 3.5.3.2. 딕셔너리 추가/삭제\n|함수|설명|\n|:---:|:------------|\n|update()|다른 딕셔너리나 키워드 인수를 이용하여 원소를 추가 및 수정|\n|pop()|특정 키의 값을 삭제하고 그 값을 반환하며, 키가 없으면 오류 발생|\n|popitem()|마지막 (키, 값) 쌍을 삭제하고 반환|\n|del 키워드|특정 키의 원소를 삭제하며, 키가 없으면 오류 발생|\n|clear()|딕셔너리의 모든 원소를 삭제|\n\n<br>\n\n```{python}\n# 원소 추가 및 수정1\ninfo = {'name': 'Alice', 'age': 28}\ninfo.update({'age': 29, 'city': 'Jeonju'})\nprint(info)\n```\n\n```{python}\n# 원소 추가 및 수정2\ninfo = {'name': 'Alice', 'age': 28}\ninfo.update(age=29, city='Jeonju')\nprint(info)\n```\n\n```{python}\n# 특정 키의 값 삭제1\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nage = info.pop('age')\nprint(info)\nprint(age)\n```\n\n```{python}\n# 특정 키의 값 삭제2\n#info = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\n#age = info.pop('email')\n#print(info)\n#print(email)\n```\n\n```{python}\n# 마지막 (키, 값) 쌍 삭제\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nlast_item = info.popitem()\nprint(info)\nprint(last_item)\n```\n\n```{python}\n# 특정 키의 원소 삭제1\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\ndel info['age']\nprint(info)\n```\n\n```{python}\n# 특정 키의 원소 삭제2\n#info = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\n#del info['email']\n#print(info)\n```\n\n","srcMarkdownNoYaml":"\n\n<h1>3. 자료구조</h1>\n<br>\n\n## 3.1. 자료구조\n### 3.1.1. 자료구조의 중요성\n+ 자료구조(data structure)\n  + 데이터를 효율적으로 저장하고 접근하기 위한 구조적 방식\n \n<br>\n\n+ 자료구조의 중요성\n  + 데이터 저장과 검색 효율화 : (예) 빠른 검색이 필요한 경우 딕셔너리 사용\n  + 연산 속도 최적화 : (예) 중복을 제거하는 경우 리스트보다 세트가 효율적임\n  + 메모리 사용 절약 : (예) 불변형 객체를 다룰 때는 리스트 대신 튜플 사용\n  + 코드 가독성 및 유지보수성 향상\n\n<br>\n\n### 3.1.2. Python 자료구조\n+ 대표적인 자료구조에는 리스트(list), 튜플(tuple), 세트(set), 딕셔너리(dictionary)가 있음\n\n|자료구조|설명|\n|:---:|:------------|\n|리스트(list)|여러 개의 값을 저장할 수 있는 순차적인 자료구조|\n|튜플(tuple)|리스트와 같지만 데이터의 변경을 허용하지 않는 자료구조|\n|세트(set)|데이터의 중복을 허용하지 않고, 수학의 집합 연산을 지원하는 자료구조|\n|딕셔너리(dictionary)|키(key)와 값(value)의 형태로 데이터를 저장하는 자료구조|\n\n<br>\n\n+ 자료구조 비교\n\n|자료구조|순서 유지|변경 가능|중복 허용|특징|\n|:------:|:---:|:---:|:---:|:------------------|\n|리스트(list)|○|○|○|가장 기본적인 자료구조, 인덱스로 접근|\n|튜플(tuple)|○|×|○|리스트와 유사하지만 불변형(immutable)|\n|세트(set)|×|○|×|중복 제거, 수학적 집합 연산 가능|\n|딕셔너리(dictionary)|○|○|△|키-값(key-value) 형태로 저장|\n\n<br>\n\n<br>\n\n## 3.2. 리스트\n### 3.2.1. 리스트 생성\n+ 리스트(list)\n  + 여러 개의 값을 저장할 수 있는 컬렉션 자료형(collection data type)\n  + 순서가 존재하는 시퀀스 자료형(sequence data type)\n  + 한 번 생성된 이후에도 수정할 수 있는 가변형(mutable) 객체\n  + 정수, 부동소수점수, 문자열, bool, 리스트, 튜플, 딕셔너리 등 다양한 자료형을 저장할 수 있는 컨테이너형 객체\n\n<br>\n\n+ 리스트 생성\n  + 리터럴 방식(list literal)\n    + `[]` 사용하여 리스트를 직접 정의하는 방법\n    + `[]` 안에 원소(element)를 `,`로 구분하여 나열함\n  + 생성자 방식(list constructor)\n    + `list()` 함수를 사용하여 리스트를 생성하는 방법\n    + 다른 iterable 객체(리스트, 튜플, 세트, 딕셔너리, 문자열 등)을 인수로 받아 리스트를 생성할 때 유용함\n\n<br>\n\n```{python}\n# 리스트 생성1\nlst = [1, 2, 3, 4, 5]\nprint(lst)\n```\n\n```{python}\n# 리스트 생성2\nlst = list([1, 2, 3, 4, 5])\nprint(lst)\n```\n\n```{python}\n# 리스트 생성3 : 리스트는 다양한 자료형을 저장할 수 있음\nlst = [1, 3.14, \"Hello\", True, [11, 12, 13]]\nprint(lst)\n```\n\n```{python}\n# 리스트 생성4 : iterable 객체 사용\nlst = list(\"Hello\")\nprint(lst)\n```\n\n```{python}\n# 리스트 생성5 : iterable 객체 사용\nlst = list(range(10))\nprint(lst)\n```\n\n<br>\n\n### 3.2.2. 리스트 연산\n+ 리스트 연결 연산자 `+` : 두 리스트를 연결해서 새로운 리스트 생성\n+ 리스트 반복 연산자 `*` : 리스트를 숫자만큼 반복하여 새로운 리스트 생성 - (예) 리스트\\*숫자\n\n<br>\n\n```{python}\n# 리스트 연결\nlst1 = [1, 2, 3]\nlst2 = [11, 12, 13]\nprint(lst1 + lst2)\n```\n\n```{python}\n# 리스트 반복\nprint(lst1 * 3)\n```\n\n<br>\n\n### 3.2.3. 인덱싱과 슬라이싱\n+ 인덱싱(indexing) : `[index]`를 사용하여 리스트의 특정 위치에 있는 원소에 접근함\n+ 슬라이싱(slicing) : `[(start index):(stop index)]`를 사용하여 리스트의 일부 원소를 추출함\n  + `list[(start index):(end index)] = iterable`를 사용하면 `start:end`로 지정한 부분이 iterable 객체의 모든 원소로 대체됨\n  + 슬라이싱을 이용하여 기존 리스트의 일부를 삭제하거나, 새로운 원소를 추가 및 변경할 수 있음\n\n<br>\n\n![](./images/fig3-2.png){width=60%}\n\n<br>\n\n```{python}\n# 리스트 인덱싱1\nlst = [10, 20, 30, 40, 50]\nprint(lst[0])\n```\n\n```{python}\n# 리스트 인덱싱2\nlst = [10, 20, 30, 40, 50]\nprint(lst[-1])\n```\n\n```{python}\n# 리스트 접근 연산자 []를 이중으로 사용할 수 있음\nlst = [1, 3.14, \"Hello\", True, [11, 12, 13]]\nprint(lst[2])\nprint(lst[2][0])\n```\n\n```{python}\n# 리스트 슬라이싱1\nlst = [10, 20, 30, 40, 50]\nprint(lst[0:2])\n```\n\n```{python}\n# 리스트 슬라이싱2\nlst = [10, 20, 30, 40, 50]\nprint(lst[:2])\nprint(lst[2:])\nprint(lst[::2])\n```\n\n```{python}\n# 리스트는 가변형 객체이므로 인덱스를 이용한 수정이 가능함\nlst = [10, 20, 30, 40, 50]\nlst[2] = 3\nprint(lst)\n```\n\n```{python}\n# 슬라이싱을 이용한 원소 삭제\nlst = [10, 20, 30, 40, 50]\nlst[1:4] = []                              # 빈 리스트를 할당하면 해당 부분이 삭제됨\nprint(lst)\n```\n\n```{python}\n# 슬라이싱을 이용한 원소 추가\nlst = [10, 20, 30, 40, 50]\nlst[1:1] = [6, 7]                          # 인덱스 1 위치에 [6, 7]의 원소를 개별적으로 추가\nprint(lst)\n```\n\n```{python}\n# 슬라이싱을 이용한 원소 수정\nlst = [10, 20, 30, 40, 50]\nlst[1:3] = [6, 7, 8]                       # 인덱스 1~2 부분을 [6, 7, 8]로 수정\nprint(lst)\n```\n\n<br>\n\n### 3.2.4. 중첩 리스트\n+ 리스트 안에 또 다른 리스트가 포함된 구조\n+ 2차원 리스트\n  + 모든 내부 리스트가 동일한 길이를 가진 경우\n  + 일반적으로 행(row)과 열(column)로 이루어짐\n  + 행렬(matrix)처럼 활용하거나, 데이터를 일정한 구조로 관리할 때 유용함\n\n<br>\n\n```{python}\n# 중첩 리스트\nnested_lst = [\n    [1, 2, 3],\n    [4, 5, 6, 7],\n    [8, 9]\n]\n\nprint(nested_lst)\n```\n\n```{python}\nfor items in nested_lst:\n    for item in items:\n        print(item)\n```\n\n```{python}\n# 2차원 리스트\nkor = [80, 82, 75, 95]\neng = [67, 95, 84, 83]\nmath = [74, 88, 82, 76]\nmidterm = [kor, eng, math]\nprint(midterm)\n```\n\n```{python}\n# 2차원 리스트 인덱싱\nmidterm[0][3]\n```\n\n<br>\n\n### 3.2.5. 리스트 메소드\n#### 3.2.5.1. 리스트 추가\n|함수|설명|\n|:---:|:------------|\n|append()|- 새로운 값을 기존 리스트의 맨 끝에 추가|\n|extend()|- 새로운 리스트를 기존 리스트에 추가(덧셈 연산과 같은 효과)|\n|insert()|- 기존 리스트의 i번째 인덱스에 새로운 값을 추가 <br>- i번째 인덱스를 기준으로 뒤쪽의 인덱스는 하나씩 밀림|\n\n<br>\n\n```{python}\n# 리스트에 한 개의 원소 추가1\nlst = [1, 2, 3]\nlst.append(4)                              # 실행 결과로 아무것도 출력하지 않음\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n```{python}\n# 리스트에 한 개의 원소 추가2\n# 원본 값 변화 없이 리스트에 한 개의 원소를 추가하려면 전개 연산자 *를 사용하면 됨\nlst = [1, 2, 3]\nnew_lst = [*lst, 4]\nprint(lst)                                 # lst 원본 값이 변하지 않음\nprint(new_lst)\n```\n\n```{python}\n# append() 함수는 여러 개의 인수를 입력하거나, 연속으로 사용할 수 없음\nlst = [1, 2, 3]\n#lst.append(4,5)\n#lst.append(4).append(5)\n```\n\n```{python}\n# 리스트에 여러 개의 원소 추가\nlst = [1, 2, 3]\nlst.extend([11, 12])                       # 실행 결과로 아무것도 출력하지 않음\nprint(lst)                                 # lst1 원본 값이 변함\n```\n\n```{python}\n# extend() 함수와 리스트 연결 연산자 +의 차이\nlst1 = [1, 2, 3]\nlst2 = [11, 12, 13]\nlst1 + lst2                                # 실행 결과가 출력됨\nprint(lst1)                                # lst1 원본 값이 변하지 않음\nprint(lst2)                                # lst2 원본 값이 변하지 않음\n```\n\n```{python}\n# 특정 위치에 한 개의 원소 추가\nlst = [1, 2, 3]\nlst.insert(0, 100)                         # 실행 결과로 아무것도 출력하지 않음\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n```{python}\n# 특정 위치에 여러 개의 원소 추가 : 슬라이싱을 이용\nlst = [1, 2, 3]\nlst[1:1] = [11, 12]                        # 인덱스 1의 위치에 리스트 [11, 12]의 원소를 개별적으로 삽입\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n<br>\n\n#### 3.2.5.2. 리스트 삭제\n|함수|설명|\n|:---:|:------------|\n|pop()|- 특정 인덱스 값을 삭제하고 그 값을 반환 <br>- 인덱스를 생략하면 마지막 원소를 삭제|\n|del 키워드|- 특정 인덱스 값을 삭제 <br>- 리스트 객체 자체를 삭제 가능함|\n|remove()|- 리스트에서 첫 번째로 일치하는 값을 삭제 <br>- 값으로 삭제하므로 인덱스를 사용하지 않음|\n|clear()|- 리스트의 모든 원소를 삭제|\n\n<br>\n\n```{python}\n# 특정 인덱스 값 삭제1\nlst = [1, 2, 3, 4, 5]\nresult = lst.pop(3)                        # 실행 결과로 삭제한 값을 반환\nprint(lst)                                 # lst 원본 값이 변함\nprint(result)\n```\n\n```{python}\n# 특정 인덱스 값 삭제2\nlst = [1, 2, 3, 4, 5]\nresult = lst.pop()                         # 인덱스를 생략하면 마지막 원소를 삭제 후 반환\nprint(lst)                                 # lst 원본 값이 변함\nprint(result)\n```\n\n```{python}\n# 특정 인덱스 값 삭제3\nlst = [1, 2, 3, 4, 5]\ndel lst[3]                                 # 실행 결과로 아무것도 반환하지 않음\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n```{python}\n# 리스트 객체 삭제\nlst = [1, 2, 3, 4, 5]\ndel lst\n#print(lst)\n```\n\n```{python}\n# 일치하는 값 삭제1\nlst = [1, 2, 3, 4, 5]\nlst.remove(4)                              # 실행 결과로 아무것도 출력하지 않음\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n```{python}\n# 일치하는 값 삭제2\nlst = [1, 2, 3, 1, 4, 5, 1, 6, 7]\nlst.remove(1)                              # 첫 번째로 일치하는 값만 삭제됨\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n```{python}\n# 리스트 모든 원소 삭제\nlst = [1, 2, 3, 4, 5]\nlst.clear()                                # 실행 결과로 아무것도 출력하지 않음\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n<br>\n\n#### 3.2.5.3. 리스트 재배열\n|함수|설명|\n|:---:|:------------|\n|reverse()|- 리스트 원소를 역순으로 재배열|\n|sort()|- 리스트 원소를 오름차순(default)으로 정렬 <br>- 내림차순으로 정렬하려면 reverse=True로 설정|\n\n<br>\n\n```{python}\n# 리스트 역순 재배열\nlst = [52, 273, 103, 32, 275, 1, 7]\nlst.reverse()                              # 실행 결과로 아무것도 출력하지 않음\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n```{python}\n# 리스트 정렬\nlst = [52, 273, 103, 32, 275, 1, 7]\nlst.sort()                                 # 실행 결과로 아무것도 출력하지 않음, 오름차순 정렬\nprint(lst)                                 # lst 원본 값이 변함\n\nlst.sort(reverse=True)                     # 내림차순 정렬\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n<br>\n\n#### 3.2.5.4. 리스트 검색\n|함수|설명|\n|:---:|:------------|\n|count()|리스트 내부에 특정 값이 몇 번 나타나는지 개수를 반환|\n|index()|리스트 내부에 특정 값의 첫 번째 인덱스를 반환하며, 없으면 오류 발생|\n|in 연산자|리스트 내부에 특정 값이 있다면 True, 없다면 False를 반환|\n\n<br>\n\n```{python}\n# 특정 값 개수\nlst = [1, 2, 3, 1, 4, 5, 1, 6, 7]\nprint(lst.count(1))\nprint(lst.count(9))\n```\n\n```{python}\n# 특정 값의 첫 번쩨 인덱스\nlst = [1, 2, 3, 1, 4, 5, 1, 6, 7]\nprint(lst.index(1))\n#print(lst.index(9))\n```\n\n```{python}\n# 특정 값 찾기\nlst = [1, 2, 3, 4, 5]\nprint(3 in lst)\nprint(6 in lst)\n```\n\n<br>\n\n#### 3.2.5.5. 리스트 통계\n|함수|설명|\n|:---:|:------------|\n|len()|리스트 원소의 개수(리스트 길이) 반환|\n|sum()|리스트 원소의 합계 반환|\n|max()|리스트 원소 중 최대값 반환|\n|min()|리스트 원소 중 최소값 반환|\n\n<br>\n\n```{python}\nlst = [1, 2, 3, 4, 5]\nprint(len(lst))\nprint(sum(lst))\nprint(max(lst))\nprint(min(lst))\n```\n\n<br>\n\n### 3.2.6. 리스트 컴프리헨션\n\n> [식 for 변수 in 반복범위 if 조건식]\n\n<br>\n\n+ 기존 리스트를 사용하여 간결하게 새로운 리스트를 생성하는 기법\n+ 리스트와 for 문을 한 줄에 사용할 수 있어 코드가 더 직관적으로 작성됨\n+ 필터링, 중첩 반복문, 이차원 리스트 등 다양한 방식으로 활용됨\n\n<br>\n\n+ 리스트 컴프리헨션은 수학에서 집합을 정의할 때 **특정 조건을 만족하는 원소들의 집합**으로 표현하는 방법과 유사함\n  + 수학적 집합 :  S = {x | x는 0 이상 10 이하의 정수}\n  + 리스트 컴프리헨션 :  `[x for x in range(10)]`\n\n<br>\n\n```{python}\n## 0~9 정수 저장\n# 일반적인 반복문 + 리스트\nresult1 = []\nfor i in range(10):\n    result1.append(i)\n\nprint(result1)\n```\n\n```{python}\n## 0~9 정수 저장\n# 리스트 컴프리헨션\nresult2 = [i for i in range(10)]\nprint(result2)\n```\n\n```{python}\n## 짝수만 저장 (필터링, if 문과 함께 사용)\n# 일반적인 반복문 + 리스트\nresult1 = []\nfor i in range(10):\n    if i % 2 == 0:\n        result1.append(i)\n\nprint(result1)\n```\n\n```{python}\n## 짝수만 저장 (필터링, if 문과 함께 사용)\n# 리스트 컴프리헨션\nresult2 = [i for i in range(10) if i % 2 == 0]\nprint(result2)\n```\n\n```{python}\n## 두 개의 문자열 조합하여 새로운 리스트 생성 (중첩 반복문)\n# 일반적인 반복문 + 리스트\nword1 = \"Hello\"\nword2 = \"World\"\nresult1 = []\n\nfor i in word1:\n    for j in word2:\n        result1.append(i+j)\n\nprint(result1)\n```\n\n```{python}\n## 두 개의 문자열 조합하여 새로운 리스트 생성 (중첩 반복문)\n# 리스트 컴프리헨션\nword1 = \"Hello\"\nword2 = \"World\"\n\nresult2 = [i+j for i in word1 for j in word2]\nprint(result2)\n```\n\n```{python}\n# 리스트 컴프리헨션 (필터링 + 중첩 반복문)\ncase1 = [\"A\", \"B\", \"C\"]\ncase2 = [\"D\", \"E\", \"A\"]\nresult = [i + j for i in case1 for j in case2 if not(i==j)]\nprint(result)\n```\n\n```{python}\n## 리스트의 각 원소를 대문자, 소문자, 길이로 변환하여 이차원 리스트 생성 (이차원 리스트)\n# 일반적인 반복문 + 리스트\nwords = \"The quick brown fox jumps over the lazy dog\".split()\nword_info1 = []\n\nfor w in words:\n    word_info1.append([w.upper(), w.lower(), len(w)])\n\nword_info1\n```\n\n```{python}\n## 리스트의 각 원소를 대문자, 소문자, 길이로 변환하여 이차원 리스트 생성 (이차원 리스트)\n# 리스트 컴프리헨션\nwords = \"The quick brown fox jumps over the lazy dog\".split()\nword_info2 = [[w.upper(), w.lower(), len(w)] for w in words]\nword_info2\n```\n\n```{python}\n# [주의] 반복문에서 대괄호의 위치에 따라 리스트의 구조가 달라짐\ncase1 = [\"A\", \"B\", \"C\"]\ncase2 = [\"1\", \"2\", \"3\"]\n\n# 일차원 리스트, 앞의 for 문이 먼저 실행됨\nresult1 = [i + j for i in case1 for j in case2]\nprint(result1)\n\n# 이차원 리스트, 뒤의 for 문이 바깥쪽에서 먼저 실행됨\nresult2 = [[i + j for i in case1] for j in case2]\nprint(result2)\n```\n\n<br>\n\n## 3.3. 튜플\n### 3.3.1. 튜플 생성\n+ 튜플(tuple)\n  + 여러 개의 값을 저장할 수 있는 컬렉션 자료형(collection data type)\n  + 순서가 존재하는 시퀀스 자료형(sequence data type)\n  + 한 번 생성된 이후에는 수정할 수 없는 불변형(immutable) 객체\n  + 정수, 부동소수점수, 문자열, bool, 리스트, 튜플, 딕셔너리 등 다양한 자료형을 저장할 수 있는 컨테이너형 객체\n  + 리스트와 구조 및 사용 방법이 거의 동일하지만, **수정이 불가능**하다는 차이점이 있음\n\n<br>\n\n+ 튜플 생성\n  + 리터럴 방식(tuple literal)\n    + `()`를 사용하여 튜플을 직접 정의하는 방법\n    + `()` 안에 원소(element)를 `,`로 구분하여 나열함\n    + `()`을 생략할 수도 있지만, 원소가 하나인 경우에는 `(값,)`처럼 반드시 `,`를 포함해야 함\n  + 생성자 방식(tuple constructor)\n    + `tuple()` 함수를 사용하여 튜플을 생성하는 방법\n    + 다른 iterable 객체(리스트, 튜플, 세트, 딕셔너리, 문자열 등)를 인수로 받아 튜플을 생성할 때 유용함\n\n<br>\n\n```{python}\n# 튜플 생성1\ntpl = (1, 2, 3, 4, 5)\nprint(tpl)\n```\n\n```{python}\n# 튜플 생성2\ntpl = 1, 2, 3, 4, 5\nprint(tpl)\n```\n\n```{python}\n# 튜플 생성3 : 원소가 하나인 경우에는 반드시 ,를 포함해야 함\ntpl = (1,)\nprint(tpl)\n```\n\n```{python}\n# 튜플 생성4 : 튜플은 다양한 자료형을 저장할 수 있음\ntpl = (1, 3.14, \"Hello\", True, [11, 12, 13], (21, 22))\nprint(tpl)\n```\n\n```{python}\n# 튜플 생성5 : iterable 객체 사용\ntpl = tuple(\"Hello\")\nprint(tpl)\n```\n\n```{python}\n# 튜플 생성6 : iterable 객체 사용\ntpl = tuple([1, 2, 3])\nprint(tpl)\n```\n\n<br>\n\n### 3.3.2. 튜플 연산\n+ 리스트 연산과 문법이 동일함\n+ 튜플 연결 연산자 `+` : 두 튜플을 연결해서 새로운 튜플 생성\n+ 튜플 반복 연산자 `*` : 튜플을 숫자만큼 반복하여 새로운 튜플 생성 - (예) 튜플\\*숫자\n\n<br>\n\n```{python}\n# 튜플 연결\ntpl1 = 1, 2, 3\ntpl2 = 11, 12, 13\nprint(tpl1 + tpl2)\n```\n\n```{python}\n# 튜플 반복\nprint(tpl1 * 3)\n```\n\n<br>\n\n### 3.3.3. 인덱싱와 슬라이싱\n+ 리스트와 문법이 동일함\n+ 인덱싱(indexing) : `[index]`를 사용하여 튜플의 특정 위치에 있는 원소에 접근함\n+ 슬라이싱(slicing) : `[(start index):(stop index)]`를 사용하여 튜플의 일부 원소를 추출함\n  + 리스트와 달리 불변형 객체이므로 슬라이싱을 이용하여 기존 튜플의 일부를 삭제하거나, 새로운 원소를 추가 및 변경할 수 없음\n\n<br>\n\n```{python}\n# 튜플 인덱싱1\ntpl = 1, 2, 3, 4, 5\nprint(tpl[0])\n```\n\n```{python}\n# 튜플 인덱싱2\ntpl = 1, 2, 3, 4, 5\nprint(tpl[-1])\n```\n\n```{python}\n# 튜플 슬라이싱1\ntpl = 1, 2, 3, 4, 5\nprint(tpl[0:2])\n```\n\n```{python}\n# 튜플 슬라이싱2\ntpl = 1, 2, 3, 4, 5\nprint(tpl[:2])\nprint(tpl[2:])\nprint(tpl[::2])\n```\n\n```{python}\n# 튜플은 불변형 객체이므로 인덱스를 이용한 수정이 불가능함\n#tpl = 1, 2, 3, 4, 5\n#tpl[2] = 3\n#print(tpl)\n```\n\n<br>\n\n### 3.3.4. 튜플 메소드\n|함수|설명|\n|:---:|:------------|\n|count()|튜플 내부에 특정 값이 몇 번 나타나는지 개수를 반환|\n|index()|튜플 내부에 특정 값의 첫 번째 인덱스를 반환하며, 없으면 오류 발생|\n|in 연산자|튜플 내부에 특정 값이 있다면 True, 없다면 False를 반환|\n|len()|튜플 원소의 개수(튜플 길이) 반환|\n|sum()|튜플 원소의 합계 반환|\n|max()|튜플 원소 중 최대값 반환|\n|min()|튜플 원소 중 최소값 반환|\n\n<br>\n\n```{python}\n# 특정 값 개수\ntpl = 1, 2, 3, 1, 4, 5, 1, 6, 7\nprint(tpl.count(1))\nprint(tpl.count(9))\n```\n\n```{python}\n# 특정 값의 첫 번쩨 인덱스\ntpl = 1, 2, 3, 1, 4, 5, 1, 6, 7\nprint(tpl.index(1))\n#print(tpl.index(9))\n```\n\n```{python}\n# 특정값 찾기\ntpl = 1, 2, 3, 4, 5\nprint(3 in tpl)\nprint(6 in tpl)\n```\n\n```{python}\n#| scrolled: true\ntpl = 1, 2, 3, 4, 5\nprint(len(tpl))\nprint(sum(tpl))\nprint(max(tpl))\nprint(min(tpl))\n```\n\n<br>\n\n## 3.4. 세트\n### 3.4.1. 세트 생성\n+ 세트(set)\n  + 여러 개의 값을 저장할 수 있는 컬렉션 자료형(collection data type)\n  + 순서가 없는 집합 자료형(set data type)\n  + 중복을 허용하지 않으며, 순서가 유지되지 않음\n    + 리스트, 튜플과 달리 인덱싱과 슬라이싱이 불가능함\n  + 한 번 생성된 이후에도 수정할 수 있는 가변형(mutable) 객체\n  + 정수, 부동소수점수, 문자열, bool, 튜플 등 해시 가능한(immutable) 자료형을 저장할 수 있는 컨테이너형 객체\n\n<br>\n\n+ [참고] 해시(hash)\n  + 데이터를 저장하거나 검색할 때 사용되는 고유한 숫자 값(해시 값)을 사용하는 과정\n  + 세트와 딕셔너리는 내부적으로 해시 값을 사용하여 원소 또는 key에 빠르게 접근함(검색 속도가 빠름)\n  + 해시 값은 변경되지 않아야 하므로, 불변형 객체만 사용할 수 있음\n\n<br>\n\n+ 세트 생성\n  + 리터럴 방식(set literal)\n    + `{}`를 사용하여 세트를 직접 정의하는 방법\n    + `{}` 안에 원소(element)를 `,`로 구분하여 나열함\n    + **중복된 원소는 자동으로 제거됨**\n  + 생성자 방식(set constructor)\n    + `set()` 함수를 사용하여 세트를 생성하는 방법\n    + 다른 iterable 객체(리스트, 튜플, 세트, 딕셔너리, 문자열 등)를 인수로 받아 세트를 생성할 때 유용함\n    + 빈 세트를 만들려면 반드시 `set()` 함수를 사용해야 함\n\n<br>\n\n```{python}\n# 세트 생성1\nst = {1, 2, 3, 1, 1, 4}\nprint(st)\n```\n\n```{python}\n# 세트 생성2\nst = set({1, 2, 3, 1, 1, 4})\nprint(st)\n```\n\n```{python}\n# 세트 생성3 : 세트는 해시 가능한(immutable) 자료형을 저장할 수 있음\nst = {1, 3.14, \"Hello\", True, (1, 2, 3), \"Hello\", 1, 1, 1}\nprint(st)\n```\n\n```{python}\n# 세트 생성4: iterable 객체 사용\nst = set(\"Hello\")\nprint(st)\n```\n\n```{python}\n# 세트 생성5 : iterable 객체 사용\nst1 = set([1, 2, 3, 1, 1, 4])\nst2 = set((1, 2, 3, 1, 1, 4))\nprint(st1)\nprint(st2)\n```\n\n<br>\n\n### 3.4.2. 세트 집합 연산 및 메소드\n\n|연산|연산자|함수|\n|:---:|:---:|:------------:|\n|합집합|\\||union()|\n|교집합|&|intersection()|\n|차집합|-|difference()|\n|대칭차집합|^|symmetric_difference()|\n|부분집합 여부|<=|issubset()|\n\n<br>\n\n![](./images/fig3-3.png){width=60%}\n\n<br>\n\n```{python}\n# 세트 연산1\nA = {1, 2, 3}\nB = {3, 4, 5}\n\nprint(A | B)                               # 합집합\nprint(A & B)                               # 교집합\nprint(A - B)                               # 차집합\nprint(A ^ B)                               # 대칭차집합\nprint(A <= B)                              # 부분집합 여부\n```\n\n```{python}\n# 세트 연산2\nA = {1, 2, 3}\nB = {3, 4, 5}\n\nprint(A.union(B))\nprint(A.intersection(B))\nprint(A.difference(B))\nprint(A.symmetric_difference(B))\nprint(A.issubset(B))\n```\n\n```{python}\n# 세트 연산3 : 여러 개의 세트를 연쇄적으로 한 번에 연산 가능\nA = {1, 2, 3}\nB = {3, 4, 5}\nC = {5, 6, 7}\n\n# 연산자 사용\nprint(A | B | C)\nprint(A & B & C)\n\n# 메소드 사용\nprint(A.union(B, C))\nprint(A.intersection(B, C))\n```\n\n<br>\n\n#### 3.4.2.3. 세트 추가/삭제/검색\n|함수|설명|\n|:---:|:------------|\n|add()|- 새로운 값을 세트에 추가|\n|update()|- 여러 개 값을 세트에 추가|\n|pop()|- 임의의 값을 삭제하고 그 값을 반환 <br>- 어떤 값을 삭제할지 예측 불가능|\n|remove()|- 세트에서 일치하는 값을 삭제 <br>- 일치하는 값이 없으면 오류가 발생함|\n|discard()|- 세트에서 일치하는 값을 삭제 <br>- 일치하는 값이 없어도 오류가 발생하지 않음|\n|clear()|- 세트의 모든 원소를 삭제|\n|in 연산자|세트 내부에 특정 값이 있다면 True, 없다면 False를 반환|\n\n<br>\n\n```{python}\n# 세트에 한 개의 원소 추가\nst = {1, 2, 3}\nst.add(6)                                  # 실행 결과로 아무것도 출력하지 않음\nprint(st)                                  # st 원본 값이 변함\n```\n\n```{python}\n# 세트에 여러 개의 원소 추가\nst = {1, 2, 3}\nst.update([1, 2, 6])                       # 리스트 사용\nprint(st)\n\nst.update((1, 7))                          # 튜플 사용\nprint(st)\n\nst.update({8, 9})                          # 세트 사용\nprint(st)\n```\n\n```{python}\n# 임의의 원소 삭제\nst = {1, 2, 3}\nresult = st.pop()                          # 임의의 원소를 삭제 후 반환\nprint(st)                                  # st 원본 값이 변함\nprint(result)\n```\n\n```{python}\n# 일치하는 값 삭제1\nst = {1, 2, 3}\nst.remove(3)\nprint(st)\n```\n\n```{python}\n# 일치하는 값 삭제2 : remove() 함수는 일치하는 값이 없으면 오류가 발생함\n#st = {1, 2, 3}\n#st.remove(4)\n#print(st)\n```\n\n```{python}\n# 일치하는 값 삭제3\nst = {1, 2, 3}\nst.discard(3)\nprint(st)\n```\n\n```{python}\n# 일치하는 값 삭제4 : discard() 함수는 일치하는 값이 없어도 오류가 발생하지 않음\nst = {1, 2, 3}\nst.discard(4)\nprint(st)\n```\n\n```{python}\n# 세트 모든 원소 삭제\nst = {1, 2, 3}\nst.clear()\nprint(st)\n```\n\n```{python}\n# 특정값 찾기\nst = {1, 2, 3}\nprint(3 in st)\nprint(6 in st)\n```\n\n<br>\n\n## 3.5. 딕셔너리\n### 3.5.1. 딕셔너리 생성\n+ 딕셔너리(dictionary)\n  + 여러 개의 키-값(key-value) 쌍을 저장할 수 있는 컬렉션 자료형(collection data type)\n  + 순서가 있는 매핑 자료형(mapping data type)(Python 3.7+)\n  + 키(key)를 통해 값(value)을 찾는 구조\n    + 키는 중복될 수 없고(해시 가능한 자료형만 가능), 값은 중복 가능함(모든 자료형 가능)\n  + 한 번 생성된 이후에도 수정할 수 있는 가변형(mutable) 객체\n\n<br>\n\n+ 딕셔너리 생성\n  + 리터럴 방식(dictionary literal)\n    + `{key: value}`를 사용하여 딕셔너리를 직접 정의하는 방법\n    + `{}` 안에 여러 개의 `key: value` 쌍을 `,`로 구분하여 나열함\n    + **중복된 키가 있으면 마지막에 정의한 값이 적용됨**\n  + 생성자 방식(dictionary constructor)\n    + `dict()` 함수를 사용하여 딕셔너리를 생성하는 방법\n    + 다른 iterable 객체(리스트, 튜플, 세트, 딕셔너리, 문자열 등)를 인수로 받아 딕셔너리를 생성할 때 유용함\n      + `zip()` 함수를 이용하여 여러 개의 리스트나 튜플을 병렬로 묶어 키-값 쌍의 형태로 구성할 수 있음\n      + `enumerate()` 함수를 이용하여 인덱스를 키로, 원소를 값으로 하여 쌍으로 묶어 딕셔너리를 생성할 수 있음\n\n<br>\n\n```{python}\n# 딕셔너리 생성1\ndct = {'a': 1, 'b': 2, 'c': 3}\nprint(dct)\n```\n\n```{python}\n# 딕셔너리 생성2\ndct = dict(a=1, b=2, c=3)\nprint(dct)\n```\n\n```{python}\n# 딕셔너리 생성3 : 키는 중복될 수 없음\ndct = {'a':1, 'b': 2, 'c': 3, 'a': 4, 'b': 5}\nprint(dct)\n```\n\n```{python}\n# 딕셔너리 생성4 : (key, value) 쌍의 리스트 사용\ndct = dict([('x', 100), ('y', 200)])\nprint(dct)\n```\n\n```{python}\n# 딕셔너리 생성5 : zip() 함수 사용\nkeys = ['name', 'age', 'city']\nvalues = ['Alice', 28, 'Jeonju']\ndct = dict(zip(keys, values))\nprint(dct)\n```\n\n```{python}\n# 딕셔너리 생성6 : enumerate() 함수 사용\nfruits = ['apple', 'banana', 'cherry']\ndct = dict(enumerate(fruits))\nprint(dct)\n```\n\n<br>\n\n### 3.5.2. 딕셔너리 값 접근\n+ 딕셔너리는 키를 사용하여 값에 접근함\n+ 리스트, 튜플처럼 정수 인덱스를 이용한 접근은 불가능함\n\n<br>\n\n```{python}\n# 키를 이용한 값 접근\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nprint(info['name'])\nprint(info['age'])\n```\n\n```{python}\n# 딕셔너리는 가변형 객체이므로 키를 이용한 수정이 가능함\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\ninfo['city'] = 'Iksan'\nprint(info)\n```\n\n```{python}\n# 새로운 키-값 쌍 추가\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\ninfo['email'] = 'alice123@gmail.com'\nprint(info)\n```\n\n<br>\n\n### 3.5.3. 딕셔너리 메소드\n#### 3.5.3.1. 딕셔너리 조회\n|함수|설명|\n|:---:|:------------|\n|keys()|딕셔너리의 모든 키를 반환(`dict_keys` 객체)|\n|values()|딕셔너리의 모든 값을 반환(`dict_values` 객체)|\n|items()|(키, 값) 쌍을 튜플 형태로 반환(`dict_items` 객체)|\n|get()|지정한 키의 값을 반환하며, 없으면 None 반환|\n|in 연산자|특정 키가 딕셔너리에 있다면 True, 없다면 False 반환|\n\n<br>\n\n```{python}\n# 모든 키\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nprint(list(info.keys()))\n```\n\n```{python}\n# 모든 값\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nprint(list(info.values()))\n```\n\n```{python}\n# (키, 값) 쌍\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nprint(list(info.items()))\n```\n\n```{python}\n# 키를 이용한 값 조회\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nprint(info.get('name'))\nprint(info.get('email'))\n```\n\n```{python}\n# 특정 키 찾기\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nprint('age' in info)\nprint('email' in info)\n```\n\n<br>\n\n#### 3.5.3.2. 딕셔너리 추가/삭제\n|함수|설명|\n|:---:|:------------|\n|update()|다른 딕셔너리나 키워드 인수를 이용하여 원소를 추가 및 수정|\n|pop()|특정 키의 값을 삭제하고 그 값을 반환하며, 키가 없으면 오류 발생|\n|popitem()|마지막 (키, 값) 쌍을 삭제하고 반환|\n|del 키워드|특정 키의 원소를 삭제하며, 키가 없으면 오류 발생|\n|clear()|딕셔너리의 모든 원소를 삭제|\n\n<br>\n\n```{python}\n# 원소 추가 및 수정1\ninfo = {'name': 'Alice', 'age': 28}\ninfo.update({'age': 29, 'city': 'Jeonju'})\nprint(info)\n```\n\n```{python}\n# 원소 추가 및 수정2\ninfo = {'name': 'Alice', 'age': 28}\ninfo.update(age=29, city='Jeonju')\nprint(info)\n```\n\n```{python}\n# 특정 키의 값 삭제1\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nage = info.pop('age')\nprint(info)\nprint(age)\n```\n\n```{python}\n# 특정 키의 값 삭제2\n#info = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\n#age = info.pop('email')\n#print(info)\n#print(email)\n```\n\n```{python}\n# 마지막 (키, 값) 쌍 삭제\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nlast_item = info.popitem()\nprint(info)\nprint(last_item)\n```\n\n```{python}\n# 특정 키의 원소 삭제1\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\ndel info['age']\nprint(info)\n```\n\n```{python}\n# 특정 키의 원소 삭제2\n#info = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\n#del info['email']\n#print(info)\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"3_structure.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","theme":["simplex"],"toc-location":"right","toc-expand":true,"jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}