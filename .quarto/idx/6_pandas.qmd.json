{"title":"6.1. 판다스 객체","markdown":{"yaml":{"jupyter":"python3"},"headingText":"6.1. 판다스 객체","containsRefs":false,"markdown":"\n\n<h1>6. Pandas</h1>\n<br>\n\n### 6.1.1. 판다스 객체 생성\n+ Pandas\n  + NumPy를 기반으로 만들어진 데이터 분석용 라이브러리\n  + 레이블(label)로 식별되는 데이터를 쉽게 다룰 수 있도록 지원\n  + 고성능 데이터 조작, 탐색, 전처리, 변환, 요약, 통계 연산 기능 제공\n  + 주요 객체로는 Series(1차원), DataFrame(2차원), Index(레이블 관리 구조)가 있음\n\n<br>\n\n|객체|설명|\n|:---:|:---------------|\n|Series|- 1차원 레이블이 붙은 배열로, 각 데이터에 고유한 인덱스가 있음 <br>- 모든 원소가 동일한 자료형으로 저장되며, 다양한 자료형을 지원|\n|DataFrame|- 2차원 표 형태의 데이터 구조로, 행(row)과 열(column)로 구성됨 <br>- 각 열은 Series로 구성되어 있으며, 서로 다른 자료형을 가질 수 있음 <br>- DataFrame은 정렬된(같은 인덱스 공유) Series 객체의 연속으로 볼 수 있음|\n|Index|- 데이터에 레이블을 부여하는 객체로, 행 또는 열에 사용됨 <br>- 데이터 정렬, 선택, 결합 등을 효율적으로 할 수 있도록 지원|\n\n<br>\n\n|함수|설명|\n|:---:|:------------|\n|pd.Series()|1차원 Series 객체 생성|\n|pd.DataFrame()|2차원 DataFrame 객체 생성|\n|pd.Index()|Index 객체 생성|\n\n<br>\n\n```{python}\nimport numpy as np\nimport pandas as pd\n```\n\n```{python}\n# Series 생성1 : 리스트 사용\nsr = pd.Series([1, 2, 3, 4, 5])\nprint(sr)\n```\n\n```{python}\n# Series 생성2 : 넘파이 배열 사용\nsr = pd.Series(np.array([1, 2, 3, 4, 5]))\nprint(sr)\n```\n\n```{python}\n# Series 생성3 : 딕셔너리 사용\n# 딕셔너리 키는 인덱스로 자동 지정됨\nsr = pd.Series({'a': 10, 'b': 20, 'c': 30})\nprint(sr)\n```\n\n```{python}\n# Series 생성4 : 인덱스 지정\nsr = pd.Series([1, 2, 3], index = ['a', 'b', 'c'])\nprint(sr)\n```\n\n```{python}\n# DataFrame 생성1 : Series 사용\nsr = pd.Series([1, 2, 3], index = ['a', 'b', 'c'])\ndf = pd.DataFrame(sr, columns = ['value'])\nprint(df)\n```\n\n```{python}\n# DataFrame 생성2 : 리스트 사용\nlst = [['Alice', 22], ['Bob', 20], ['Charlie', 27]]\ndf = pd.DataFrame(lst, columns=['Name', 'Age'])\nprint(df)\n```\n\n```{python}\n# DataFrame 생성3 : 넘파이 배열 사용\narr = np.array([['Alice', 22], ['Bob', 20], ['Charlie', 27]])\ndf = pd.DataFrame(arr, columns=['Name', 'Age'])\nprint(df)\n```\n\n```{python}\n# DataFrame 생성4 : 딕셔너리 사용\n# 딕셔너리 키는 열 이름으로 자동 지정됨\ndct = {'Name': ['Alice', 'Bob', 'Charlie'], 'Age': [22, 20, 27]}\ndf = pd.DataFrame(dct)\nprint(df)\n```\n\n```{python}\n# DataFrame 생성5 : 딕셔너리 + 리스트 컴프리헨션 사용\ndct = [{'a': i, 'b': 2*i} for i in range(3)]\ndf = pd.DataFrame(dct)\nprint(df)\n```\n\n```{python}\n# DataFrame 생성6 : Series 사용\n# 서로 다른 인덱스를 가진 Series로 DataFrame을 생성하면\n# 공통된 인덱스를 기준으로 맞춰지고, 누락된 값은 NaN(Not a Number)으로 채워짐\nsr1 = pd.Series([1, 2, 3], index = ['a', 'b', 'c'])\nsr2 = pd.Series([4, 5, 6], index = ['a', 'c', 'd'])\ndf = pd.DataFrame({'x': sr1, 'y': sr2})\nprint(df)\n```\n\n```{python}\n# DataFrame 생성7 : 인덱스 및 열 이름 지정\ndata = [[101, 22], [102, 20], [103, 27]]\ncolumns = ['ID', 'Age']\nindex = ['Alice', 'Bob', 'Charlie']\ndf = pd.DataFrame(data, columns=columns, index=index)\nprint(df)\n```\n\n```{python}\n# Index 생성1 : 리스트 사용\nidx = pd.Index(['a', 'b', 'c', 'd'])\nidx\n```\n\n```{python}\n# Index 생성2 : range() 사용\nidx = pd.Index(range(1, 6))\nidx\n```\n\n<br>\n\n### 6.1.2. 데이터프레임 속성\n|속성|설명|\n|:---:|:------------|\n|.shape|데이터프레임의 모양(행, 열)|\n|.index|행 인덱스 조회 및 변경|\n|.columns|열 이름 조회 및 변경|\n|.dtypes|각 열의 자료형 확인|\n\n<br>\n\n```{python}\n# 데이터프레임 속성\ndf = pd.DataFrame({\n    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],\n    'Age': [25, 30, 35, 40, 28],\n    'Score': [85.5, 90.3, 78.2, 88.9, 92.5]\n})\n\nprint(df.shape)\nprint(df.index)\nprint(df.columns)\nprint(df.dtypes)\n```\n\n```{python}\n# 행 인덱스 변경\ndf.index = ['a', 'b', 'c', 'd', 'e']\nprint(df)\n```\n\n```{python}\n# 열 이름 변경\ndf.columns = ['Student Name', 'Student Age', 'Exam Score']\nprint(df)\n```\n\n<br>\n\n### 6.1.3. 데이터프레임 정보\n|함수|설명|\n|:---:|:------------|\n|info()|기본 정보(행 개수, 열 개수, 데이터 자료형, 결측값 여부 등) 출력|\n|head()|상위 n개의 행 출력(초기 값 n=5)|\n\n<br>\n\n```{python}\ndf = pd.DataFrame({\n    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],\n    'Age': [25, 30, 35, 40, 28],\n    'Score': [85.5, 90.3, 78.2, 88.9, 92.5]\n})\n```\n\n```{python}\n# 기본 정보\nprint(df.info())\n```\n\n```{python}\n# 상위 5개 행\nprint(df.head())\n```\n\n<br>\n\n## 6.2. 인덱싱과 슬라이싱\n### 6.2.1. 열 인덱싱과 슬라이싱\n+ 열 이름을 사용하여 직접 선택\n  + 여러 개의 열을 선택할 때는 열 이름을 리스트로 작성\n+ `loc[:, ]` : 레이블(label) 기반 접근 방식\n+ `iloc[:, ]` : 정수(integer) 기반 접근 방식\n\n<br>\n\n```{python}\ndf = pd.DataFrame({\n    'A': [1, 2, 3],\n    'B': [4, 5, 6],\n    'C': [7, 8, 9],\n    'D': [10, 11, 12]\n}, index=['x', 'y', 'z'])\n```\n\n```python\n# 열 인덱싱과 슬라이싱1 : 열 이름 사용\ndf['A']                                      # 열 이름\ndf[['A', 'C']]                               # 열 이름 리스트\n#df['A':'B']                                 # 열 이름 슬라이싱은 안 됨, Error!\n```\n\n```python\n# 열 인덱싱과 슬라이싱2 : 레이블 기반 접근\ndf.loc[:, 'A']                               # 열 이름\ndf.loc[:, ['A', 'C']]                        # 열 이름 리스트\ndf.loc[:, 'A':'B']                           # 열 이름 슬라이싱\ndf.loc[:, 'B'::2]                            # 열 이름 스트라이딩\ndf.loc[:, [True, False, True, True]]         # bool 리스트\n```\n\n```python\n# 열 인덱싱과 슬라이싱3 : 정수 기반 접근\ndf.iloc[:, 0]                                # 정수\ndf.iloc[:, [0, 3]]                           # 정수 리스트\ndf.iloc[:, range(2)]                         # range\ndf.iloc[:, 0:3]                              # 슬라이싱\ndf.iloc[:, 1::2]                             # 스트라이딩\n```\n\n<br>\n\n### 6.2.2. 행 인덱싱과 슬라이싱\n+ `loc[, :]` : 레이블(label) 기반 접근 방식\n+ `iloc[, :]` : 정수(integer) 기반 접근 방식\n\n<br>\n\n```python\n# 행 인덱싱과 슬라이싱1 : 레이블 기반 접근\ndf.loc['x', ]                                # 인덱스 이름\ndf.loc[['x', 'y'], :]                        # 인덱스 이름 리스트\ndf.loc['x':'y', :]                           # 인덱스 이름 슬라이싱\ndf.loc['x'::1, :]                            # 인덱스 이름 스트라이딩\ndf.loc[[True, False, True], :]               # bool 리스트\ndf.loc[list(df['A'] < 3), :]                 # bool 리스트\ndf.loc[df['A'] < 3, :]                       # bool 리스트\n```\n\n```python\n# 행 인덱싱과 슬라이싱2 : 정수 기반 접근\ndf.iloc[0, :]                                # 정수\ndf.iloc[[0, 2], :]                           # 정수 리스트\ndf.iloc[range(2), :]                         # range\ndf.iloc[0:1, :]                              # 슬라이싱\ndf.iloc[1::2, :]                             # 스트라이딩\ndf.iloc[[True, False, True], :]              # bool 리스트 (권장하지 않음)\ndf.iloc[list(df['A'] < 3), :]                # bool 리스트 (권장하지 않음)\n#df.iloc[df['A'] < 3, :]                     # bool 리스트 (Error!)\n```\n\n```python\n# 행 인덱싱과 슬라이싱3 : 정수 기반 접근\ndf.iloc[0]                                   # 정수\ndf.iloc[[0, 2]]                              # 정수 리스트\ndf.iloc[range(2)]                            # range\ndf.iloc[0:1]                                 # 슬라이싱\ndf.iloc[1::2]                                # 스트라이딩\ndf.iloc[[True, False, True]]                 # bool 리스트(권장하지 않음)\ndf.iloc[list(df['A'] < 3)]                   # bool 리스트(권장하지 않음)\n#df.iloc[df['A'] < 3]                        # bool 리스트 (Error!)\n```\n\n```python\n# 행 인덱싱과 슬라이싱4\n# 인덱싱은 열을 참조하는 반면, 슬라이싱은 행을 참조함\n#df[0]                                       # Error!\ndf[0:2]                                      # 권장하지 않음\ndf['x':'y']                                  # 권장하지 않음\ndf[df['A'] < 3]                              # 불리언 인덱싱은 행 단위로 적용됨\n```\n\n```python\n# 행 인덱싱과 슬라이싱5\ndf = pd.DataFrame({\n    'A': [1, 2, 3],\n    'B': [4, 5, 6],\n    'C': [7, 8, 9],\n    'D': [10, 11, 12]})\n\ndf.loc[0:1]                                  # 명시적 인덱스(label) 사용 - 마지막 인덱스 포함\ndf.iloc[0:1]                                 # 암묵적 인덱스(integer) 사용 - 마지막 인덱스 제외\ndf[0:1]                                      # 암묵적 인덱스(integer) 사용, iloc와 동일\n```\n\n<br>\n\n## 6.3. 데이터프레임 연산\n### 6.3.1. 기본 연산\n+ NumPy와 동일하게 벡터화, 브로드캐스팅 모두 지원\n+ 단항 연산: 인덱스와 열 레이블 보존\n+ 이항 연산: 인덱스와 열 레이블을 기준으로 자동 정렬되어 연산\n  + 위치가 아닌 동일한 레이블끼리 연산하며, 일치하지 않는 항목은 `NaN`으로 처리\n\n<br>\n\n```{python}\n# 단항 연산1 : Series\nsr = pd.Series([1, 2, 3, 4, 5])\nprint(sr + 2)\n```\n\n```{python}\n# 단항 연산2 : DataFrame\ndf = pd.DataFrame({\n    'x': [1, 2, 3, 4, 5],\n    'y': [11, 12, 13, 14, 15] \n})\nprint(np.log(df))\n```\n\n```{python}\n# 이항 연산1 : Series\n# 두 시리즈에 존재하는 모든 행 인덱스를 포함한 결과 생성 (합집합처럼 동작)\nmath = pd.Series({'Alice': 85, 'Bob': 90, 'Charlie': 78})\nenglish = pd.Series({'Alice': 95, 'Charlie': 80, 'David': 88})\nprint(math + english)\n```\n\n```{python}\n# 이항 연산2: DataFrame\nmidterm = pd.DataFrame({\n    'math': [85, 90, 78],\n    'science': [88, 92, 79]\n}, index=['Alice', 'Bob', 'Charlie'])\n\nfinal = pd.DataFrame({\n    'math': [95, 88, 82],\n    'english': [95, 80, 88]\n}, index=['Alice', 'Charlie', 'David'])\n\nprint(midterm + final)\n```\n\n<br>\n\n### 6.3.2. 연산자 메소드\n+ 인덱스와 열 레이블이 일치하지 않아도 연산 가능\n+ 예외 처리가 필요한 경우 기본 연산자보다 안정적임\n  + `fill_value` 인수를 사용하여 `NaN`를 다른 값으로 처리 가능\n\n<br>\n\n|연산자|연산자 메소드|\n|:---:|:------------|\n|+|add()|\n|-|sub()|\n|*|mul()|\n|/|divide()|\n|//|floordiv()|\n|%|mod()|\n|**|pow()|\n\n<br>\n\n```{python}\n# 연산자 메소드1\n# midterm + final과 동일한 결과\nprint(midterm.add(final))\n```\n\n```{python}\n# 연산자 메소드2\n# 하나의 데이터프레임에만 값이 있는 경우 0으로 처리하고, 둘 다 값이 없으면 NaN 반환\nprint(midterm.add(final, fill_value = 0))\n```\n\n<br>\n\n### 6.3.3. 새로운 열 생성\n|함수|설명|\n|:---:|:---------------|\n|assign()|기존 데이터프레임을 수정하지 않고, 새로운 열을 추가한 복사본을 반환|\n|eval()|수식을 문자열로 작성하여 열 간 계산을 간결하게 수행(직관적인 수식 표현)|\n|where()|조건에 따라 서로 다른 값을 선택하여 새로운 열 생성(NumPy 메소드)|\n\n<br>\n\n```{python}\ndf = pd.DataFrame({\n    'product': ['A', 'B', 'C', 'D', 'E'],\n    'price': [100, 200, 150, 300, 250],\n    'quantity': [10, 5, 3, 7, 6]\n})\nprint(df)\n```\n\n```{python}\n# 새로운 열 생성1: 기본 할당\n# 기본 할당은 데이터를 직접 수정하므로, 권장하지 않음\ndf['total_price'] = df['price'] * df['quantity']\nprint(df)\n```\n\n```{python}\n# 새로운 열 생성2: assign() 사용\nprint(df.assign(total_price = df['price'] * df['quantity']))\n```\n\n```{python}\n# 새로운 열 생성3: eval() 사용\n# inplace=True: 기존 데이터프레임에 직접 적용(새 객체를 반환하지 않음)\ndf.eval('total_price = price * quantity', inplace=True)\nprint(df)\n```\n\n```{python}\n# 새로운 열 생성4: where() 사용\n# 가격이 200 이상이면 'Expensive', 아니면 'Affordable'로 구분\ndf['price_category'] = np.where(df['price'] >= 200, 'Expensive', 'Affordable')\nprint(df)\n```\n\n<br>\n\n### 6.3.4. 데이터프레임 집계\n+ NumPy와 동일한 축 개념 사용\n  + axis 0 : 행 방향 연산(열 단위로 요약)\n  + axis 1 : 열 방향 연산(행 단위로 요약)\n+ 수치형 데이터에 적용되며, NaN은 기본적으로 제외됨\n\n<br>\n\n|함수|설명|\n|:---:|:------------|\n|count()|NaN를 제외한 행의 개수|\n|value_counts()|집단별 빈도|\n|describe()|요약 통계량|\n|sum()|합계|\n|mean()|평균|\n|std()|표준편차|\n|median()|중앙값|\n|min(), max()|최소값, 최대값|\n|cumsum(), cumprod()|누적 합계, 누적 곱|\n\n<br>\n\n```{python}\n## 실습 데이터 : tips 데이터셋\nimport seaborn as sns\ntips = sns.load_dataset('tips')\n```\n\n```{python}\n# total_bill: 식사 금액\n# tip: 팁 금액\n# sex: 성별\n# smoker: 흡연 여부\n# day: 요일\n# time: 식사 시간(Lunch, Dinner)\n# size: 식사 인원 수\nprint(tips.info())\n```\n\n```{python}\nprint(tips.head())\n```\n\n```{python}\nprint(tips.describe())\n```\n\n```{python}\n# 각 열의 유효한 데이터 수 (NaN 제외)\nprint(tips.count())\n```\n\n```{python}\n# 식사 시간별 주문 수\nprint(tips.value_counts('time'))\n```\n\n```{python}\n# 전체(합계) 식사 금액, 팁 금액, 식사 인원 수\nprint(tips[['total_bill', 'tip', 'size']].sum())\n```\n\n```{python}\n# 고객 1인당 평균 식사 금액\nprint((tips['total_bill'] / tips['size']).mean())\n```\n\n```{python}\n# 고객 1인당 평균 팁 금액\nprint((tips['tip'] / tips['size']).mean())\n```\n\n```{python}\n# 전체 식사 금액에서 팁이 차지하는 비율\nprint(tips['tip'] / tips['total_bill'])\n```\n\n```{python}\n# 전체 식사 금액에서 팁이 차지하는 비율에 대한 요약 통계량\nprint((tips['tip'] / tips['total_bill']).describe())\n```\n\n```{python}\n# 전체 식사 금액에서 팁이 차지하는 비율이 50% 이상인 경우\nprint(tips[tips['tip'] / tips['total_bill'] >= 0.5])\n```\n\n<br>\n\n## 6.4. 고급 데이터 처리\n### 6.4.1. 집단별 연산\n+ `groupby()` 함수를 이용하여 특정 열을 기준으로 데이터를 집단화한 후, 다양한 연산 수행 가능\n+ SQL의 GROUP BY와 유사한 기능을 제공하며, 집계, 변환, 필터링을 지원\n\n<br>\n\n|함수|설명|\n|:---:|:------------|\n|aggregate() 또는 agg()|여러 집계 함수를 동시에 적용(문자열, 함수, 리스트 등 가능)|\n|filter()|집단별 집계 결과를 조건으로 집단 자체를 필터링|\n|transform()|집단별 연산 결과를 원래 구조와 같은 형태로 반환(원소 개수 유지)|\n|apply()|임의의 함수를 전체 집단에 유연하게 적용(집계, 반환 모두 가능)|\n\n<br>\n\n```{python}\n#  실습 데이터 : tips 데이터셋\ntips = sns.load_dataset('tips')\n```\n\n```{python}\n# 요일별 평균 식사 금액\n# observed=False: 모든 범주 포함, 실제 데이터가 없으면 NaN\nprint(tips.groupby('day', observed=False)['total_bill'].mean())\n```\n\n```{python}\n# 식사 시간별 식사 금액, 팁 금액의 평균 및 표준편차\nprint(tips.groupby('time', observed=False)[['total_bill', 'tip']].agg(['mean', 'std']))\n```\n\n```{python}\n# 식사 시간별 식사 금액의 최대값, 팁 금액의 최소값: 딕셔너리 사용\nprint(tips.groupby('time', observed=False).agg({'total_bill': 'max', 'tip': 'min'}).reset_index())\n```\n\n```{python}\n# 식사 시간별 식사 금액의 최대값, 팁 금액의 최소값: 튜플 사용, named aggregation 문법\nprint(tips.groupby('time', observed=False).agg(total_bill_max = ('total_bill', 'max'), tip_min = ('tip', 'min')).reset_index())\n```\n\n\n<br>\n\n+ [참고] 람다 함수(lamdba function)\n  + 함수 이름 없이 일시적으로 정의해 사용할 수 있는 익명 함수\n  + `def`, `return` 없이 간단한 함수 로직을 한 줄로 표현\n  + 구조는 일반 함수와 같지만, 주로 짧고 단순한 연산에 사용\n  + `apply()`, `filter()` 등 함수의 인수로 전달할 때 유용하게 활용\n\n<br>\n\n```{python}\n# 함수 정의\ndef f(x, y):\n    return x + y\nf(1, 4)\n```\n\n```{python}\n# 람다 함수\n(lambda x, y: x + y)(1, 4)\n```\n\n```{python}\n# 팀 금액 평균이 3달러 이상인 요일 데이터 필터링: 함수 정의\ndef filter_tip_avg(x):\n    return x['tip'].mean() >= 3\n\nprint(tips.groupby('day', observed=False).filter(filter_tip_avg))\n```\n\n```{python}\n# 팀 금액 평균이 3달러 이상인 요일 데이터 필터링: 람다 함수 사용\nprint(tips.groupby('day', observed=False).filter(lambda x: x['tip'].mean() >= 3))\n```\n\n```{python}\n# 성별 팁 금액의 편차\ntips['tip_dev'] = tips.groupby('sex', observed=False)['tip'].transform(lambda x: x - x.mean())\nprint(tips[['sex', 'tip', 'tip_dev']].head())\n```\n\n```{python}\n# 식사 시간별 팁 금액의 사분위수범위: 함수 정의\ndef iqr(x):\n    return x.quantile(0.75) - x.quantile(0.25)\n\nprint(tips.groupby('time', observed=False)['tip'].apply(iqr))\n```\n\n```{python}\n# 식사 시간별 팁 금액의 사분위수범위: 람다 함수 사용\nprint(tips.groupby('time', observed=False)['tip'].apply(lambda x: x.quantile(0.75) - x.quantile(0.25)))\n```\n\n<br>\n\n### 6.4.2. 표현식 기반 처리\n+ eval(), query() 메소드를 사용하면 문자열 형태의 표현식을 통해 데이터를 보다 직관적으로 처리 가능\n+ 복잡한 연산이나 조건 필터링을 간결하게 표현할 수 있어 가독성과 성능 모두에 유리함\n  + 데이터프레임의 열 이름을 따옴표 없이 사용 가능\n  + 외부 변수는 `@` 기호를 사용하여 표현식에 표현 가능\n\n<br>\n\n|함수|설명|\n|:---:|:---------------|\n|eval()|- 문자열로 작성한 수식을 이용하여 기존 열을 연산하거나 새로운 열을 생성 <br>- Python 표현식을 그대로 사용할 수 있어 가독성이 높음|\n|query()|- 문자열로 작성한 조건식을 이용하여 행을 필터링<br>- 복잡한 불리언 인덱싱보다 간결하고 직관적인 문법 제공 <br>- 논리 연산자는 `&`, `\\|`, `~`의 사용을 권장하며, 각 조건은 괄호 ()로 감싸야 함|\n\n<br>\n\n```{python}\n#  실습 데이터 : tips 데이터셋\ntips = sns.load_dataset('tips')\n```\n\n```{python}\n# 기존 열 연산: 식사 금액에서 세금 10%를 제외한 실수령 금액\nprint(tips.eval('total_bill = total_bill * 0.9'))\n```\n\n```{python}\n# 새로운 열 생성: 전체 식사 금액 대비 팁 금액 비율\n# inplace=True: 기존 데이터프레임에 직접 적용(새 객체를 반환하지 않음)\ntips.eval('tip_rate = tip / total_bill', inplace=True)\nprint(tips)\n```\n\n```{python}\n# 외부 변수 사용: 전체 식사 금액에 따른 기본(최소) 팁 금액\ntip_percentage = 0.15\ntips.eval('min_tip = total_bill * @tip_percentage', inplace = True)\nprint(tips)\n```\n\n```{python}\n# 기본(최소) 팁 금액보다 적게 준 경우 'Below', 많거나 같은 경우 'Above'로 구분\n# 기본(최소) 팁 금액보다 적게 준 경우는 108팀임\ntips['tip_group'] = np.where(tips['tip'] < tips['min_tip'], 'Below', 'Above')\nprint(tips['tip_group'].value_counts())\n```\n\n```{python}\n# 단일 조건 필터링: 식사 금액이 20달러 이상인 경우\nprint(tips.query('total_bill >= 20'))\n```\n\n```{python}\n# 다중 조건 필터링: 식사 인원 수가 3명 이상이고, 목요일에 방문한 경우\n#print(tips.query('size >= 3 and day == \"Thur\"'))           # 권장하지 않음, 조건이 복잡할 경우 오류가 발생할 수 있음\nprint(tips.query('(size >= 3) & (day == \"Thur\")'))          # 권장 방식: 괄호로 각 조건을 명확히 구분\n```\n\n```{python}\n# 외부 변수 사용: 기준 팁 금액 미만인 경우\nmin_tip_required = 5\nprint(tips.query('tip < @min_tip_required'))\n```\n\n```{python}\n# 기준 팁 금액보다 적게 준 경우는 216팀임\nprint(tips.query('tip < @min_tip_required').shape[0])\nprint(len(tips.query('tip < @min_tip_required')))\n```\n\n","srcMarkdownNoYaml":"\n\n<h1>6. Pandas</h1>\n<br>\n\n## 6.1. 판다스 객체\n### 6.1.1. 판다스 객체 생성\n+ Pandas\n  + NumPy를 기반으로 만들어진 데이터 분석용 라이브러리\n  + 레이블(label)로 식별되는 데이터를 쉽게 다룰 수 있도록 지원\n  + 고성능 데이터 조작, 탐색, 전처리, 변환, 요약, 통계 연산 기능 제공\n  + 주요 객체로는 Series(1차원), DataFrame(2차원), Index(레이블 관리 구조)가 있음\n\n<br>\n\n|객체|설명|\n|:---:|:---------------|\n|Series|- 1차원 레이블이 붙은 배열로, 각 데이터에 고유한 인덱스가 있음 <br>- 모든 원소가 동일한 자료형으로 저장되며, 다양한 자료형을 지원|\n|DataFrame|- 2차원 표 형태의 데이터 구조로, 행(row)과 열(column)로 구성됨 <br>- 각 열은 Series로 구성되어 있으며, 서로 다른 자료형을 가질 수 있음 <br>- DataFrame은 정렬된(같은 인덱스 공유) Series 객체의 연속으로 볼 수 있음|\n|Index|- 데이터에 레이블을 부여하는 객체로, 행 또는 열에 사용됨 <br>- 데이터 정렬, 선택, 결합 등을 효율적으로 할 수 있도록 지원|\n\n<br>\n\n|함수|설명|\n|:---:|:------------|\n|pd.Series()|1차원 Series 객체 생성|\n|pd.DataFrame()|2차원 DataFrame 객체 생성|\n|pd.Index()|Index 객체 생성|\n\n<br>\n\n```{python}\nimport numpy as np\nimport pandas as pd\n```\n\n```{python}\n# Series 생성1 : 리스트 사용\nsr = pd.Series([1, 2, 3, 4, 5])\nprint(sr)\n```\n\n```{python}\n# Series 생성2 : 넘파이 배열 사용\nsr = pd.Series(np.array([1, 2, 3, 4, 5]))\nprint(sr)\n```\n\n```{python}\n# Series 생성3 : 딕셔너리 사용\n# 딕셔너리 키는 인덱스로 자동 지정됨\nsr = pd.Series({'a': 10, 'b': 20, 'c': 30})\nprint(sr)\n```\n\n```{python}\n# Series 생성4 : 인덱스 지정\nsr = pd.Series([1, 2, 3], index = ['a', 'b', 'c'])\nprint(sr)\n```\n\n```{python}\n# DataFrame 생성1 : Series 사용\nsr = pd.Series([1, 2, 3], index = ['a', 'b', 'c'])\ndf = pd.DataFrame(sr, columns = ['value'])\nprint(df)\n```\n\n```{python}\n# DataFrame 생성2 : 리스트 사용\nlst = [['Alice', 22], ['Bob', 20], ['Charlie', 27]]\ndf = pd.DataFrame(lst, columns=['Name', 'Age'])\nprint(df)\n```\n\n```{python}\n# DataFrame 생성3 : 넘파이 배열 사용\narr = np.array([['Alice', 22], ['Bob', 20], ['Charlie', 27]])\ndf = pd.DataFrame(arr, columns=['Name', 'Age'])\nprint(df)\n```\n\n```{python}\n# DataFrame 생성4 : 딕셔너리 사용\n# 딕셔너리 키는 열 이름으로 자동 지정됨\ndct = {'Name': ['Alice', 'Bob', 'Charlie'], 'Age': [22, 20, 27]}\ndf = pd.DataFrame(dct)\nprint(df)\n```\n\n```{python}\n# DataFrame 생성5 : 딕셔너리 + 리스트 컴프리헨션 사용\ndct = [{'a': i, 'b': 2*i} for i in range(3)]\ndf = pd.DataFrame(dct)\nprint(df)\n```\n\n```{python}\n# DataFrame 생성6 : Series 사용\n# 서로 다른 인덱스를 가진 Series로 DataFrame을 생성하면\n# 공통된 인덱스를 기준으로 맞춰지고, 누락된 값은 NaN(Not a Number)으로 채워짐\nsr1 = pd.Series([1, 2, 3], index = ['a', 'b', 'c'])\nsr2 = pd.Series([4, 5, 6], index = ['a', 'c', 'd'])\ndf = pd.DataFrame({'x': sr1, 'y': sr2})\nprint(df)\n```\n\n```{python}\n# DataFrame 생성7 : 인덱스 및 열 이름 지정\ndata = [[101, 22], [102, 20], [103, 27]]\ncolumns = ['ID', 'Age']\nindex = ['Alice', 'Bob', 'Charlie']\ndf = pd.DataFrame(data, columns=columns, index=index)\nprint(df)\n```\n\n```{python}\n# Index 생성1 : 리스트 사용\nidx = pd.Index(['a', 'b', 'c', 'd'])\nidx\n```\n\n```{python}\n# Index 생성2 : range() 사용\nidx = pd.Index(range(1, 6))\nidx\n```\n\n<br>\n\n### 6.1.2. 데이터프레임 속성\n|속성|설명|\n|:---:|:------------|\n|.shape|데이터프레임의 모양(행, 열)|\n|.index|행 인덱스 조회 및 변경|\n|.columns|열 이름 조회 및 변경|\n|.dtypes|각 열의 자료형 확인|\n\n<br>\n\n```{python}\n# 데이터프레임 속성\ndf = pd.DataFrame({\n    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],\n    'Age': [25, 30, 35, 40, 28],\n    'Score': [85.5, 90.3, 78.2, 88.9, 92.5]\n})\n\nprint(df.shape)\nprint(df.index)\nprint(df.columns)\nprint(df.dtypes)\n```\n\n```{python}\n# 행 인덱스 변경\ndf.index = ['a', 'b', 'c', 'd', 'e']\nprint(df)\n```\n\n```{python}\n# 열 이름 변경\ndf.columns = ['Student Name', 'Student Age', 'Exam Score']\nprint(df)\n```\n\n<br>\n\n### 6.1.3. 데이터프레임 정보\n|함수|설명|\n|:---:|:------------|\n|info()|기본 정보(행 개수, 열 개수, 데이터 자료형, 결측값 여부 등) 출력|\n|head()|상위 n개의 행 출력(초기 값 n=5)|\n\n<br>\n\n```{python}\ndf = pd.DataFrame({\n    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],\n    'Age': [25, 30, 35, 40, 28],\n    'Score': [85.5, 90.3, 78.2, 88.9, 92.5]\n})\n```\n\n```{python}\n# 기본 정보\nprint(df.info())\n```\n\n```{python}\n# 상위 5개 행\nprint(df.head())\n```\n\n<br>\n\n## 6.2. 인덱싱과 슬라이싱\n### 6.2.1. 열 인덱싱과 슬라이싱\n+ 열 이름을 사용하여 직접 선택\n  + 여러 개의 열을 선택할 때는 열 이름을 리스트로 작성\n+ `loc[:, ]` : 레이블(label) 기반 접근 방식\n+ `iloc[:, ]` : 정수(integer) 기반 접근 방식\n\n<br>\n\n```{python}\ndf = pd.DataFrame({\n    'A': [1, 2, 3],\n    'B': [4, 5, 6],\n    'C': [7, 8, 9],\n    'D': [10, 11, 12]\n}, index=['x', 'y', 'z'])\n```\n\n```python\n# 열 인덱싱과 슬라이싱1 : 열 이름 사용\ndf['A']                                      # 열 이름\ndf[['A', 'C']]                               # 열 이름 리스트\n#df['A':'B']                                 # 열 이름 슬라이싱은 안 됨, Error!\n```\n\n```python\n# 열 인덱싱과 슬라이싱2 : 레이블 기반 접근\ndf.loc[:, 'A']                               # 열 이름\ndf.loc[:, ['A', 'C']]                        # 열 이름 리스트\ndf.loc[:, 'A':'B']                           # 열 이름 슬라이싱\ndf.loc[:, 'B'::2]                            # 열 이름 스트라이딩\ndf.loc[:, [True, False, True, True]]         # bool 리스트\n```\n\n```python\n# 열 인덱싱과 슬라이싱3 : 정수 기반 접근\ndf.iloc[:, 0]                                # 정수\ndf.iloc[:, [0, 3]]                           # 정수 리스트\ndf.iloc[:, range(2)]                         # range\ndf.iloc[:, 0:3]                              # 슬라이싱\ndf.iloc[:, 1::2]                             # 스트라이딩\n```\n\n<br>\n\n### 6.2.2. 행 인덱싱과 슬라이싱\n+ `loc[, :]` : 레이블(label) 기반 접근 방식\n+ `iloc[, :]` : 정수(integer) 기반 접근 방식\n\n<br>\n\n```python\n# 행 인덱싱과 슬라이싱1 : 레이블 기반 접근\ndf.loc['x', ]                                # 인덱스 이름\ndf.loc[['x', 'y'], :]                        # 인덱스 이름 리스트\ndf.loc['x':'y', :]                           # 인덱스 이름 슬라이싱\ndf.loc['x'::1, :]                            # 인덱스 이름 스트라이딩\ndf.loc[[True, False, True], :]               # bool 리스트\ndf.loc[list(df['A'] < 3), :]                 # bool 리스트\ndf.loc[df['A'] < 3, :]                       # bool 리스트\n```\n\n```python\n# 행 인덱싱과 슬라이싱2 : 정수 기반 접근\ndf.iloc[0, :]                                # 정수\ndf.iloc[[0, 2], :]                           # 정수 리스트\ndf.iloc[range(2), :]                         # range\ndf.iloc[0:1, :]                              # 슬라이싱\ndf.iloc[1::2, :]                             # 스트라이딩\ndf.iloc[[True, False, True], :]              # bool 리스트 (권장하지 않음)\ndf.iloc[list(df['A'] < 3), :]                # bool 리스트 (권장하지 않음)\n#df.iloc[df['A'] < 3, :]                     # bool 리스트 (Error!)\n```\n\n```python\n# 행 인덱싱과 슬라이싱3 : 정수 기반 접근\ndf.iloc[0]                                   # 정수\ndf.iloc[[0, 2]]                              # 정수 리스트\ndf.iloc[range(2)]                            # range\ndf.iloc[0:1]                                 # 슬라이싱\ndf.iloc[1::2]                                # 스트라이딩\ndf.iloc[[True, False, True]]                 # bool 리스트(권장하지 않음)\ndf.iloc[list(df['A'] < 3)]                   # bool 리스트(권장하지 않음)\n#df.iloc[df['A'] < 3]                        # bool 리스트 (Error!)\n```\n\n```python\n# 행 인덱싱과 슬라이싱4\n# 인덱싱은 열을 참조하는 반면, 슬라이싱은 행을 참조함\n#df[0]                                       # Error!\ndf[0:2]                                      # 권장하지 않음\ndf['x':'y']                                  # 권장하지 않음\ndf[df['A'] < 3]                              # 불리언 인덱싱은 행 단위로 적용됨\n```\n\n```python\n# 행 인덱싱과 슬라이싱5\ndf = pd.DataFrame({\n    'A': [1, 2, 3],\n    'B': [4, 5, 6],\n    'C': [7, 8, 9],\n    'D': [10, 11, 12]})\n\ndf.loc[0:1]                                  # 명시적 인덱스(label) 사용 - 마지막 인덱스 포함\ndf.iloc[0:1]                                 # 암묵적 인덱스(integer) 사용 - 마지막 인덱스 제외\ndf[0:1]                                      # 암묵적 인덱스(integer) 사용, iloc와 동일\n```\n\n<br>\n\n## 6.3. 데이터프레임 연산\n### 6.3.1. 기본 연산\n+ NumPy와 동일하게 벡터화, 브로드캐스팅 모두 지원\n+ 단항 연산: 인덱스와 열 레이블 보존\n+ 이항 연산: 인덱스와 열 레이블을 기준으로 자동 정렬되어 연산\n  + 위치가 아닌 동일한 레이블끼리 연산하며, 일치하지 않는 항목은 `NaN`으로 처리\n\n<br>\n\n```{python}\n# 단항 연산1 : Series\nsr = pd.Series([1, 2, 3, 4, 5])\nprint(sr + 2)\n```\n\n```{python}\n# 단항 연산2 : DataFrame\ndf = pd.DataFrame({\n    'x': [1, 2, 3, 4, 5],\n    'y': [11, 12, 13, 14, 15] \n})\nprint(np.log(df))\n```\n\n```{python}\n# 이항 연산1 : Series\n# 두 시리즈에 존재하는 모든 행 인덱스를 포함한 결과 생성 (합집합처럼 동작)\nmath = pd.Series({'Alice': 85, 'Bob': 90, 'Charlie': 78})\nenglish = pd.Series({'Alice': 95, 'Charlie': 80, 'David': 88})\nprint(math + english)\n```\n\n```{python}\n# 이항 연산2: DataFrame\nmidterm = pd.DataFrame({\n    'math': [85, 90, 78],\n    'science': [88, 92, 79]\n}, index=['Alice', 'Bob', 'Charlie'])\n\nfinal = pd.DataFrame({\n    'math': [95, 88, 82],\n    'english': [95, 80, 88]\n}, index=['Alice', 'Charlie', 'David'])\n\nprint(midterm + final)\n```\n\n<br>\n\n### 6.3.2. 연산자 메소드\n+ 인덱스와 열 레이블이 일치하지 않아도 연산 가능\n+ 예외 처리가 필요한 경우 기본 연산자보다 안정적임\n  + `fill_value` 인수를 사용하여 `NaN`를 다른 값으로 처리 가능\n\n<br>\n\n|연산자|연산자 메소드|\n|:---:|:------------|\n|+|add()|\n|-|sub()|\n|*|mul()|\n|/|divide()|\n|//|floordiv()|\n|%|mod()|\n|**|pow()|\n\n<br>\n\n```{python}\n# 연산자 메소드1\n# midterm + final과 동일한 결과\nprint(midterm.add(final))\n```\n\n```{python}\n# 연산자 메소드2\n# 하나의 데이터프레임에만 값이 있는 경우 0으로 처리하고, 둘 다 값이 없으면 NaN 반환\nprint(midterm.add(final, fill_value = 0))\n```\n\n<br>\n\n### 6.3.3. 새로운 열 생성\n|함수|설명|\n|:---:|:---------------|\n|assign()|기존 데이터프레임을 수정하지 않고, 새로운 열을 추가한 복사본을 반환|\n|eval()|수식을 문자열로 작성하여 열 간 계산을 간결하게 수행(직관적인 수식 표현)|\n|where()|조건에 따라 서로 다른 값을 선택하여 새로운 열 생성(NumPy 메소드)|\n\n<br>\n\n```{python}\ndf = pd.DataFrame({\n    'product': ['A', 'B', 'C', 'D', 'E'],\n    'price': [100, 200, 150, 300, 250],\n    'quantity': [10, 5, 3, 7, 6]\n})\nprint(df)\n```\n\n```{python}\n# 새로운 열 생성1: 기본 할당\n# 기본 할당은 데이터를 직접 수정하므로, 권장하지 않음\ndf['total_price'] = df['price'] * df['quantity']\nprint(df)\n```\n\n```{python}\n# 새로운 열 생성2: assign() 사용\nprint(df.assign(total_price = df['price'] * df['quantity']))\n```\n\n```{python}\n# 새로운 열 생성3: eval() 사용\n# inplace=True: 기존 데이터프레임에 직접 적용(새 객체를 반환하지 않음)\ndf.eval('total_price = price * quantity', inplace=True)\nprint(df)\n```\n\n```{python}\n# 새로운 열 생성4: where() 사용\n# 가격이 200 이상이면 'Expensive', 아니면 'Affordable'로 구분\ndf['price_category'] = np.where(df['price'] >= 200, 'Expensive', 'Affordable')\nprint(df)\n```\n\n<br>\n\n### 6.3.4. 데이터프레임 집계\n+ NumPy와 동일한 축 개념 사용\n  + axis 0 : 행 방향 연산(열 단위로 요약)\n  + axis 1 : 열 방향 연산(행 단위로 요약)\n+ 수치형 데이터에 적용되며, NaN은 기본적으로 제외됨\n\n<br>\n\n|함수|설명|\n|:---:|:------------|\n|count()|NaN를 제외한 행의 개수|\n|value_counts()|집단별 빈도|\n|describe()|요약 통계량|\n|sum()|합계|\n|mean()|평균|\n|std()|표준편차|\n|median()|중앙값|\n|min(), max()|최소값, 최대값|\n|cumsum(), cumprod()|누적 합계, 누적 곱|\n\n<br>\n\n```{python}\n## 실습 데이터 : tips 데이터셋\nimport seaborn as sns\ntips = sns.load_dataset('tips')\n```\n\n```{python}\n# total_bill: 식사 금액\n# tip: 팁 금액\n# sex: 성별\n# smoker: 흡연 여부\n# day: 요일\n# time: 식사 시간(Lunch, Dinner)\n# size: 식사 인원 수\nprint(tips.info())\n```\n\n```{python}\nprint(tips.head())\n```\n\n```{python}\nprint(tips.describe())\n```\n\n```{python}\n# 각 열의 유효한 데이터 수 (NaN 제외)\nprint(tips.count())\n```\n\n```{python}\n# 식사 시간별 주문 수\nprint(tips.value_counts('time'))\n```\n\n```{python}\n# 전체(합계) 식사 금액, 팁 금액, 식사 인원 수\nprint(tips[['total_bill', 'tip', 'size']].sum())\n```\n\n```{python}\n# 고객 1인당 평균 식사 금액\nprint((tips['total_bill'] / tips['size']).mean())\n```\n\n```{python}\n# 고객 1인당 평균 팁 금액\nprint((tips['tip'] / tips['size']).mean())\n```\n\n```{python}\n# 전체 식사 금액에서 팁이 차지하는 비율\nprint(tips['tip'] / tips['total_bill'])\n```\n\n```{python}\n# 전체 식사 금액에서 팁이 차지하는 비율에 대한 요약 통계량\nprint((tips['tip'] / tips['total_bill']).describe())\n```\n\n```{python}\n# 전체 식사 금액에서 팁이 차지하는 비율이 50% 이상인 경우\nprint(tips[tips['tip'] / tips['total_bill'] >= 0.5])\n```\n\n<br>\n\n## 6.4. 고급 데이터 처리\n### 6.4.1. 집단별 연산\n+ `groupby()` 함수를 이용하여 특정 열을 기준으로 데이터를 집단화한 후, 다양한 연산 수행 가능\n+ SQL의 GROUP BY와 유사한 기능을 제공하며, 집계, 변환, 필터링을 지원\n\n<br>\n\n|함수|설명|\n|:---:|:------------|\n|aggregate() 또는 agg()|여러 집계 함수를 동시에 적용(문자열, 함수, 리스트 등 가능)|\n|filter()|집단별 집계 결과를 조건으로 집단 자체를 필터링|\n|transform()|집단별 연산 결과를 원래 구조와 같은 형태로 반환(원소 개수 유지)|\n|apply()|임의의 함수를 전체 집단에 유연하게 적용(집계, 반환 모두 가능)|\n\n<br>\n\n```{python}\n#  실습 데이터 : tips 데이터셋\ntips = sns.load_dataset('tips')\n```\n\n```{python}\n# 요일별 평균 식사 금액\n# observed=False: 모든 범주 포함, 실제 데이터가 없으면 NaN\nprint(tips.groupby('day', observed=False)['total_bill'].mean())\n```\n\n```{python}\n# 식사 시간별 식사 금액, 팁 금액의 평균 및 표준편차\nprint(tips.groupby('time', observed=False)[['total_bill', 'tip']].agg(['mean', 'std']))\n```\n\n```{python}\n# 식사 시간별 식사 금액의 최대값, 팁 금액의 최소값: 딕셔너리 사용\nprint(tips.groupby('time', observed=False).agg({'total_bill': 'max', 'tip': 'min'}).reset_index())\n```\n\n```{python}\n# 식사 시간별 식사 금액의 최대값, 팁 금액의 최소값: 튜플 사용, named aggregation 문법\nprint(tips.groupby('time', observed=False).agg(total_bill_max = ('total_bill', 'max'), tip_min = ('tip', 'min')).reset_index())\n```\n\n\n<br>\n\n+ [참고] 람다 함수(lamdba function)\n  + 함수 이름 없이 일시적으로 정의해 사용할 수 있는 익명 함수\n  + `def`, `return` 없이 간단한 함수 로직을 한 줄로 표현\n  + 구조는 일반 함수와 같지만, 주로 짧고 단순한 연산에 사용\n  + `apply()`, `filter()` 등 함수의 인수로 전달할 때 유용하게 활용\n\n<br>\n\n```{python}\n# 함수 정의\ndef f(x, y):\n    return x + y\nf(1, 4)\n```\n\n```{python}\n# 람다 함수\n(lambda x, y: x + y)(1, 4)\n```\n\n```{python}\n# 팀 금액 평균이 3달러 이상인 요일 데이터 필터링: 함수 정의\ndef filter_tip_avg(x):\n    return x['tip'].mean() >= 3\n\nprint(tips.groupby('day', observed=False).filter(filter_tip_avg))\n```\n\n```{python}\n# 팀 금액 평균이 3달러 이상인 요일 데이터 필터링: 람다 함수 사용\nprint(tips.groupby('day', observed=False).filter(lambda x: x['tip'].mean() >= 3))\n```\n\n```{python}\n# 성별 팁 금액의 편차\ntips['tip_dev'] = tips.groupby('sex', observed=False)['tip'].transform(lambda x: x - x.mean())\nprint(tips[['sex', 'tip', 'tip_dev']].head())\n```\n\n```{python}\n# 식사 시간별 팁 금액의 사분위수범위: 함수 정의\ndef iqr(x):\n    return x.quantile(0.75) - x.quantile(0.25)\n\nprint(tips.groupby('time', observed=False)['tip'].apply(iqr))\n```\n\n```{python}\n# 식사 시간별 팁 금액의 사분위수범위: 람다 함수 사용\nprint(tips.groupby('time', observed=False)['tip'].apply(lambda x: x.quantile(0.75) - x.quantile(0.25)))\n```\n\n<br>\n\n### 6.4.2. 표현식 기반 처리\n+ eval(), query() 메소드를 사용하면 문자열 형태의 표현식을 통해 데이터를 보다 직관적으로 처리 가능\n+ 복잡한 연산이나 조건 필터링을 간결하게 표현할 수 있어 가독성과 성능 모두에 유리함\n  + 데이터프레임의 열 이름을 따옴표 없이 사용 가능\n  + 외부 변수는 `@` 기호를 사용하여 표현식에 표현 가능\n\n<br>\n\n|함수|설명|\n|:---:|:---------------|\n|eval()|- 문자열로 작성한 수식을 이용하여 기존 열을 연산하거나 새로운 열을 생성 <br>- Python 표현식을 그대로 사용할 수 있어 가독성이 높음|\n|query()|- 문자열로 작성한 조건식을 이용하여 행을 필터링<br>- 복잡한 불리언 인덱싱보다 간결하고 직관적인 문법 제공 <br>- 논리 연산자는 `&`, `\\|`, `~`의 사용을 권장하며, 각 조건은 괄호 ()로 감싸야 함|\n\n<br>\n\n```{python}\n#  실습 데이터 : tips 데이터셋\ntips = sns.load_dataset('tips')\n```\n\n```{python}\n# 기존 열 연산: 식사 금액에서 세금 10%를 제외한 실수령 금액\nprint(tips.eval('total_bill = total_bill * 0.9'))\n```\n\n```{python}\n# 새로운 열 생성: 전체 식사 금액 대비 팁 금액 비율\n# inplace=True: 기존 데이터프레임에 직접 적용(새 객체를 반환하지 않음)\ntips.eval('tip_rate = tip / total_bill', inplace=True)\nprint(tips)\n```\n\n```{python}\n# 외부 변수 사용: 전체 식사 금액에 따른 기본(최소) 팁 금액\ntip_percentage = 0.15\ntips.eval('min_tip = total_bill * @tip_percentage', inplace = True)\nprint(tips)\n```\n\n```{python}\n# 기본(최소) 팁 금액보다 적게 준 경우 'Below', 많거나 같은 경우 'Above'로 구분\n# 기본(최소) 팁 금액보다 적게 준 경우는 108팀임\ntips['tip_group'] = np.where(tips['tip'] < tips['min_tip'], 'Below', 'Above')\nprint(tips['tip_group'].value_counts())\n```\n\n```{python}\n# 단일 조건 필터링: 식사 금액이 20달러 이상인 경우\nprint(tips.query('total_bill >= 20'))\n```\n\n```{python}\n# 다중 조건 필터링: 식사 인원 수가 3명 이상이고, 목요일에 방문한 경우\n#print(tips.query('size >= 3 and day == \"Thur\"'))           # 권장하지 않음, 조건이 복잡할 경우 오류가 발생할 수 있음\nprint(tips.query('(size >= 3) & (day == \"Thur\")'))          # 권장 방식: 괄호로 각 조건을 명확히 구분\n```\n\n```{python}\n# 외부 변수 사용: 기준 팁 금액 미만인 경우\nmin_tip_required = 5\nprint(tips.query('tip < @min_tip_required'))\n```\n\n```{python}\n# 기준 팁 금액보다 적게 준 경우는 216팀임\nprint(tips.query('tip < @min_tip_required').shape[0])\nprint(len(tips.query('tip < @min_tip_required')))\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"6_pandas.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","theme":["simplex"],"toc-location":"right","toc-expand":true,"jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}