{"title":"2.1. 변수","markdown":{"yaml":{"jupyter":"python3"},"headingText":"2.1. 변수","containsRefs":false,"markdown":"\n\n<h1>2. 기초 문법</h1>\n<br>\n\n+ 변수\n  + 프로그램이 실행되는 동안 값을 저장하는 공간\n  + 하나의 프로그램에서 여러 개의 변수를 만들어 사용할 수 있으며, 각 변수를 구분하기 위해 변수마다 이름을 붙여 관리함\n  + 변수에는 언제든지 새로운 값을 저장할 수 있음\n\n<br>\n\n+ 대입 연산자 `=`\n  + 변수에 값을 저장할 때 사용하는 연산자로, 할당 연산자라고도 함\n  + `=` 기호 오른쪽의 값을 `=` 기호 왼쪽의 변수에 저장한다는 의미\n\n<br>\n\n```{python}\n# 변수에 값을 저장하고 출력\nage = 20\nprint(age)\n```\n\n```{python}\n# 변수에 저장된 값 변경\nage = 21\nprint(age)\n```\n\n```{python}\n# 여러 변수에 값 대입\na = b = c = 7\nprint(a)\nprint(b)\nprint(c)\n```\n\n```{python}\n# 코드 한 줄에서 여러 개의 변수에 각각 다른 값을 한번에 대입할 수 있음\na, b, c = 7, 11, 19\nprint(a)\nprint(b)\nprint(c)\n```\n\n```{python}\n# 일반적인 프로그래밍 언어에서 두 변수의 값 교환\na = 7\nb = 11\ntmp = a\na = b\nb = tmp\nprint(a, b)\n```\n\n```{python}\n# Python에서는 임시변수 없이 두 변수의 값을 쉽게 교환할 수 있음 (패킹과 언패킹)\na = 7\nb = 11\na, b = b, a\nprint(a, b)\n```\n\n<br>\n\n+ 변수명 작성 규칙\n  + 변수가 어떤 용도로 쓰이는지 잘 설명하는 이름으로 만드는 것이 좋음\n  + 첫 번째 글자는 문자 또는 `_`이어야 하고, 나머지 글자는 문자, 숫자, `_`이어야 함\n  + 영문 대문자와 소문자를 구분함\n  + 키워드(예약어; keyword)는 사용할 수 없음\n    + 키워드 : 프로그래밍 언어에서 사용하기 위해 쓰임새를 미리 정해 놓은 단어\n   \n<br>\n\n```{python}\nimport keyword\nprint(keyword.kwlist)\n```\n\n<br>\n\n## 2.2. 자료형\n+ 기본 자료형\n  + 단순한 값을 저장하는 자료형\n  + (예) 정수(1,2,3,...), 부동소수점수(1.23, 3.14, ...), 복소수(2+3j), 문자열(\"Hello\"), bool(True, False)\n+ 구조적 자료형\n  + 여러 개의 값을 담을 수 있는 자료형\n  + (예) 리스트(list), 튜플(tuple), 세트(set), 딕셔너리(dictionary)\n+ `type()` 함수를 이용하여 자료형을 확인할 수 있음\n\n<br>\n\n```{python}\n# 정수형\na = 20                      # 10진수\nb = 0o34                    # 8진수\nc = 0xA1                    # 16진수\nd = 0b1110                  # 2진수\nprint(a, b, c, d)\nprint(type(a))\n```\n\n```{python}\n# 부동소수점수형\na = 3.14\nb = 1.23e5                  # 지수 표현 방식\nprint(a, b)\nprint(type(a))\n```\n\n```{python}\n# 문자열형\na = 'Hello'\nb = \"Python\"\nprint(a, b)\nprint(type(a))\n```\n\n```{python}\n# bool형\na = 10>20\nprint(a)\nprint(type(a))\n```\n\n<br>\n\n## 2.3. 표준 입출력\n+ 입력\n  + 사용자로부터 데이터를 입력받기 위해 `input()` 함수를 이용함\n  + `input()` 함수는 안내문을 출력한 후 사용자의 입력을 기다리며, 입력한 데이터를 문자열 형식으로 반환함\n  + 입력한 값을 숫자로 사용하려면 `int()`, `float()` 함수를 이용하여 자료형 변환을 해야 함\n  + `변수 = input(안내문)`\n\n<br>\n\n+ 출력\n  + 데이터를 출력하기 위해 `print()` 함수를 이용함\n  + 여러 개의 값을 출력하려면 `,`로 구분한 값을 나열하면 됨\n\n<br>\n\n```{python}\n# 문자열 입력\n#name = input(\"이름: \")\n#age = input(\"나이: \")\n#print(name, \"나이:\", age)\n```\n\n```{python}\n# 정수 형식의 문자열 입력\n# input 함수를 통해서 입력받은 데이터는 문자열형임\n# 따라서 int() 함수를 이용하여 정수 형식의 문자열을 정수로 변환해야 함\n#a = int(input(\"정수: \"))\n#b = int(input(\"정수: \"))\n#print(a-b)\n```\n\n```{python}\n# 부동소수점 형식의 문자열 입력\n# float() 함수를 이용하여 부동소수점수 형식의 문자열을 부동소수점수로 변환함\n#minute = float(input(\"분 단위 시간: \"))\n#second = minute * 60\n#print(second, \"초\")\n```\n\n```{python}\n# 문자열 출력\nprint(\"안녕하세요.\")\nage = 25\nprint(\"나이는\", age, \"입니다.\")\n```\n\n```{python}\n# print() 함수가 여러 개일 때는 다음 줄로 넘어가서 값을 출력함\na = 25\nb = 42\nprint(a)\nprint(b)\n```\n\n```{python}\n# print() 함수가 여러 개일 때 다음 줄로 넘어가는 대신 공백이 출력되기를 원하면 end 매개변수를 공백으로 설정함\na = 25\nb = 42\nprint(a, end=' ')\nprint(b)\n```\n\n<br>\n\n+ f-string 포맷팅\n  + 문자열 맨 앞에 f 또는 F를 붙이고, `{}` 안에 변수명을 직접 작성하여 출력하는 방식\n  + 가독성이 좋고 사용 방법이 간단하여 자주 사용됨\n\n<br>\n\n```{python}\n# f-string 사용\nname = \"홍길동\"\nage = 20\nprint(f\"이름은 {name}이고, 나이는 {age}입니다.\")\n```\n\n```{python}\n# f-string 출력 형식 지정\n# 변수 이름 옆에 :을 작성한 다음 형식을 지정함\nname = \"홍길동\"\nage = 20\nprint(f\"{name:5}, {age:3}\")\n\na = 4\nb = 3.14159265\nprint(f\"20{a:02d}\")                        # a 값을 두자리로 출력하되 앞의 빈곳은 0으로 채움\nprint(f\"{b:.3f}\")                          # b 값을 소수점 이하 세자리로 반올림하여 출력\n```\n\n<br>\n\n## 2.4. 연산자\n+ 연산(operation) : 덧셈, 뺄셈 등과 같이 일정한 규칙에 따라 계산하는 것\n\n<br>\n\n### 2.4.1. 산술 연산자\n|연산자|설명|예시|결과|\n|:---:|:---:|:---:|:---:|\n|+|더하기|print(6+4)|10|\n|-|빼기|print(6-4)|2|\n|*|곱하기|print(6*4)|24|\n|/|나누기|print(6/4)|1.5|\n|//|나눈 정수 몫|print(6//4)|1|\n|%|나눈 나머지|print(6%4)|2|\n|**|거듭제곱|print(6**4)|1296|\n\n<br>\n\n### 2.4.2. 비교 연산자\n+ 크기를 비교할 때 사용하는 연산자\n+ 연산 결과는 참(True) 또는 거짓(False)으로 나타남\n\n|연산자|설명|예시|결과|\n|:---:|:---:|:---:|:---:|\n|==|같다|print(10==20)|False|\n|!=|같지 않다|print(10!=20)|True|\n|>|크다|print(10>20)|False|\n|<|작다|print(10<20)|True|\n|>=|크거나 같다|print(10>=20)|False|\n|<=|작거나 같다|print(10<=20)|True|\n\n<br>\n\n### 2.4.3. 논리 연산자\n+ 참과 거짓의 논리 동작을 다루는 연산\n+ 여러 조건을 조합할 때 주로 사용함\n\n|연산자|설명|예시|결과|\n|:---:|:------------------|:------|:---:|\n|and|왼쪽 식과 오른쪽 식 모두 참인 경우에만 True|a=25 <br>print(a>8 and a<60)|True|\n|or|왼쪽 식과 오른쪽 식 중 하나라도 참인 경우에만 True|a=70 <br>print(a<8 or a>=60)|True|\n|not|오른쪽 식이 참이면 False, 거짓이면 True|a=20 <br>print(not a==20)|False|\n\n<br>\n\n### 2.4.4. 복합 대입 연산자\n+ 연산한 값을 다시 대입하는 연산자\n\n|연산자|설명|예시|결과|\n|:---:|:------------------|:---|:---:|\n|+=|왼쪽 값에 오른쪽 값을 더한 결과를 다시 왼쪽에 대입|a, b = 2, 3 <br>a += b <br> print(a)|5|\n|-=|왼쪽 값에 오른쪽 값을 뺀 결과를 다시 왼쪽에 대입|a, b = 2, 3 <br>a -= b <br> print(a)|-1|\n|*=|왼쪽 값에 오른쪽 값을 곱한 결과를 다시 왼쪽에 대입|a, b = 2, 3 <br>a *= b <br> print(a)|6|\n|/=|왼쪽 값에 오른쪽 값을 나눈 결과를 다시 왼쪽에 대입|a, b = 3, 2 <br>a /= b <br> print(a)|1.5|\n|//=|왼쪽 값에 오른쪽 값을 나눈 몫을 다시 왼쪽에 대입|a, b = 7, 3 <br>a //= b <br> print(a)|2|\n|%=|왼쪽 값에 오른쪽 값을 나눈 나머지를 다시 왼쪽에 대입|a, b = 7, 3 <br>a %= b <br> print(a)|1|\n\n<br>\n\n### 2.4.5. 연산자 우선순위\n+ 프로그래밍 언어는 연산자에 우선순위를 부여하여 우선순위가 높은 연산자를 먼저 계산함\n+ 우선순위에 관계없이 연산의 순서를 정하려면 괄호 `()`를 사용함\n\n|우선순위|연산자|설명|\n|:---:|:---:|:---:|\n|1|**|거듭제곱 연산자|\n|2|+, -|양수, 음수를 나타내는 단항 연산자|\n|3|*, /, //, %|곱셈, 나눗셈, 나눈 몫, 나머지|\n|4|+, -|덧셈, 뺄셈|\n|5|<, <=, >, >=|비교 연산자|\n|6|==, !=|동등 연산자|\n|7|=, +=, -=, /=, //=, %=, **=|대입 연산자|\n|8|not|논리 연산자|\n|9|and|논리 연산자|\n|10|or|논리 연산자|\n\n<br>\n\n```{python}\n# 정수 3개의 평균 계산(틀림)\navg = 70 + 80 + 90 / 3\nprint(avg)\n```\n\n```{python}\n# 정수 3개의 평균 계산\navg = (70 + 80 + 90) / 3\nprint(avg)\n```\n\n```{python}\n# 길이 단위 변환\n#_cm = int(input(\"센티미터 단위 길이: \"))\n#m = _cm // 100\n#cm = _cm % 100\n#print(f'{m}미터 {cm}센티미터')\n```\n\n<br>\n\n## 2.5. 조건문\n### 2.5.1. 프로그램 구조\n\n+ 프로그램 구조는 크게 순차 구조, 선택 구조, 반복 구조로 구분됨\n  + 순차 구조 : 위에서부터 아래로 순차적으로 실행되는 구조\n  + 선택 구조 : 조건에 따라 문장을 선택적으로 실행하는 구조로, 조건이 참(True)인지 거짓(False)인지에 따라 실행되는 문장이 달라짐\n  + 반복 구조 : 임의의 문장을 반복해서 실행하는 구조\n\n<br>\n\n![](./images/fig2-1.png){width=120%}\n\n<br>\n\n<br>\n\n### 2.5.2. if 문\n\n> if 조건식: <br>\n> 　　문장\n\n<br>\n\n+ 조건식이 참이면 문장을 실행하고 거짓이면 문장을 실행하지 않음\n+ 조건식 오른쪽에 `:`이 위치하고, 참인 경우 실행될 문장은 반드시 <b>들여쓰기(indentation)</b>해야 함\n\n<br>\n\n![](./images/fig2-2.png)\n\n<br>\n\n```{python}\n# 무작위로 1~100 사이의 두 정수를 생성한 후, 큰 수부터 작은 수 순으로 출력\nimport random\na = random.randint(1, 100)\nb = random.randint(1, 100)\n\nif a<b:\n    a, b = b, a\n\nprint(a, b)\n```\n\n<br>\n\n### 2.5.3. if\\~else 문\n\n> if 조건식: <br>\n> 　　문장1 <br>\n> else: <br>\n> 　　문장2\n\n<br>\n\n+ 조건식이 참이면 문장1을 실행하고, 거짓이면 문장2를 실행함\n+ 조건식 오른쪽에 `:`이 위치하고, else 오른쪽에는 조건식 없이 `:`이 위치함\n+ 문장1과 문장2는 반드시 들여쓰기해야 함\n\n<br>\n\n![](./images/fig2-3.png)\n\n<br>\n\n```{python}\n# 무작위로 1~100 사이의 정수를 생성한 후, 짝수인지 홀수인지 판단\nimport random\na = random.randint(1, 100)\n\nif a % 2 == 0:\n    print(f'{a}는 짝수입니다')\nelse:\n    print(f'{a}는 홀수입니다')\n```\n\n<br>\n\n### 2.5.4. if\\~elif\\~else문\n\n> if 조건식1: <br>\n> 　　문장1 <br>\n> elif 조건식2: <br>\n> 　　문장2 <br>\n> else: <br>\n> 　　문장3\n\n<br>\n\n+ 조건식1이 거짓인 경우에 또 다른 선택구조를 연결하는 구조\n+ 조건식1이 참이면 문장1을 실행하고, 조건식1이 거짓이면서 조건식2가 참이면 문장2를 실행하고, 두 조건식 모두 거짓이면 문장3을 실행함\n+ 조건식1, 조건식2 오른쪽에 `:`이 위치하고, 문장1, 문장2, 문장3은 반드시 들여쓰기해야 함\n\n<br>\n\n![](./images/fig2-4.png)\n\n<br>\n\n```{python}\n# 놀이공원 기본 입장료는 5,000원임\n# 8세 미만은 기본 입장료 30% 할인, 65세 이상은 기본 입장료 20% 할인 적용함\n# 연령이 주어졌을 때, 놀이공원 입장료 산출\nfee = 5000\nage = 7\n\nif age < 8:\n    print('입장료:', fee*0.7)\nelif age < 65:\n    print('입장료:', fee)\nelse:\n    print('입장료:', fee*0.8)\n```\n\n<br>\n\n## 2.6. 반복문\n### 2.6.1. for 문\n\n> for 반복변수 in 반복범위: <br>\n> 　　문장\n\n<br>\n\n+ 반복범위를 지정하여(정해진 횟수만큼) 반복해서 문장을 실행함\n+ 반복범위 오른쪽에는 `:`이 위치하고, 반복해서 실행할 문장은 반드시 **들여쓰기**해야 함\n+ 반복범위에는 범위, 문자열, 리스트, 딕셔너리 등이 사용될 수 있음\n  + 그 중 범위가 가장 많이 사용되며, `range()` 함수로 만들 수 있음\n \n|형식|설명|예시|결과|\n|:---------|:------------|:---:|:---:|\n|range(종료값)|0으로 시작해서 1씩 증가하며 종료값 전까지의 정수를 생성|range(5)|0,1,2,3,4|\n|range(시작값, 종료값)|시작값으로 시작해서 1씩 증가하며 종료값 전까지의 정수를 생성|rang(2,7)|2,3,4,5,6|\n|range(시작값, 종료값, 증가값)|시작값으로 시작해서 증가값만큼 증가시키면서 종료값 전까지의 정수를 생성|range(2,11,3)|2,5,8|\n\n<br>\n\n```{python}\n# 문자열을 3번 반복해서 출력\nfor i in range(3):\n    print(\"Hello!\")\n```\n\n```{python}\n# 반복범위의 값을 출력1\nfor i in range(5):\n    print(i)\n```\n\n```{python}\n# 반복범위의 값을 출력2\nfor i in \"World\":\n    print(i)\n```\n\n```{python}\n# 1~100 정수의 합 계산\nsum = 0\n\nfor i in range(1,101):\n    sum += i\n\nprint(sum)\n```\n\n```{python}\n# 30의 약수 출력\nnum = 30\n\nfor i in range(1, num+1):\n    if num%i == 0:\n        print(i, end=' ')\n```\n\n<br>\n\n### 2.6.2. while 문\n\n> while 조건식: <br>\n> 　　문장\n\n<br>\n\n+ 조건이 참인 동안 문장을 반복해서 실행하고, 조건이 거짓이면 반복문을 종료함\n\n<br>\n\n```{python}\n# 1~100 정수의 합 계산\nsum = 0\nnum = 1\n\nwhile num<=100:\n    sum += num\n    num += 1\n\nprint(sum)\n```\n\n```{python}\n#| scrolled: true\n# 구구단 9단 출력\nnum = 1\n\nwhile num<=9:\n    print(f'9x{num}={9*num}')\n    num += 1\n```\n\n## 2.7. 함수\n### 2.7.1. 함수의 개념\n+ 함수(function)\n  + 특정한 기능을 수행하도록 미리 만들어 놓고, 필요할 때마다 호출하여 사용하는 일련의 코드\n  + Python에서 기본적으로 제공하는 **내장 함수**와 사용자가 직접 만들어서 사용할 수 있는 **사용자 정의 함수**가 있음\n\n<br>\n\n+ 함수의 장점\n  + 필요할 때마다 호출 가능 : 반복적으로 수행해야 하는 업무를 한 번만 작성해 놓고 필요할 때마다 호출하여 사용할 수 있음\n  + 논리적인 단위로 분할 가능 : (예) 도형 계산 프로그램 - 덧셈 코드, 곱셈 코드, 나눗셈 코드 등으로 나눔\n  + 코드의 캡슐화 가능 : 함수의 인터페이스만 잘 정의하면 다른 사람이 자신의 코드를 쉽게 가져다 사용할 수 있음\n\n<br>\n\n```{python}\n# 절대값 반환 함수\nabs(-10)\n```\n\n<br>\n\n### 2.7.2. 함수 정의\n\n> def 함수명(매개변수1, 매개변수2, ...): <br>\n> 　　문장 <br>\n> 　　return 반환값\n\n<br>\n\n+ 함수명 작성 규칙\n  + 변수 이름 규칙과 동일함\n  + 일반적으로 소문자로 입력\n  + 작업을 나타내기 위해 동사와 명사를 함께 사용하는 경우가 많음 - (예) find_number\n  + 외부에 공개하는  함수일 경우 줄임말을 사용하지 않고 짧고 명료한 이름으로 정함\n\n<br>\n\n+ 매개변수(parameter)\n  + 함수에서 입력값으로 사용하는 변수로, 1개 이상의 값을 적을 수 있음\n \n<br>\n\n+ 함수 형태\n|구분|매개변수 ×|매개변수 ○|\n|:---:|:------------|:------------|\n|반환값 ×|함수 내부 명령문만 수행|매개변수를 사용하여 명령문만 수행|\n|반환값 ○|매개변수 없이 명령문을 수행한 후 결과값 반환|매개변수를 사용하여 명령문을 수행한 후 결과값 반환|\n\n<br>\n\n```{python}\n# 매개변수 ×, 반환값 ×\ndef func():\n    print('함수입니다.')\n\nprint('함수 호출 전입니다')\nfunc()\nprint('함수 호출 후입니다')\n```\n\n```{python}\n# 매개변수 ○, 반환값 ×\ndef add1(x, y):\n    print(x+y)\n\nres1 = add1(10,20)\nprint(res1)\n```\n\n```{python}\n# 매개변수 ○, 반환값 ○\ndef add2(x, y):\n    return x+y\n\nres2 = add2(10,20)\nprint(res2)\n```\n\n```{python}\n## 섭씨온도를 화씨온도로 변환하는 함수\n# (섭씨온도) = (화씨온도 - 32) × 5/9\ndef f_to_c(fahrenheit):\n    return (fahrenheit-32) * 5/9\n\nf_to_c(100)\n```\n\n","srcMarkdownNoYaml":"\n\n<h1>2. 기초 문법</h1>\n<br>\n\n## 2.1. 변수\n+ 변수\n  + 프로그램이 실행되는 동안 값을 저장하는 공간\n  + 하나의 프로그램에서 여러 개의 변수를 만들어 사용할 수 있으며, 각 변수를 구분하기 위해 변수마다 이름을 붙여 관리함\n  + 변수에는 언제든지 새로운 값을 저장할 수 있음\n\n<br>\n\n+ 대입 연산자 `=`\n  + 변수에 값을 저장할 때 사용하는 연산자로, 할당 연산자라고도 함\n  + `=` 기호 오른쪽의 값을 `=` 기호 왼쪽의 변수에 저장한다는 의미\n\n<br>\n\n```{python}\n# 변수에 값을 저장하고 출력\nage = 20\nprint(age)\n```\n\n```{python}\n# 변수에 저장된 값 변경\nage = 21\nprint(age)\n```\n\n```{python}\n# 여러 변수에 값 대입\na = b = c = 7\nprint(a)\nprint(b)\nprint(c)\n```\n\n```{python}\n# 코드 한 줄에서 여러 개의 변수에 각각 다른 값을 한번에 대입할 수 있음\na, b, c = 7, 11, 19\nprint(a)\nprint(b)\nprint(c)\n```\n\n```{python}\n# 일반적인 프로그래밍 언어에서 두 변수의 값 교환\na = 7\nb = 11\ntmp = a\na = b\nb = tmp\nprint(a, b)\n```\n\n```{python}\n# Python에서는 임시변수 없이 두 변수의 값을 쉽게 교환할 수 있음 (패킹과 언패킹)\na = 7\nb = 11\na, b = b, a\nprint(a, b)\n```\n\n<br>\n\n+ 변수명 작성 규칙\n  + 변수가 어떤 용도로 쓰이는지 잘 설명하는 이름으로 만드는 것이 좋음\n  + 첫 번째 글자는 문자 또는 `_`이어야 하고, 나머지 글자는 문자, 숫자, `_`이어야 함\n  + 영문 대문자와 소문자를 구분함\n  + 키워드(예약어; keyword)는 사용할 수 없음\n    + 키워드 : 프로그래밍 언어에서 사용하기 위해 쓰임새를 미리 정해 놓은 단어\n   \n<br>\n\n```{python}\nimport keyword\nprint(keyword.kwlist)\n```\n\n<br>\n\n## 2.2. 자료형\n+ 기본 자료형\n  + 단순한 값을 저장하는 자료형\n  + (예) 정수(1,2,3,...), 부동소수점수(1.23, 3.14, ...), 복소수(2+3j), 문자열(\"Hello\"), bool(True, False)\n+ 구조적 자료형\n  + 여러 개의 값을 담을 수 있는 자료형\n  + (예) 리스트(list), 튜플(tuple), 세트(set), 딕셔너리(dictionary)\n+ `type()` 함수를 이용하여 자료형을 확인할 수 있음\n\n<br>\n\n```{python}\n# 정수형\na = 20                      # 10진수\nb = 0o34                    # 8진수\nc = 0xA1                    # 16진수\nd = 0b1110                  # 2진수\nprint(a, b, c, d)\nprint(type(a))\n```\n\n```{python}\n# 부동소수점수형\na = 3.14\nb = 1.23e5                  # 지수 표현 방식\nprint(a, b)\nprint(type(a))\n```\n\n```{python}\n# 문자열형\na = 'Hello'\nb = \"Python\"\nprint(a, b)\nprint(type(a))\n```\n\n```{python}\n# bool형\na = 10>20\nprint(a)\nprint(type(a))\n```\n\n<br>\n\n## 2.3. 표준 입출력\n+ 입력\n  + 사용자로부터 데이터를 입력받기 위해 `input()` 함수를 이용함\n  + `input()` 함수는 안내문을 출력한 후 사용자의 입력을 기다리며, 입력한 데이터를 문자열 형식으로 반환함\n  + 입력한 값을 숫자로 사용하려면 `int()`, `float()` 함수를 이용하여 자료형 변환을 해야 함\n  + `변수 = input(안내문)`\n\n<br>\n\n+ 출력\n  + 데이터를 출력하기 위해 `print()` 함수를 이용함\n  + 여러 개의 값을 출력하려면 `,`로 구분한 값을 나열하면 됨\n\n<br>\n\n```{python}\n# 문자열 입력\n#name = input(\"이름: \")\n#age = input(\"나이: \")\n#print(name, \"나이:\", age)\n```\n\n```{python}\n# 정수 형식의 문자열 입력\n# input 함수를 통해서 입력받은 데이터는 문자열형임\n# 따라서 int() 함수를 이용하여 정수 형식의 문자열을 정수로 변환해야 함\n#a = int(input(\"정수: \"))\n#b = int(input(\"정수: \"))\n#print(a-b)\n```\n\n```{python}\n# 부동소수점 형식의 문자열 입력\n# float() 함수를 이용하여 부동소수점수 형식의 문자열을 부동소수점수로 변환함\n#minute = float(input(\"분 단위 시간: \"))\n#second = minute * 60\n#print(second, \"초\")\n```\n\n```{python}\n# 문자열 출력\nprint(\"안녕하세요.\")\nage = 25\nprint(\"나이는\", age, \"입니다.\")\n```\n\n```{python}\n# print() 함수가 여러 개일 때는 다음 줄로 넘어가서 값을 출력함\na = 25\nb = 42\nprint(a)\nprint(b)\n```\n\n```{python}\n# print() 함수가 여러 개일 때 다음 줄로 넘어가는 대신 공백이 출력되기를 원하면 end 매개변수를 공백으로 설정함\na = 25\nb = 42\nprint(a, end=' ')\nprint(b)\n```\n\n<br>\n\n+ f-string 포맷팅\n  + 문자열 맨 앞에 f 또는 F를 붙이고, `{}` 안에 변수명을 직접 작성하여 출력하는 방식\n  + 가독성이 좋고 사용 방법이 간단하여 자주 사용됨\n\n<br>\n\n```{python}\n# f-string 사용\nname = \"홍길동\"\nage = 20\nprint(f\"이름은 {name}이고, 나이는 {age}입니다.\")\n```\n\n```{python}\n# f-string 출력 형식 지정\n# 변수 이름 옆에 :을 작성한 다음 형식을 지정함\nname = \"홍길동\"\nage = 20\nprint(f\"{name:5}, {age:3}\")\n\na = 4\nb = 3.14159265\nprint(f\"20{a:02d}\")                        # a 값을 두자리로 출력하되 앞의 빈곳은 0으로 채움\nprint(f\"{b:.3f}\")                          # b 값을 소수점 이하 세자리로 반올림하여 출력\n```\n\n<br>\n\n## 2.4. 연산자\n+ 연산(operation) : 덧셈, 뺄셈 등과 같이 일정한 규칙에 따라 계산하는 것\n\n<br>\n\n### 2.4.1. 산술 연산자\n|연산자|설명|예시|결과|\n|:---:|:---:|:---:|:---:|\n|+|더하기|print(6+4)|10|\n|-|빼기|print(6-4)|2|\n|*|곱하기|print(6*4)|24|\n|/|나누기|print(6/4)|1.5|\n|//|나눈 정수 몫|print(6//4)|1|\n|%|나눈 나머지|print(6%4)|2|\n|**|거듭제곱|print(6**4)|1296|\n\n<br>\n\n### 2.4.2. 비교 연산자\n+ 크기를 비교할 때 사용하는 연산자\n+ 연산 결과는 참(True) 또는 거짓(False)으로 나타남\n\n|연산자|설명|예시|결과|\n|:---:|:---:|:---:|:---:|\n|==|같다|print(10==20)|False|\n|!=|같지 않다|print(10!=20)|True|\n|>|크다|print(10>20)|False|\n|<|작다|print(10<20)|True|\n|>=|크거나 같다|print(10>=20)|False|\n|<=|작거나 같다|print(10<=20)|True|\n\n<br>\n\n### 2.4.3. 논리 연산자\n+ 참과 거짓의 논리 동작을 다루는 연산\n+ 여러 조건을 조합할 때 주로 사용함\n\n|연산자|설명|예시|결과|\n|:---:|:------------------|:------|:---:|\n|and|왼쪽 식과 오른쪽 식 모두 참인 경우에만 True|a=25 <br>print(a>8 and a<60)|True|\n|or|왼쪽 식과 오른쪽 식 중 하나라도 참인 경우에만 True|a=70 <br>print(a<8 or a>=60)|True|\n|not|오른쪽 식이 참이면 False, 거짓이면 True|a=20 <br>print(not a==20)|False|\n\n<br>\n\n### 2.4.4. 복합 대입 연산자\n+ 연산한 값을 다시 대입하는 연산자\n\n|연산자|설명|예시|결과|\n|:---:|:------------------|:---|:---:|\n|+=|왼쪽 값에 오른쪽 값을 더한 결과를 다시 왼쪽에 대입|a, b = 2, 3 <br>a += b <br> print(a)|5|\n|-=|왼쪽 값에 오른쪽 값을 뺀 결과를 다시 왼쪽에 대입|a, b = 2, 3 <br>a -= b <br> print(a)|-1|\n|*=|왼쪽 값에 오른쪽 값을 곱한 결과를 다시 왼쪽에 대입|a, b = 2, 3 <br>a *= b <br> print(a)|6|\n|/=|왼쪽 값에 오른쪽 값을 나눈 결과를 다시 왼쪽에 대입|a, b = 3, 2 <br>a /= b <br> print(a)|1.5|\n|//=|왼쪽 값에 오른쪽 값을 나눈 몫을 다시 왼쪽에 대입|a, b = 7, 3 <br>a //= b <br> print(a)|2|\n|%=|왼쪽 값에 오른쪽 값을 나눈 나머지를 다시 왼쪽에 대입|a, b = 7, 3 <br>a %= b <br> print(a)|1|\n\n<br>\n\n### 2.4.5. 연산자 우선순위\n+ 프로그래밍 언어는 연산자에 우선순위를 부여하여 우선순위가 높은 연산자를 먼저 계산함\n+ 우선순위에 관계없이 연산의 순서를 정하려면 괄호 `()`를 사용함\n\n|우선순위|연산자|설명|\n|:---:|:---:|:---:|\n|1|**|거듭제곱 연산자|\n|2|+, -|양수, 음수를 나타내는 단항 연산자|\n|3|*, /, //, %|곱셈, 나눗셈, 나눈 몫, 나머지|\n|4|+, -|덧셈, 뺄셈|\n|5|<, <=, >, >=|비교 연산자|\n|6|==, !=|동등 연산자|\n|7|=, +=, -=, /=, //=, %=, **=|대입 연산자|\n|8|not|논리 연산자|\n|9|and|논리 연산자|\n|10|or|논리 연산자|\n\n<br>\n\n```{python}\n# 정수 3개의 평균 계산(틀림)\navg = 70 + 80 + 90 / 3\nprint(avg)\n```\n\n```{python}\n# 정수 3개의 평균 계산\navg = (70 + 80 + 90) / 3\nprint(avg)\n```\n\n```{python}\n# 길이 단위 변환\n#_cm = int(input(\"센티미터 단위 길이: \"))\n#m = _cm // 100\n#cm = _cm % 100\n#print(f'{m}미터 {cm}센티미터')\n```\n\n<br>\n\n## 2.5. 조건문\n### 2.5.1. 프로그램 구조\n\n+ 프로그램 구조는 크게 순차 구조, 선택 구조, 반복 구조로 구분됨\n  + 순차 구조 : 위에서부터 아래로 순차적으로 실행되는 구조\n  + 선택 구조 : 조건에 따라 문장을 선택적으로 실행하는 구조로, 조건이 참(True)인지 거짓(False)인지에 따라 실행되는 문장이 달라짐\n  + 반복 구조 : 임의의 문장을 반복해서 실행하는 구조\n\n<br>\n\n![](./images/fig2-1.png){width=120%}\n\n<br>\n\n<br>\n\n### 2.5.2. if 문\n\n> if 조건식: <br>\n> 　　문장\n\n<br>\n\n+ 조건식이 참이면 문장을 실행하고 거짓이면 문장을 실행하지 않음\n+ 조건식 오른쪽에 `:`이 위치하고, 참인 경우 실행될 문장은 반드시 <b>들여쓰기(indentation)</b>해야 함\n\n<br>\n\n![](./images/fig2-2.png)\n\n<br>\n\n```{python}\n# 무작위로 1~100 사이의 두 정수를 생성한 후, 큰 수부터 작은 수 순으로 출력\nimport random\na = random.randint(1, 100)\nb = random.randint(1, 100)\n\nif a<b:\n    a, b = b, a\n\nprint(a, b)\n```\n\n<br>\n\n### 2.5.3. if\\~else 문\n\n> if 조건식: <br>\n> 　　문장1 <br>\n> else: <br>\n> 　　문장2\n\n<br>\n\n+ 조건식이 참이면 문장1을 실행하고, 거짓이면 문장2를 실행함\n+ 조건식 오른쪽에 `:`이 위치하고, else 오른쪽에는 조건식 없이 `:`이 위치함\n+ 문장1과 문장2는 반드시 들여쓰기해야 함\n\n<br>\n\n![](./images/fig2-3.png)\n\n<br>\n\n```{python}\n# 무작위로 1~100 사이의 정수를 생성한 후, 짝수인지 홀수인지 판단\nimport random\na = random.randint(1, 100)\n\nif a % 2 == 0:\n    print(f'{a}는 짝수입니다')\nelse:\n    print(f'{a}는 홀수입니다')\n```\n\n<br>\n\n### 2.5.4. if\\~elif\\~else문\n\n> if 조건식1: <br>\n> 　　문장1 <br>\n> elif 조건식2: <br>\n> 　　문장2 <br>\n> else: <br>\n> 　　문장3\n\n<br>\n\n+ 조건식1이 거짓인 경우에 또 다른 선택구조를 연결하는 구조\n+ 조건식1이 참이면 문장1을 실행하고, 조건식1이 거짓이면서 조건식2가 참이면 문장2를 실행하고, 두 조건식 모두 거짓이면 문장3을 실행함\n+ 조건식1, 조건식2 오른쪽에 `:`이 위치하고, 문장1, 문장2, 문장3은 반드시 들여쓰기해야 함\n\n<br>\n\n![](./images/fig2-4.png)\n\n<br>\n\n```{python}\n# 놀이공원 기본 입장료는 5,000원임\n# 8세 미만은 기본 입장료 30% 할인, 65세 이상은 기본 입장료 20% 할인 적용함\n# 연령이 주어졌을 때, 놀이공원 입장료 산출\nfee = 5000\nage = 7\n\nif age < 8:\n    print('입장료:', fee*0.7)\nelif age < 65:\n    print('입장료:', fee)\nelse:\n    print('입장료:', fee*0.8)\n```\n\n<br>\n\n## 2.6. 반복문\n### 2.6.1. for 문\n\n> for 반복변수 in 반복범위: <br>\n> 　　문장\n\n<br>\n\n+ 반복범위를 지정하여(정해진 횟수만큼) 반복해서 문장을 실행함\n+ 반복범위 오른쪽에는 `:`이 위치하고, 반복해서 실행할 문장은 반드시 **들여쓰기**해야 함\n+ 반복범위에는 범위, 문자열, 리스트, 딕셔너리 등이 사용될 수 있음\n  + 그 중 범위가 가장 많이 사용되며, `range()` 함수로 만들 수 있음\n \n|형식|설명|예시|결과|\n|:---------|:------------|:---:|:---:|\n|range(종료값)|0으로 시작해서 1씩 증가하며 종료값 전까지의 정수를 생성|range(5)|0,1,2,3,4|\n|range(시작값, 종료값)|시작값으로 시작해서 1씩 증가하며 종료값 전까지의 정수를 생성|rang(2,7)|2,3,4,5,6|\n|range(시작값, 종료값, 증가값)|시작값으로 시작해서 증가값만큼 증가시키면서 종료값 전까지의 정수를 생성|range(2,11,3)|2,5,8|\n\n<br>\n\n```{python}\n# 문자열을 3번 반복해서 출력\nfor i in range(3):\n    print(\"Hello!\")\n```\n\n```{python}\n# 반복범위의 값을 출력1\nfor i in range(5):\n    print(i)\n```\n\n```{python}\n# 반복범위의 값을 출력2\nfor i in \"World\":\n    print(i)\n```\n\n```{python}\n# 1~100 정수의 합 계산\nsum = 0\n\nfor i in range(1,101):\n    sum += i\n\nprint(sum)\n```\n\n```{python}\n# 30의 약수 출력\nnum = 30\n\nfor i in range(1, num+1):\n    if num%i == 0:\n        print(i, end=' ')\n```\n\n<br>\n\n### 2.6.2. while 문\n\n> while 조건식: <br>\n> 　　문장\n\n<br>\n\n+ 조건이 참인 동안 문장을 반복해서 실행하고, 조건이 거짓이면 반복문을 종료함\n\n<br>\n\n```{python}\n# 1~100 정수의 합 계산\nsum = 0\nnum = 1\n\nwhile num<=100:\n    sum += num\n    num += 1\n\nprint(sum)\n```\n\n```{python}\n#| scrolled: true\n# 구구단 9단 출력\nnum = 1\n\nwhile num<=9:\n    print(f'9x{num}={9*num}')\n    num += 1\n```\n\n## 2.7. 함수\n### 2.7.1. 함수의 개념\n+ 함수(function)\n  + 특정한 기능을 수행하도록 미리 만들어 놓고, 필요할 때마다 호출하여 사용하는 일련의 코드\n  + Python에서 기본적으로 제공하는 **내장 함수**와 사용자가 직접 만들어서 사용할 수 있는 **사용자 정의 함수**가 있음\n\n<br>\n\n+ 함수의 장점\n  + 필요할 때마다 호출 가능 : 반복적으로 수행해야 하는 업무를 한 번만 작성해 놓고 필요할 때마다 호출하여 사용할 수 있음\n  + 논리적인 단위로 분할 가능 : (예) 도형 계산 프로그램 - 덧셈 코드, 곱셈 코드, 나눗셈 코드 등으로 나눔\n  + 코드의 캡슐화 가능 : 함수의 인터페이스만 잘 정의하면 다른 사람이 자신의 코드를 쉽게 가져다 사용할 수 있음\n\n<br>\n\n```{python}\n# 절대값 반환 함수\nabs(-10)\n```\n\n<br>\n\n### 2.7.2. 함수 정의\n\n> def 함수명(매개변수1, 매개변수2, ...): <br>\n> 　　문장 <br>\n> 　　return 반환값\n\n<br>\n\n+ 함수명 작성 규칙\n  + 변수 이름 규칙과 동일함\n  + 일반적으로 소문자로 입력\n  + 작업을 나타내기 위해 동사와 명사를 함께 사용하는 경우가 많음 - (예) find_number\n  + 외부에 공개하는  함수일 경우 줄임말을 사용하지 않고 짧고 명료한 이름으로 정함\n\n<br>\n\n+ 매개변수(parameter)\n  + 함수에서 입력값으로 사용하는 변수로, 1개 이상의 값을 적을 수 있음\n \n<br>\n\n+ 함수 형태\n|구분|매개변수 ×|매개변수 ○|\n|:---:|:------------|:------------|\n|반환값 ×|함수 내부 명령문만 수행|매개변수를 사용하여 명령문만 수행|\n|반환값 ○|매개변수 없이 명령문을 수행한 후 결과값 반환|매개변수를 사용하여 명령문을 수행한 후 결과값 반환|\n\n<br>\n\n```{python}\n# 매개변수 ×, 반환값 ×\ndef func():\n    print('함수입니다.')\n\nprint('함수 호출 전입니다')\nfunc()\nprint('함수 호출 후입니다')\n```\n\n```{python}\n# 매개변수 ○, 반환값 ×\ndef add1(x, y):\n    print(x+y)\n\nres1 = add1(10,20)\nprint(res1)\n```\n\n```{python}\n# 매개변수 ○, 반환값 ○\ndef add2(x, y):\n    return x+y\n\nres2 = add2(10,20)\nprint(res2)\n```\n\n```{python}\n## 섭씨온도를 화씨온도로 변환하는 함수\n# (섭씨온도) = (화씨온도 - 32) × 5/9\ndef f_to_c(fahrenheit):\n    return (fahrenheit-32) * 5/9\n\nf_to_c(100)\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"2_basic.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","theme":["simplex"],"toc-location":"right","toc-expand":true,"jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}