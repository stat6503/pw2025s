{
  "hash": "4507b95059b50ff8d8f0f2f867a58d2f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\njupyter: python3\n---\n\n\n\n\n<h1>7. 기술통계</h1>\n<br>\n\n## 7.1. 데이터 유형\n+ 데이터의 특성에 따라 적용할 수 있는 분석 방법이나 시각화 기법이 달라지므로, 제일 먼저 변수의 유형을 파악해야 함\n\n<br>\n\n|구분|설명|예시|\n|:------:|:------------------|:------|\n|범주형 변수 <br>(categorical variable)|- 고정된 범주(집단) 중 하나의 값을 가지는 변수 <br>- 기본적으로 숫자로 표현할 수 없고, 대소 비교나 산술 연산이 적용되지 않음 <br>- 범주형 변수를 숫자로 표기했다고 해서 계산 가능한 수치형 변수가 되는 것은 아님|- 성별(남성, 여성) <br>- 종교(있음, 없음)|\n|수치형 변수 <br>(numerical variagle)|- 연산 가능한 수치 값을 가지는 변수 <br>- 대소 비교가 가능하고, 산술 연산이 가능함|- 키(cm) <br>- 몸무게(kg)|\n\n<br>\n\n## 7.2. 변수 요약\n### 7.2.1. 범주형 변수 요약\n+ 빈도표 : 하나의 범주형 변수의 분포를 파악하기 위해 범주별 빈도를 정리한 표\n+ 분할표 : 두 개의 범주형 변수의 분포를 파악하기 위해 한 변수의 범주는 행에, 다른 변수의 범주는 열에 배치하여 교차되는 칸에 해당 빈도를 정리한 표\n\n<br>\n\n::: {#0306f23e .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n```\n:::\n\n\n::: {#e0265cec .cell execution_count=2}\n``` {.python .cell-code}\n## 실습 데이터 : tips 데이터셋\nimport seaborn as sns\ntips = sns.load_dataset('tips')\n```\n:::\n\n\n::: {#4efd3966 .cell execution_count=3}\n``` {.python .cell-code}\n# total_bill: 식사 금액\n# tip: 팁 금액\n# sex: 성별\n# smoker: 흡연 여부\n# day: 요일\n# time: 식사 시간(Lunch, Dinner)\n# size: 식사 인원 수\nprint(tips.info())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 244 entries, 0 to 243\nData columns (total 7 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   total_bill  244 non-null    float64 \n 1   tip         244 non-null    float64 \n 2   sex         244 non-null    category\n 3   smoker      244 non-null    category\n 4   day         244 non-null    category\n 5   time        244 non-null    category\n 6   size        244 non-null    int64   \ndtypes: category(4), float64(2), int64(1)\nmemory usage: 7.4 KB\nNone\n```\n:::\n:::\n\n\n::: {#60bc1085 .cell execution_count=4}\n``` {.python .cell-code}\n# 빈도표1 : 요일별 주문 수\nprint(tips.value_counts('day'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nday\nSat     87\nSun     76\nThur    62\nFri     19\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {#6c54748b .cell execution_count=5}\n``` {.python .cell-code}\n# 빈도표2 : 요일별 주문 비율\nprint(tips.value_counts('day', normalize=True))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nday\nSat     0.356557\nSun     0.311475\nThur    0.254098\nFri     0.077869\nName: proportion, dtype: float64\n```\n:::\n:::\n\n\n::: {#9916a6a3 .cell execution_count=6}\n``` {.python .cell-code}\n# 빈도표3 : 요일별 주문 수 및 비율 (범주 순서 지정)\ndays = ['Thur', 'Fri', 'Sat', 'Sun']\ncat_type = pd.CategoricalDtype(categories=days, ordered=True)\ntips['day'] = tips['day'].astype(cat_type)\n\nfreqency = tips['day'].value_counts().sort_index()\nproportion = tips['day'].value_counts(normalize=True).sort_index()\n\nsummary = pd.DataFrame({'빈도': freqency, '비율': proportion})\nprint(summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      빈도        비율\nday               \nThur  62  0.254098\nFri   19  0.077869\nSat   87  0.356557\nSun   76  0.311475\n```\n:::\n:::\n\n\n::: {#7f89e073 .cell execution_count=7}\n``` {.python .cell-code}\n# 교차표1 : 요일에 따른 식사 시간 빈도\nprint(pd.crosstab(tips['day'], tips['time']))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntime  Lunch  Dinner\nday                \nThur     61       1\nFri       7      12\nSat       0      87\nSun       0      76\n```\n:::\n:::\n\n\n::: {#74ee0eb0 .cell execution_count=8}\n``` {.python .cell-code}\n# 교차표2 : 요일에 따른 식사 시간 비율 (전체 %)\nprint(pd.crosstab(tips['day'], tips['time'], normalize=True))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntime     Lunch    Dinner\nday                     \nThur  0.250000  0.004098\nFri   0.028689  0.049180\nSat   0.000000  0.356557\nSun   0.000000  0.311475\n```\n:::\n:::\n\n\n::: {#c1716064 .cell execution_count=9}\n``` {.python .cell-code}\n# 교차표3 : 요일에 따른 식사 시간 비율 (행 기준 %)\nprint(pd.crosstab(tips['day'], tips['time'], normalize='index'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntime     Lunch    Dinner\nday                     \nThur  0.983871  0.016129\nFri   0.368421  0.631579\nSat   0.000000  1.000000\nSun   0.000000  1.000000\n```\n:::\n:::\n\n\n::: {#168f4f49 .cell execution_count=10}\n``` {.python .cell-code}\n# 교차표4 : 요일에 따른 식사 시간 비율 (열 기준 %)\nprint(pd.crosstab(tips['day'], tips['time'], normalize='columns'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntime     Lunch    Dinner\nday                     \nThur  0.897059  0.005682\nFri   0.102941  0.068182\nSat   0.000000  0.494318\nSun   0.000000  0.431818\n```\n:::\n:::\n\n\n<br>\n\n### 7.2.2. 수치형 변수 요약\n+ 중심위치 : 자료를 하나의 숫자로 표현할 수 있는 값으로, 분포의 중심을 나타냄\n  + 평균(mean) : 모든 값을 더한 후 데이터 개수로 나눈 값으로, 이상값의 영향을 크게 받음\n  + 중앙값(median) : 데이터를 크기 순으로 정렬했을 때 중앙에 위치하는 값으로, 이상값의 영향을 거의 받지 않음\n\n<br>\n\n+ 산포도 : 데이터가 흩어져 있는 정도로, 중심위치의 대표성을 평가하는데 중요함\n  + 분산(variance) : 각 데이터가 평균과 얼마나 떨어져 있는지 제곱한 값들의 평균\n  + 표준편차(standard deviation) : 분산의 양의 제곱근으로, 평균과 단위가 같아 해석이 용이함\n  + 산포도가 작으면 데이터들이 중심위치에 모여 있다는 것을 의미함\n\n<br>\n\n+ 사분위수(quartiles) : 데이터를 4등분하는 값\n  + 최소값\n  + 1사분위수(Q₁) : 데이터의 25% 순서에 있는 값\n  + 중앙값\n  + 3사분위수(Q₃) : 데이터의 75% 순서에 있는 값\n  + 최대값\n+ 사분위수범위(IQR) : Q₃ - Q₁으로, 중앙값에 대한 산포도를 나타냄\n\n<br>\n\n![](./images/fig7-1.gif)\n\n<br>\n\n+ 분포의 모양\n  + 왜도(skewness)\n    + 데이터의 비대칭 정도를 나타냄\n    + 0이면 대칭, 음수이면 왼쪽으로 꼬리가 긴 분포(skewed to left), 양수이면 오른쪽으로 꼬리가 긴 분포(skewed to right)임\n  + 첨도(kurtosis)\n    + 데이터가 중심위치에 얼마나 모여 있는가를 나타냄\n    + 0이면 정규분포와 유사, 양수이면 중심에 많이 모여 있음(뾰족함), 음수이면 넓게 퍼져있음(완만함)\n    + \\[참고\\]) Python은 초과 첨도를 기준으로 하여, 정규분포를 0으로 간주함\n\n<br>\n\n::: {#e7874f7d .cell execution_count=11}\n``` {.python .cell-code}\nfrom scipy import stats\n```\n:::\n\n\n::: {#6e5b96c2 .cell execution_count=12}\n``` {.python .cell-code}\n# 요약 통계1 : 식사 금액 분포 \nprint(tips['total_bill'].describe())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncount    244.000000\nmean      19.785943\nstd        8.902412\nmin        3.070000\n25%       13.347500\n50%       17.795000\n75%       24.127500\nmax       50.810000\nName: total_bill, dtype: float64\n```\n:::\n:::\n\n\n::: {#c82b0a1a .cell execution_count=13}\n``` {.python .cell-code}\n# 요약 통계2 : 팁 금액 분포\nsummary = stats.describe(tips['tip'])\nprint(f'nobs: {summary.nobs}')\nprint(f'min-max: {summary.minmax}')\nprint(f'mean: {summary.mean:.2f}')\nprint(f'variance: {summary.variance:.2f}')\nprint(f'skewness: {summary.skewness:.2f}')\nprint(f'kurtosis: {summary.kurtosis:.2f}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnobs: 244\nmin-max: (1.0, 10.0)\nmean: 3.00\nvariance: 1.91\nskewness: 1.46\nkurtosis: 3.55\n```\n:::\n:::\n\n\n<br>\n\n## 7.3. 변수 간 관계\n### 7.3.1. 집단별 비교\n+ 집단별로 수치형 변수의 분포(평균, 중앙값, 표준편차, 사분위수 등)를 비교함으로써 집단 간 차이를 파악할 수 있음\n\n<br>\n\n::: {#db90de17 .cell execution_count=14}\n``` {.python .cell-code}\n# 흡연 여부별 팁 금액 분포\nprint(tips.groupby('smoker', observed=True)['total_bill'].describe())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        count       mean       std   min     25%    50%     75%    max\nsmoker                                                                \nYes      93.0  20.756344  9.832154  3.07  13.420  17.92  26.860  50.81\nNo      151.0  19.188278  8.255582  7.25  13.325  17.59  22.755  48.33\n```\n:::\n:::\n\n\n<br>\n\n### 7.3.2. 상관관계\n+ 상관관계(correlation)\n  + 두 수치형 변수 간 선형적인 관계(linear relationship)를 나타냄\n  + 상관계수(correlation coefficient)\n    + 두 변수 간 상관관계를 수치로 나타낸 지표\n    + 변수 측정 단위의 영향을 받지 않음\n\n<br>\n\n+ 상관계수의 성질\n  + 상관계수 r은 항상 -1에서 +1 사이의 값을 가짐\n  + 절대값 |r|은 선형성의 강도를 나타내며, 1에 가까울수록 강한 상관관계를 의미함\n  + 부호는 선형 관계의 방향을 나타냄\n    + r > 0 : 양의 상관관계(한 변수가 증가할 때 다른 변수도 증가)\n    + r < 0 : 음의 상관관계(한 변수가 증가할 때 다른 변수는 감소)\n    + r ≈ 0 : 상관관계 없음(한 변수가 증가할 때 다른 변수는 영향을 받지 않음)\n\n<br>\n\n![](./images/fig7-2.jpg){width=70%}\n\n<br>\n\n::: {#44982074 .cell execution_count=15}\n``` {.python .cell-code}\n# 상관관계1 : 식사 금액과 팁 금액 간 상관계수\nfrom scipy.stats import pearsonr\nr, p = pearsonr(tips['total_bill'], tips['tip'])\nprint(f'상관계수: {r:.2f}, p-value: {p:.3f}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n상관계수: 0.68, p-value: 0.000\n```\n:::\n:::\n\n\n::: {#faa06a30 .cell execution_count=16}\n``` {.python .cell-code}\n# 상관관계2 : 식사 금액, 식사 인원 수와 팁 금액 간 상관계수\ntips[['total_bill', 'size', 'tip']].corr()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>size</th>\n      <th>tip</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>total_bill</th>\n      <td>1.000000</td>\n      <td>0.598315</td>\n      <td>0.675734</td>\n    </tr>\n    <tr>\n      <th>size</th>\n      <td>0.598315</td>\n      <td>1.000000</td>\n      <td>0.489299</td>\n    </tr>\n    <tr>\n      <th>tip</th>\n      <td>0.675734</td>\n      <td>0.489299</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n## 7.4. 결측값 처리\n+ 결측값(missing value)\n  + Python에서는 누락된 데이터를 `NaN`(Not a Number)로 표기하며, 연산 시 자동으로 제외함\n  + 데이터프레임에서 `isna()`, `isnull()` 메소드를 이용하면 결측값을 확인할 수 있음\n\n<br>\n\n+ 결측값 처리 방법\n  + 가장 단순한 방법은 `dropna()` 메소드를 이용하여 결측값이 포함된 행이나 열을 삭제하는 것임\n    + `axis=0`이면 행, `axis=1`이면 열을 삭제함\n  + `fillna()` 메소드를 이용하여 결측값을 최빈값이나 평균, 중앙값으로 대체할 수도 있음\n\n<br>\n\n::: {#067335f0 .cell execution_count=17}\n``` {.python .cell-code}\n## 실습 데이터 : titanic\ntitanic = sns.load_dataset('titanic')\n```\n:::\n\n\n::: {#f6508b56 .cell execution_count=18}\n``` {.python .cell-code}\n# survived: 생존 여부(0, 1)\n# pclass: 객실 등급(1, 2, 3)\n# sex: 성별\n# age: 나이\n# sibsp: 함께 탑승한 형제자매, 배우자 수\n# parch: 함께 탑승한 부모, 자식 수\n# fare: 요금\n# embarked: 탑승 항구(S, C, Q)\n# class: 객실 등급(First, Second, Third)\n# who: 사람 구분(man, woman, child)\n# adult_male: 성인 남자 여부(True, False)\n# deck: 갑판\n# embark_town: 탑승 항구(Southhampton, Cherbourg, Queenstown)\n# alive: 생존여부(no, yes)\n# alone: 1인 탑승 여부(True, False)\ntitanic.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 15 columns):\n #   Column       Non-Null Count  Dtype   \n---  ------       --------------  -----   \n 0   survived     891 non-null    int64   \n 1   pclass       891 non-null    int64   \n 2   sex          891 non-null    object  \n 3   age          714 non-null    float64 \n 4   sibsp        891 non-null    int64   \n 5   parch        891 non-null    int64   \n 6   fare         891 non-null    float64 \n 7   embarked     889 non-null    object  \n 8   class        891 non-null    category\n 9   who          891 non-null    object  \n 10  adult_male   891 non-null    bool    \n 11  deck         203 non-null    category\n 12  embark_town  889 non-null    object  \n 13  alive        891 non-null    object  \n 14  alone        891 non-null    bool    \ndtypes: bool(2), category(2), float64(2), int64(4), object(5)\nmemory usage: 80.7+ KB\n```\n:::\n:::\n\n\n::: {#386a6a8b .cell execution_count=19}\n``` {.python .cell-code}\n# 결측값 확인\ntitanic[titanic['embarked'].isna()]\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>survived</th>\n      <th>pclass</th>\n      <th>sex</th>\n      <th>age</th>\n      <th>sibsp</th>\n      <th>parch</th>\n      <th>fare</th>\n      <th>embarked</th>\n      <th>class</th>\n      <th>who</th>\n      <th>adult_male</th>\n      <th>deck</th>\n      <th>embark_town</th>\n      <th>alive</th>\n      <th>alone</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>61</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>80.0</td>\n      <td>NaN</td>\n      <td>First</td>\n      <td>woman</td>\n      <td>False</td>\n      <td>B</td>\n      <td>NaN</td>\n      <td>yes</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>829</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>80.0</td>\n      <td>NaN</td>\n      <td>First</td>\n      <td>woman</td>\n      <td>False</td>\n      <td>B</td>\n      <td>NaN</td>\n      <td>yes</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#bd9ffab5 .cell execution_count=20}\n``` {.python .cell-code}\n# 각 열별 결측값 개수 확인\n# 부울형은 산술 연산 시 True는 1, False는 0으로 계산되므로\n# isna() 결과에 sum()을 적용하면 결측값 개수가 계산됨\ntitanic.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nsurvived         0\npclass           0\nsex              0\nage            177\nsibsp            0\nparch            0\nfare             0\nembarked         2\nclass            0\nwho              0\nadult_male       0\ndeck           688\nembark_town      2\nalive            0\nalone            0\ndtype: int64\n```\n:::\n:::\n\n\n::: {#da316fe5 .cell execution_count=21}\n``` {.python .cell-code}\n# 결측값이 많이 포함된 열 삭제\ntitanic.drop('deck', axis=1, inplace=True)\ntitanic.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nIndex(['survived', 'pclass', 'sex', 'age', 'sibsp', 'parch', 'fare',\n       'embarked', 'class', 'who', 'adult_male', 'embark_town', 'alive',\n       'alone'],\n      dtype='object')\n```\n:::\n:::\n\n\n::: {#a192772d .cell execution_count=22}\n``` {.python .cell-code}\n# age 변수를 제외한 변수들 중 결측값이 하나라도 포함된 행 삭제\ncols = titanic.columns.difference(['age'])\ntitanic_new = titanic.dropna(subset=cols, how='any')\ntitanic_new.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nsurvived         0\npclass           0\nsex              0\nage            177\nsibsp            0\nparch            0\nfare             0\nembarked         0\nclass            0\nwho              0\nadult_male       0\nembark_town      0\nalive            0\nalone            0\ndtype: int64\n```\n:::\n:::\n\n\n::: {#6bf622dc .cell execution_count=23}\n``` {.python .cell-code}\n# 결측값을 최빈값으로 대체\nmode = titanic['embarked'].mode()[0]\ntitanic['embarked'] = titanic['embarked'].fillna(mode)\ntitanic.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\nsurvived         0\npclass           0\nsex              0\nage            177\nsibsp            0\nparch            0\nfare             0\nembarked         0\nclass            0\nwho              0\nadult_male       0\nembark_town      2\nalive            0\nalone            0\ndtype: int64\n```\n:::\n:::\n\n\n::: {#31eec96c .cell execution_count=24}\n``` {.python .cell-code}\n# 결측값을 중앙값으로 대체\nmedian = titanic.groupby(['sex', 'who'])['age'].transform('median')\ntitanic['age'] = titanic['age'].fillna(median)\ntitanic.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\nsurvived       0\npclass         0\nsex            0\nage            0\nsibsp          0\nparch          0\nfare           0\nembarked       0\nclass          0\nwho            0\nadult_male     0\nembark_town    2\nalive          0\nalone          0\ndtype: int64\n```\n:::\n:::\n\n\n<br>\n\n## 7.5. 이상값 처리\n+ 이상값(outlier)\n  + 대부분의 데이터가 분포된 범위를 벗어나 극단적으로 크거나 작은 값\n  + 데이터 분석과 모델링 과정에서 결과에 큰 영향을 미칠 수 있음\n\n<br>\n\n+ 이상값 탐지 방법\n  + 사분위수범위(IQR) 활용 : (Q₁-1.5×IQR, Q₃+1.5×IQR) 범위를 벗어나는 값을 이상값으로 판단\n  + 표준점수(Z-score) 활용 : 분포가 대칭일때, 일반적으로 |Z|>3인 값을 이상값으로 판단\n\n<br>\n\n+ 이상값 처리 방법\n  + 이상값이 소수이고 데이터 손실이 크지 않다면 해당 데이터를 삭제\n  + 평균, 중앙값 등 적절한 값으로 대체 가능\n  + 로그 변환, 제곱근 변환 등 데이터 변환 기법 활용\n\n<br>\n\n::: {#eb79426f .cell execution_count=25}\n``` {.python .cell-code}\n# 이상값 반환 함수1 : 사분위수 범위(IQR) 활용\ndef iqr_outlier(data, column):\n    col_data = data[column].dropna()\n    Q1 = col_data.quantile(0.25)\n    Q3 = col_data.quantile(0.75)\n    IQR = Q3 - Q1\n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n    outliers = data[(data[column] < lower_bound) | (data[column] > upper_bound)]\n    return outliers\n\n# 각 열별 이상값 개수 확인\nfor column in titanic.select_dtypes(include='number').columns:\n    outlier = iqr_outlier(titanic, column)\n    print(f'{column} 변수의 이상값 개수: {len(outlier)}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsurvived 변수의 이상값 개수: 0\npclass 변수의 이상값 개수: 0\nage 변수의 이상값 개수: 66\nsibsp 변수의 이상값 개수: 46\nparch 변수의 이상값 개수: 213\nfare 변수의 이상값 개수: 116\n```\n:::\n:::\n\n\n::: {#5c2285cc .cell execution_count=26}\n``` {.python .cell-code}\n# age 변수의 이상값을 제외한 데이터프레임\noutliers_age = iqr_outlier(titanic, 'age')\ntitanic_new = titanic.drop(index=outliers_age.index)\ntitanic_new\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>survived</th>\n      <th>pclass</th>\n      <th>sex</th>\n      <th>age</th>\n      <th>sibsp</th>\n      <th>parch</th>\n      <th>fare</th>\n      <th>embarked</th>\n      <th>class</th>\n      <th>who</th>\n      <th>adult_male</th>\n      <th>embark_town</th>\n      <th>alive</th>\n      <th>alone</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>Third</td>\n      <td>man</td>\n      <td>True</td>\n      <td>Southampton</td>\n      <td>no</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>First</td>\n      <td>woman</td>\n      <td>False</td>\n      <td>Cherbourg</td>\n      <td>yes</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>Third</td>\n      <td>woman</td>\n      <td>False</td>\n      <td>Southampton</td>\n      <td>yes</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>First</td>\n      <td>woman</td>\n      <td>False</td>\n      <td>Southampton</td>\n      <td>yes</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>Third</td>\n      <td>man</td>\n      <td>True</td>\n      <td>Southampton</td>\n      <td>no</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>0</td>\n      <td>2</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0000</td>\n      <td>S</td>\n      <td>Second</td>\n      <td>man</td>\n      <td>True</td>\n      <td>Southampton</td>\n      <td>no</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>19.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>S</td>\n      <td>First</td>\n      <td>woman</td>\n      <td>False</td>\n      <td>Southampton</td>\n      <td>yes</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>0</td>\n      <td>3</td>\n      <td>female</td>\n      <td>30.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>23.4500</td>\n      <td>S</td>\n      <td>Third</td>\n      <td>woman</td>\n      <td>False</td>\n      <td>Southampton</td>\n      <td>no</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>1</td>\n      <td>1</td>\n      <td>male</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>C</td>\n      <td>First</td>\n      <td>man</td>\n      <td>True</td>\n      <td>Cherbourg</td>\n      <td>yes</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>32.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.7500</td>\n      <td>Q</td>\n      <td>Third</td>\n      <td>man</td>\n      <td>True</td>\n      <td>Queenstown</td>\n      <td>no</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n<p>825 rows × 14 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#804fdcc8 .cell execution_count=27}\n``` {.python .cell-code}\n# 이상값 반환 함수2 : Z-score 활용\ndef z_outlier(df, c, t=3):\n    from scipy.stats import zscore\n    z = zscore(df[c].dropna())\n    return df.loc[df[c].dropna().index[(abs(z) > t)]]\n    \nfor column in titanic.select_dtypes(include='number').columns:\n    outlier = z_outlier(titanic, column)\n    print(f'{column} 변수의 이상값 개수: {len(outlier)}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsurvived 변수의 이상값 개수: 0\npclass 변수의 이상값 개수: 0\nage 변수의 이상값 개수: 7\nsibsp 변수의 이상값 개수: 30\nparch 변수의 이상값 개수: 15\nfare 변수의 이상값 개수: 20\n```\n:::\n:::\n\n\n::: {#09ba848a .cell execution_count=28}\n``` {.python .cell-code}\n# age 변수의 이상값을 제외한 데이터프레임\noutliers_age = z_outlier(titanic, 'age')\ntitanic_new = titanic.drop(index=outliers_age.index)\ntitanic_new\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>survived</th>\n      <th>pclass</th>\n      <th>sex</th>\n      <th>age</th>\n      <th>sibsp</th>\n      <th>parch</th>\n      <th>fare</th>\n      <th>embarked</th>\n      <th>class</th>\n      <th>who</th>\n      <th>adult_male</th>\n      <th>embark_town</th>\n      <th>alive</th>\n      <th>alone</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>Third</td>\n      <td>man</td>\n      <td>True</td>\n      <td>Southampton</td>\n      <td>no</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>First</td>\n      <td>woman</td>\n      <td>False</td>\n      <td>Cherbourg</td>\n      <td>yes</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>Third</td>\n      <td>woman</td>\n      <td>False</td>\n      <td>Southampton</td>\n      <td>yes</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>First</td>\n      <td>woman</td>\n      <td>False</td>\n      <td>Southampton</td>\n      <td>yes</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>Third</td>\n      <td>man</td>\n      <td>True</td>\n      <td>Southampton</td>\n      <td>no</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>0</td>\n      <td>2</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0000</td>\n      <td>S</td>\n      <td>Second</td>\n      <td>man</td>\n      <td>True</td>\n      <td>Southampton</td>\n      <td>no</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>19.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>S</td>\n      <td>First</td>\n      <td>woman</td>\n      <td>False</td>\n      <td>Southampton</td>\n      <td>yes</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>0</td>\n      <td>3</td>\n      <td>female</td>\n      <td>30.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>23.4500</td>\n      <td>S</td>\n      <td>Third</td>\n      <td>woman</td>\n      <td>False</td>\n      <td>Southampton</td>\n      <td>no</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>1</td>\n      <td>1</td>\n      <td>male</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>C</td>\n      <td>First</td>\n      <td>man</td>\n      <td>True</td>\n      <td>Cherbourg</td>\n      <td>yes</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>32.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.7500</td>\n      <td>Q</td>\n      <td>Third</td>\n      <td>man</td>\n      <td>True</td>\n      <td>Queenstown</td>\n      <td>no</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n<p>884 rows × 14 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#eecff86f .cell execution_count=29}\n``` {.python .cell-code}\n# [참고] 변수 분포의 왜도를 확인하고, 적절한 이상값 탐지 방법(IQR, Z-score)을 선택\nfor column in titanic.select_dtypes(include='number').columns:\n    print(f'{column} 변수의 왜도: {stats.skew(titanic[column]):.3f}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsurvived 변수의 왜도: 0.478\npclass 변수의 왜도: -0.629\nage 변수의 왜도: 0.420\nsibsp 변수의 왜도: 3.689\nparch 변수의 왜도: 2.744\nfare 변수의 왜도: 4.779\n```\n:::\n:::\n\n\n",
    "supporting": [
      "7_EDA_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}