{
  "hash": "7868722b26b747704da50ec5f33747d5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\njupyter: python3\n---\n\n\n\n\n<h1>9. Matplotlib</h1>\n<br>\n\n## 9.1. 데이터 시각화\n+ 데이터 시각화(data visualization)\n  + 데이터 분석 결과를 쉽게 이해할 수 있도록 표현하고 전달되는 과정\n  + 복잡한 정보를 한 눈에 파악하고, 숨겨진 패턴이나 관계를 드러냄\n  + 탐색적 자료 분석(EDA), 결과 해석, 의사결정 등에 폭넓게 활용\n\n<br>\n\n## 9.2. 시각화 옵션\n+ Matplotlib\n  + 넘파이 배열을 기반으로 개발된 다중 플랫폼 데이터 시각화 라이브러리\n  + 다양한 운영체제와 그래픽 백엔드에서 안정적으로 작동함\n  + 일반적으로 Pandas의 데이터프레임과 함께 자주 사용됨\n\n<br>\n\n::: {#6ee3ffe2 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n::: {#dc74ac6b .cell execution_count=2}\n``` {.python .cell-code}\n# 시각화 옵션1 : 제목\nxdata = [3, 5, 7, 9]\nydata = [2, 4, 6, 8]\n\nplt.figure(figsize=(5, 3))\nplt.title('Line Graph')\nplt.plot(xdata, ydata)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9_matplotlib_files/figure-html/cell-3-output-1.png){width=409 height=283}\n:::\n:::\n\n\n::: {#158a82bf .cell execution_count=3}\n``` {.python .cell-code}\n# 시각화 옵션2 : 범례\n# plot()의 label 속성에 범례에 표시할 문자열을 작성\ndata1 = [1, 3, 5, 7]\ndata2 = [9, 7, 5, 3]\n\nplt.figure(figsize=(5, 3))\nplt.title('Legend Properties')\nplt.plot(data1, label='Salary')\nplt.plot(data2, label='Prices')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9_matplotlib_files/figure-html/cell-4-output-1.png){width=409 height=283}\n:::\n:::\n\n\n::: {#562410c8 .cell execution_count=4}\n``` {.python .cell-code}\n# 시각화 옵션3 : 색상\n# plot()의 color 속성에 색상 설정\nplt.figure(figsize=(5, 3))\nplt.title('Color Properties')\nplt.plot(xdata, ydata, color='green')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9_matplotlib_files/figure-html/cell-5-output-1.png){width=409 height=283}\n:::\n:::\n\n\n::: {#51bd2c6e .cell execution_count=5}\n``` {.python .cell-code}\n# 시각화 옵션4 : 선 모양\n# plot()의 linestyle 속성에 선 모양을 '-', '--', '-.', ':' 등으로 설정\nplt.figure(figsize=(5, 3))\nplt.title('Line shape Properties')\nplt.plot(data1, color='b', linestyle='--', label='dashed line')\nplt.plot(data2, color='r', linestyle=':', label='dotted line')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9_matplotlib_files/figure-html/cell-6-output-1.png){width=409 height=283}\n:::\n:::\n\n\n::: {#3bf5d514 .cell execution_count=6}\n``` {.python .cell-code}\n# 시각화 옵션5 : 마커\n# plot()의 marker 속성에 마커를 '.', 'o', '^', 'S', 'D', 'x', '+', '*' 등으로 설정\nplt.figure(figsize=(5, 3))\nplt.title('Marker Properties')\nplt.plot(data1, color='c', marker='o', label='circle marker')\nplt.plot(data2, 'ms:', label='square marker')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9_matplotlib_files/figure-html/cell-7-output-1.png){width=409 height=283}\n:::\n:::\n\n\n::: {#5e31e80b .cell execution_count=7}\n``` {.python .cell-code}\n# 시각화 옵션6 : x축 및 y축 이름\nxdata = [3, 5, 7, 9]\nydata = [1, 3, 5, 7]\n\nplt.figure(figsize=(5, 3))\nplt.title('Axis name Properties')\nplt.plot(xdata, ydata)\nplt.xlabel('X value')\nplt.ylabel('Y value')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9_matplotlib_files/figure-html/cell-8-output-1.png){width=427 height=302}\n:::\n:::\n\n\n::: {#bd39f7fd .cell execution_count=8}\n``` {.python .cell-code}\n# 시각화 옵션7 : 축 범위\nxdata = [15, 25, 35, 45]\nydata = [2, 4, 6, 8]\n\nplt.figure(figsize=(5, 3))\nplt.title('X, Y range Properties')\nplt.plot(xdata, ydata, 'b--o', markersize=7)\nplt.xlim(10, 50)\nplt.ylim(0, 10)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9_matplotlib_files/figure-html/cell-9-output-1.png){width=426 height=283}\n:::\n:::\n\n\n::: {#13c5fe7c .cell execution_count=9}\n``` {.python .cell-code}\n# 시각화 옵션8 : 내장 시각화 옵션\n# Pandas 라이브러리의 plot() 메소드를 이용하여 그래프를 그릴 수 있음\nmy_score = [[60, 90, 95], [65, 85, 90], [80, 75, 100],\n            [95, 90, 85], [85, 80, 65]]\nsubject = ['1st', '2nd', '3rd']\ndf = pd.DataFrame(my_score, columns=subject)\n\n# 선 그래프\ndf.plot(kind='line', figsize=(5, 3))\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9_matplotlib_files/figure-html/cell-10-output-1.png){width=426 height=263}\n:::\n:::\n\n\n::: {#47ea581a .cell execution_count=10}\n``` {.python .cell-code}\n# 상자수염 그래프\ndf.plot(kind='box', figsize=(5, 3))\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9_matplotlib_files/figure-html/cell-11-output-1.png){width=426 height=263}\n:::\n:::\n\n\n::: {#111ceb7e .cell execution_count=11}\n``` {.python .cell-code}\n# 커널 밀도 그래프\ndf.plot(kind='kde', figsize=(5, 3))\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9_matplotlib_files/figure-html/cell-12-output-1.png){width=456 height=263}\n:::\n:::\n\n\n<br>\n\n## 9.3. 선 그래프\n+ 일반적으로 시간에 따라 연속적으로 변화하는 데이터를 시각화할 때 사용함\n  + x축에는 시간, y축에는 수치형 변수를 지정함\n  + 시간의 흐름에 따라 데이터의 값은 증가/감소하는가?\n  + 계절에 따른 특정 패턴이 존재하는가? 눈에 띄는 변화 시점이 있는가?\n\n<br>\n\n::: {#4a050b1a .cell execution_count=12}\n``` {.python .cell-code}\n## 실습 데이터 : air_quality 데이터셋\nair_quality = pd.read_csv('https://raw.githubusercontent.com/pandas-dev/pandas/main/doc/data/air_quality_no2_long.csv')\n```\n:::\n\n\n::: {#b0c3953a .cell execution_count=13}\n``` {.python .cell-code}\n# city : 측정 도시\n# country : 측정 국가\n# date.utc : 측정 일시(UTC)\n# location : 측정 위치\n# parameter : 측정 항목\n# value : 측정 값\n# unit : 측정 단위\nprint(air_quality.info())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2068 entries, 0 to 2067\nData columns (total 7 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   city       2068 non-null   object \n 1   country    2068 non-null   object \n 2   date.utc   2068 non-null   object \n 3   location   2068 non-null   object \n 4   parameter  2068 non-null   object \n 5   value      2068 non-null   float64\n 6   unit       2068 non-null   object \ndtypes: float64(1), object(6)\nmemory usage: 113.2+ KB\nNone\n```\n:::\n:::\n\n\n::: {#02411440 .cell execution_count=14}\n``` {.python .cell-code}\nprint(air_quality.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    city country                   date.utc location parameter  value   unit\n0  Paris      FR  2019-06-21 00:00:00+00:00  FR04014       no2   20.0  µg/m³\n1  Paris      FR  2019-06-20 23:00:00+00:00  FR04014       no2   21.8  µg/m³\n2  Paris      FR  2019-06-20 22:00:00+00:00  FR04014       no2   26.5  µg/m³\n3  Paris      FR  2019-06-20 21:00:00+00:00  FR04014       no2   24.9  µg/m³\n4  Paris      FR  2019-06-20 20:00:00+00:00  FR04014       no2   21.4  µg/m³\n```\n:::\n:::\n\n\n::: {#74583c54 .cell execution_count=15}\n``` {.python .cell-code}\nair_quality['city'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\ncity\nParis        1004\nLondon        969\nAntwerpen      95\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {#720e43e0 .cell execution_count=16}\n``` {.python .cell-code}\nair_quality['parameter'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nparameter\nno2    2068\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {#03cd76c7 .cell execution_count=17}\n``` {.python .cell-code}\n# date.utc 열을 datetime 형식으로 변환\nair_quality['date.utc'] = pd.to_datetime(air_quality['date.utc'])\n```\n:::\n\n\n::: {#eb662fa0 .cell execution_count=18}\n``` {.python .cell-code}\nprint(air_quality.info())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2068 entries, 0 to 2067\nData columns (total 7 columns):\n #   Column     Non-Null Count  Dtype              \n---  ------     --------------  -----              \n 0   city       2068 non-null   object             \n 1   country    2068 non-null   object             \n 2   date.utc   2068 non-null   datetime64[ns, UTC]\n 3   location   2068 non-null   object             \n 4   parameter  2068 non-null   object             \n 5   value      2068 non-null   float64            \n 6   unit       2068 non-null   object             \ndtypes: datetime64[ns, UTC](1), float64(1), object(5)\nmemory usage: 113.2+ KB\nNone\n```\n:::\n:::\n\n\n::: {#174df3a7 .cell execution_count=19}\n``` {.python .cell-code}\nprint(air_quality.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    city country                  date.utc location parameter  value   unit\n0  Paris      FR 2019-06-21 00:00:00+00:00  FR04014       no2   20.0  µg/m³\n1  Paris      FR 2019-06-20 23:00:00+00:00  FR04014       no2   21.8  µg/m³\n2  Paris      FR 2019-06-20 22:00:00+00:00  FR04014       no2   26.5  µg/m³\n3  Paris      FR 2019-06-20 21:00:00+00:00  FR04014       no2   24.9  µg/m³\n4  Paris      FR 2019-06-20 20:00:00+00:00  FR04014       no2   21.4  µg/m³\n```\n:::\n:::\n\n\n::: {#08c9f8e2 .cell execution_count=20}\n``` {.python .cell-code}\n# 선 그래프1 : Paris의 NO2 농도 변화\nparis_data = air_quality[air_quality['city'] == 'Paris']\n\nplt.figure(figsize=(8, 3))\nplt.plot(paris_data['date.utc'], paris_data['value'])\nplt.title('NO₂ levels in Paris')\nplt.xlabel('Date')\nplt.ylabel('NO₂ (µg/m³)')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9_matplotlib_files/figure-html/cell-21-output-1.png){width=756 height=276}\n:::\n:::\n\n\n::: {#c738826b .cell execution_count=21}\n``` {.python .cell-code}\n# 선 그래프2 : 세 도시의 NO2 농도 변화\ncities = ['Paris', 'London', 'Antwerpen']\ncolors = ['steelblue', 'green', 'indianred']\n\nplt.figure(figsize=(8, 3))\n\nfor i, city in enumerate(cities):\n    city_data = air_quality[air_quality['city'] == city]\n    plt.plot(city_data['date.utc'], city_data['value'],\n             label=city, color=colors[i],\n             linewidth=1, alpha=0.7)\n\nplt.title('NO₂ levels in Paris, London, and Antwerpen')\nplt.xlabel('Date')\nplt.ylabel('NO₂ (µg/m³)')\nplt.legend(loc='upper right', fontsize=7)\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9_matplotlib_files/figure-html/cell-22-output-1.png){width=756 height=276}\n:::\n:::\n\n\n<br>\n\n## 9.4. 막대 그래프\n+ 일반적으로 집단 간 비교나 범주형 변수를 시각화할 때 사용함\n+ 가독성 측면에서 항목의 개수가 적으면 세로 막대, 많으면 가로 막대가 유리함\n\n<br>\n\n::: {#04e39dcb .cell execution_count=22}\n``` {.python .cell-code}\n# 막대 그래프1 : 도시의 측정 빈도\ncity_counts = air_quality['city'].value_counts()\n\nplt.figure(figsize=(5, 3))\nplt.bar(city_counts.index, city_counts.values, color=['steelblue', 'seagreen', 'indianred'])\nplt.title('Frequency of Measurements by City')\nplt.xlabel('City')\nplt.ylabel('Frequency')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9_matplotlib_files/figure-html/cell-23-output-1.png){width=469 height=276}\n:::\n:::\n\n\n::: {#bc8a50d5 .cell execution_count=23}\n``` {.python .cell-code}\n# 막대 그래프2 : 도시별 평균 NO₂ 농도\ncity_avg = air_quality.groupby('city')['value'].mean()\n\nplt.figure(figsize=(5, 3))\nplt.bar(city_avg.index, city_avg.values, color=['steelblue', 'seagreen', 'indianred'])\nplt.title('Average NO₂ Levels by City')\nplt.xlabel('City')\nplt.ylabel('Average NO₂ (µg/m³)')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9_matplotlib_files/figure-html/cell-24-output-1.png){width=469 height=276}\n:::\n:::\n\n\n<br>\n\n## 9.5. 히스토그램\n+ 수치형 변수의 분포를 시각화할 때 사용함\n+ 데이터를 일정한 구간(bin)으로 나누고, 각 구간에 속하는 값들의 빈도를 막대의 높이로 나타냄\n\n<br>\n\n::: {#780d0583 .cell execution_count=24}\n``` {.python .cell-code}\n# 히스토그램1 : Paris의 NO2 농도 분포\nparis_data = air_quality[air_quality['city'] == 'Paris']\n\nplt.figure(figsize=(5, 3))\nplt.hist(paris_data['value'], bins=15)\nplt.title('Distribution of NO₂ in Paris')\nplt.xlabel('NO₂ (µg/m³)')\nplt.ylabel('Frequency')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9_matplotlib_files/figure-html/cell-25-output-1.png){width=469 height=276}\n:::\n:::\n\n\n::: {#0cdb9e03 .cell execution_count=25}\n``` {.python .cell-code}\n# 히스토그램, 다중 그래프 : 세 도시의 NO2 농도 분포\ncities = ['Paris', 'London', 'Antwerpen']\ncolors = ['steelblue', 'green', 'indianred']\n\nplt.figure(figsize=(8, 3))\n\nfor i, city in enumerate(cities):\n    city_data = air_quality[air_quality['city'] == city]\n    plt.subplot(1, 3, i+1)\n    plt.hist(city_data['value'], density=True,\n             label=city, color=colors[i])\n    \n    plt.xlabel('NO₂ (µg/m³)')\n    plt.ylabel('Frequency')\n    plt.legend(loc='upper right')\n    plt.xlim(0, 100)\n    plt.ylim(0, 0.05)\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9_matplotlib_files/figure-html/cell-26-output-1.png){width=757 height=276}\n:::\n:::\n\n\n<br>\n\n## 9.6. 상자그림\n+ 수치형 변수의 분포를 시각화할 때 사용함\n+ 다섯 숫자 요약값을 기반으로 이상값, 분포의 비대칭 여부 등을 직관적으로 파악할 수 있음\n\n<br>\n\n![](./images/fig9-1.jpg){width=40%}\n\n<br>\n\n::: {#a19475f7 .cell execution_count=26}\n``` {.python .cell-code}\n# 상자그림1 : Paris의 NO2 농도 분포\nparis_data = air_quality[air_quality['city'] == 'Paris']\n\nplt.figure(figsize=(5, 3))\nplt.boxplot(paris_data['value'], vert=False, widths=0.5)\nplt.title('Distribution of NO₂ in Paris')\nplt.xlabel('NO₂ (µg/m³)')\nplt.yticks(range(1,2), ['Paris'])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9_matplotlib_files/figure-html/cell-27-output-1.png){width=439 height=302}\n:::\n:::\n\n\n::: {#8165d7ab .cell execution_count=27}\n``` {.python .cell-code}\n# 상자그림2 : 세 도시의 NO2 농도 분포\ncities = ['Paris', 'London', 'Antwerpen']\ncolors = ['steelblue', 'green', 'indianred']\n\ndata = [air_quality[air_quality['city'] == city]['value'] for city in cities]\nplt.figure(figsize=(5, 3))\nbox = plt.boxplot(data, vert=False, widths=0.5)\nplt.xlabel('NO₂ (µg/m³)')\nplt.yticks(range(1,4), cities)\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9_matplotlib_files/figure-html/cell-28-output-1.png){width=470 height=276}\n:::\n:::\n\n\n<br>\n\n## 9.7. 산점도\n+ 두 수치형 변수 간 관계를 시각화할 때 사용함\n+ 데이터의 분포, 이상값, 변수 간 상관관계, 그룹화된 패턴 등을 직관적으로 파악할 수 있음\n\n<br>\n\n::: {#ffff2b52 .cell execution_count=28}\n``` {.python .cell-code}\n## 실습 데이터 : tips 데이터셋\nimport seaborn as sns\ntips = sns.load_dataset('tips')\nprint(tips.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   total_bill   tip     sex smoker  day    time  size\n0       16.99  1.01  Female     No  Sun  Dinner     2\n1       10.34  1.66    Male     No  Sun  Dinner     3\n2       21.01  3.50    Male     No  Sun  Dinner     3\n3       23.68  3.31    Male     No  Sun  Dinner     2\n4       24.59  3.61  Female     No  Sun  Dinner     4\n```\n:::\n:::\n\n\n::: {#1fcd9869 .cell execution_count=29}\n``` {.python .cell-code}\n# 산점도1 : 식사 금액과 팀 금액 관계\nplt.figure(figsize=(4, 4))\nplt.scatter(tips['total_bill'], tips['tip'])\nplt.title('Scatter Plot of Total Bill vs Tip')\nplt.xlabel('Total Bill')\nplt.ylabel('Tip')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9_matplotlib_files/figure-html/cell-30-output-1.png){width=373 height=372}\n:::\n:::\n\n\n::: {#0a3118c2 .cell execution_count=30}\n``` {.python .cell-code}\n# 산점도2 : 식사 금액과 팀 금액, 식사 시간의 관계\nplt.figure(figsize=(4, 4))\nplt.scatter(tips['total_bill'], tips['tip'],\n           c=tips['time'].map({'Lunch': 'orange', 'Dinner': 'gray'}), alpha=0.7)\nplt.title('Scatter Plot of Total Bill vs Tip')\nplt.xlabel('Total Bill')\nplt.ylabel('Tip')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9_matplotlib_files/figure-html/cell-31-output-1.png){width=373 height=372}\n:::\n:::\n\n\n",
    "supporting": [
      "9_matplotlib_files"
    ],
    "filters": [],
    "includes": {}
  }
}