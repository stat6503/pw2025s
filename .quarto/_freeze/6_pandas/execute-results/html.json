{
  "hash": "496e26ee02b5106797c7a6dfb2e981ca",
  "result": {
    "engine": "jupyter",
    "markdown": "---\njupyter: python3\n---\n\n\n\n\n<h1>6. Pandas</h1>\n<br>\n\n## 6.1. 판다스 객체\n### 6.1.1. 판다스 객체 생성\n+ Pandas\n  + NumPy를 기반으로 만들어진 데이터 분석용 라이브러리\n  + 레이블(label)로 식별되는 데이터를 쉽게 다룰 수 있도록 지원\n  + 고성능 데이터 조작, 탐색, 전처리, 변환, 요약, 통계 연산 기능 제공\n  + 주요 객체로는 Series(1차원), DataFrame(2차원), Index(레이블 관리 구조)가 있음\n\n<br>\n\n|객체|설명|\n|:---:|:---------------|\n|Series|- 1차원 레이블이 붙은 배열로, 각 데이터에 고유한 인덱스가 있음 <br>- 모든 원소가 동일한 자료형으로 저장되며, 다양한 자료형을 지원|\n|DataFrame|- 2차원 표 형태의 데이터 구조로, 행(row)과 열(column)로 구성됨 <br>- 각 열은 Series로 구성되어 있으며, 서로 다른 자료형을 가질 수 있음 <br>- DataFrame은 정렬된(같은 인덱스 공유) Series 객체의 연속으로 볼 수 있음|\n|Index|- 데이터에 레이블을 부여하는 객체로, 행 또는 열에 사용됨 <br>- 데이터 정렬, 선택, 결합 등을 효율적으로 할 수 있도록 지원|\n\n<br>\n\n|함수|설명|\n|:---:|:------------|\n|pd.Series()|1차원 Series 객체 생성|\n|pd.DataFrame()|2차원 DataFrame 객체 생성|\n|pd.Index()|Index 객체 생성|\n\n<br>\n\n::: {#c22f0f75 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n```\n:::\n\n\n::: {#bda7ff0d .cell execution_count=2}\n``` {.python .cell-code}\n# Series 생성1 : 리스트 사용\nsr = pd.Series([1, 2, 3, 4, 5])\nprint(sr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0    1\n1    2\n2    3\n3    4\n4    5\ndtype: int64\n```\n:::\n:::\n\n\n::: {#7a31c528 .cell execution_count=3}\n``` {.python .cell-code}\n# Series 생성2 : 넘파이 배열 사용\nsr = pd.Series(np.array([1, 2, 3, 4, 5]))\nprint(sr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0    1\n1    2\n2    3\n3    4\n4    5\ndtype: int32\n```\n:::\n:::\n\n\n::: {#762a8171 .cell execution_count=4}\n``` {.python .cell-code}\n# Series 생성3 : 딕셔너리 사용\n# 딕셔너리 키는 인덱스로 자동 지정됨\nsr = pd.Series({'a': 10, 'b': 20, 'c': 30})\nprint(sr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na    10\nb    20\nc    30\ndtype: int64\n```\n:::\n:::\n\n\n::: {#23b93924 .cell execution_count=5}\n``` {.python .cell-code}\n# Series 생성4 : 인덱스 지정\nsr = pd.Series([1, 2, 3], index = ['a', 'b', 'c'])\nprint(sr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na    1\nb    2\nc    3\ndtype: int64\n```\n:::\n:::\n\n\n::: {#59917107 .cell execution_count=6}\n``` {.python .cell-code}\n# DataFrame 생성1 : Series 사용\nsr = pd.Series([1, 2, 3], index = ['a', 'b', 'c'])\ndf = pd.DataFrame(sr, columns = ['value'])\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   value\na      1\nb      2\nc      3\n```\n:::\n:::\n\n\n::: {#846afeed .cell execution_count=7}\n``` {.python .cell-code}\n# DataFrame 생성2 : 리스트 사용\nlst = [['Alice', 22], ['Bob', 20], ['Charlie', 27]]\ndf = pd.DataFrame(lst, columns=['Name', 'Age'])\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Name  Age\n0    Alice   22\n1      Bob   20\n2  Charlie   27\n```\n:::\n:::\n\n\n::: {#6b0c0b9b .cell execution_count=8}\n``` {.python .cell-code}\n# DataFrame 생성3 : 넘파이 배열 사용\narr = np.array([['Alice', 22], ['Bob', 20], ['Charlie', 27]])\ndf = pd.DataFrame(arr, columns=['Name', 'Age'])\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Name Age\n0    Alice  22\n1      Bob  20\n2  Charlie  27\n```\n:::\n:::\n\n\n::: {#f1875a6d .cell execution_count=9}\n``` {.python .cell-code}\n# DataFrame 생성4 : 딕셔너리 사용\n# 딕셔너리 키는 열 이름으로 자동 지정됨\ndct = {'Name': ['Alice', 'Bob', 'Charlie'], 'Age': [22, 20, 27]}\ndf = pd.DataFrame(dct)\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Name  Age\n0    Alice   22\n1      Bob   20\n2  Charlie   27\n```\n:::\n:::\n\n\n::: {#3666993a .cell execution_count=10}\n``` {.python .cell-code}\n# DataFrame 생성5 : 딕셔너리 + 리스트 컴프리헨션 사용\ndct = [{'a': i, 'b': 2*i} for i in range(3)]\ndf = pd.DataFrame(dct)\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   a  b\n0  0  0\n1  1  2\n2  2  4\n```\n:::\n:::\n\n\n::: {#4601c029 .cell execution_count=11}\n``` {.python .cell-code}\n# DataFrame 생성6 : Series 사용\n# 서로 다른 인덱스를 가진 Series로 DataFrame을 생성하면\n# 공통된 인덱스를 기준으로 맞춰지고, 누락된 값은 NaN(Not a Number)으로 채워짐\nsr1 = pd.Series([1, 2, 3], index = ['a', 'b', 'c'])\nsr2 = pd.Series([4, 5, 6], index = ['a', 'c', 'd'])\ndf = pd.DataFrame({'x': sr1, 'y': sr2})\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     x    y\na  1.0  4.0\nb  2.0  NaN\nc  3.0  5.0\nd  NaN  6.0\n```\n:::\n:::\n\n\n::: {#b7b9c28f .cell execution_count=12}\n``` {.python .cell-code}\n# DataFrame 생성7 : 인덱스 및 열 이름 지정\ndata = [[101, 22], [102, 20], [103, 27]]\ncolumns = ['ID', 'Age']\nindex = ['Alice', 'Bob', 'Charlie']\ndf = pd.DataFrame(data, columns=columns, index=index)\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          ID  Age\nAlice    101   22\nBob      102   20\nCharlie  103   27\n```\n:::\n:::\n\n\n::: {#f201bd96 .cell execution_count=13}\n``` {.python .cell-code}\n# Index 생성1 : 리스트 사용\nidx = pd.Index(['a', 'b', 'c', 'd'])\nidx\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nIndex(['a', 'b', 'c', 'd'], dtype='object')\n```\n:::\n:::\n\n\n::: {#6a19276d .cell execution_count=14}\n``` {.python .cell-code}\n# Index 생성2 : range() 사용\nidx = pd.Index(range(1, 6))\nidx\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nRangeIndex(start=1, stop=6, step=1)\n```\n:::\n:::\n\n\n<br>\n\n### 6.1.2. 데이터프레임 속성\n|속성|설명|\n|:---:|:------------|\n|.shape|데이터프레임의 모양(행, 열)|\n|.index|행 인덱스 조회 및 변경|\n|.columns|열 이름 조회 및 변경|\n|.dtypes|각 열의 자료형 확인|\n\n<br>\n\n::: {#2c25af80 .cell execution_count=15}\n``` {.python .cell-code}\n# 데이터프레임 속성\ndf = pd.DataFrame({\n    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],\n    'Age': [25, 30, 35, 40, 28],\n    'Score': [85.5, 90.3, 78.2, 88.9, 92.5]\n})\n\nprint(df.shape)\nprint(df.index)\nprint(df.columns)\nprint(df.dtypes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(5, 3)\nRangeIndex(start=0, stop=5, step=1)\nIndex(['Name', 'Age', 'Score'], dtype='object')\nName      object\nAge        int64\nScore    float64\ndtype: object\n```\n:::\n:::\n\n\n::: {#c603ed65 .cell execution_count=16}\n``` {.python .cell-code}\n# 행 인덱스 변경\ndf.index = ['a', 'b', 'c', 'd', 'e']\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Name  Age  Score\na    Alice   25   85.5\nb      Bob   30   90.3\nc  Charlie   35   78.2\nd    David   40   88.9\ne      Eva   28   92.5\n```\n:::\n:::\n\n\n::: {#8beab57c .cell execution_count=17}\n``` {.python .cell-code}\n# 열 이름 변경\ndf.columns = ['Student Name', 'Student Age', 'Exam Score']\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Student Name  Student Age  Exam Score\na        Alice           25        85.5\nb          Bob           30        90.3\nc      Charlie           35        78.2\nd        David           40        88.9\ne          Eva           28        92.5\n```\n:::\n:::\n\n\n<br>\n\n### 6.1.3. 데이터프레임 정보\n|함수|설명|\n|:---:|:------------|\n|info()|기본 정보(행 개수, 열 개수, 데이터 자료형, 결측값 여부 등) 출력|\n|head()|상위 n개의 행 출력(초기 값 n=5)|\n\n<br>\n\n::: {#f21e5638 .cell execution_count=18}\n``` {.python .cell-code}\ndf = pd.DataFrame({\n    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],\n    'Age': [25, 30, 35, 40, 28],\n    'Score': [85.5, 90.3, 78.2, 88.9, 92.5]\n})\n```\n:::\n\n\n::: {#1ca8667b .cell execution_count=19}\n``` {.python .cell-code}\n# 기본 정보\nprint(df.info())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5 entries, 0 to 4\nData columns (total 3 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   Name    5 non-null      object \n 1   Age     5 non-null      int64  \n 2   Score   5 non-null      float64\ndtypes: float64(1), int64(1), object(1)\nmemory usage: 252.0+ bytes\nNone\n```\n:::\n:::\n\n\n::: {#fe13a481 .cell execution_count=20}\n``` {.python .cell-code}\n# 상위 5개 행\nprint(df.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Name  Age  Score\n0    Alice   25   85.5\n1      Bob   30   90.3\n2  Charlie   35   78.2\n3    David   40   88.9\n4      Eva   28   92.5\n```\n:::\n:::\n\n\n<br>\n\n## 6.2. 인덱싱과 슬라이싱\n### 6.2.1. 열 인덱싱과 슬라이싱\n+ 열 이름을 사용하여 직접 선택\n  + 여러 개의 열을 선택할 때는 열 이름을 리스트로 작성\n+ `loc[:, ]` : 레이블(label) 기반 접근 방식\n+ `iloc[:, ]` : 정수(integer) 기반 접근 방식\n\n<br>\n\n::: {#8842052c .cell execution_count=21}\n``` {.python .cell-code}\ndf = pd.DataFrame({\n    'A': [1, 2, 3],\n    'B': [4, 5, 6],\n    'C': [7, 8, 9],\n    'D': [10, 11, 12]\n}, index=['x', 'y', 'z'])\n```\n:::\n\n\n```python\n# 열 인덱싱과 슬라이싱1 : 열 이름 사용\ndf['A']                                      # 열 이름\ndf[['A', 'C']]                               # 열 이름 리스트\n#df['A':'B']                                 # 열 이름 슬라이싱은 안 됨, Error!\n```\n\n```python\n# 열 인덱싱과 슬라이싱2 : 레이블 기반 접근\ndf.loc[:, 'A']                               # 열 이름\ndf.loc[:, ['A', 'C']]                        # 열 이름 리스트\ndf.loc[:, 'A':'B']                           # 열 이름 슬라이싱\ndf.loc[:, 'B'::2]                            # 열 이름 스트라이딩\ndf.loc[:, [True, False, True, True]]         # bool 리스트\n```\n\n```python\n# 열 인덱싱과 슬라이싱3 : 정수 기반 접근\ndf.iloc[:, 0]                                # 정수\ndf.iloc[:, [0, 3]]                           # 정수 리스트\ndf.iloc[:, range(2)]                         # range\ndf.iloc[:, 0:3]                              # 슬라이싱\ndf.iloc[:, 1::2]                             # 스트라이딩\n```\n\n<br>\n\n### 6.2.2. 행 인덱싱과 슬라이싱\n+ `loc[, :]` : 레이블(label) 기반 접근 방식\n+ `iloc[, :]` : 정수(integer) 기반 접근 방식\n\n<br>\n\n```python\n# 행 인덱싱과 슬라이싱1 : 레이블 기반 접근\ndf.loc['x', ]                                # 인덱스 이름\ndf.loc[['x', 'y'], :]                        # 인덱스 이름 리스트\ndf.loc['x':'y', :]                           # 인덱스 이름 슬라이싱\ndf.loc['x'::1, :]                            # 인덱스 이름 스트라이딩\ndf.loc[[True, False, True], :]               # bool 리스트\ndf.loc[list(df['A'] < 3), :]                 # bool 리스트\ndf.loc[df['A'] < 3, :]                       # bool 리스트\n```\n\n```python\n# 행 인덱싱과 슬라이싱2 : 정수 기반 접근\ndf.iloc[0, :]                                # 정수\ndf.iloc[[0, 2], :]                           # 정수 리스트\ndf.iloc[range(2), :]                         # range\ndf.iloc[0:1, :]                              # 슬라이싱\ndf.iloc[1::2, :]                             # 스트라이딩\ndf.iloc[[True, False, True], :]              # bool 리스트 (권장하지 않음)\ndf.iloc[list(df['A'] < 3), :]                # bool 리스트 (권장하지 않음)\n#df.iloc[df['A'] < 3, :]                     # bool 리스트 (Error!)\n```\n\n```python\n# 행 인덱싱과 슬라이싱3 : 정수 기반 접근\ndf.iloc[0]                                   # 정수\ndf.iloc[[0, 2]]                              # 정수 리스트\ndf.iloc[range(2)]                            # range\ndf.iloc[0:1]                                 # 슬라이싱\ndf.iloc[1::2]                                # 스트라이딩\ndf.iloc[[True, False, True]]                 # bool 리스트(권장하지 않음)\ndf.iloc[list(df['A'] < 3)]                   # bool 리스트(권장하지 않음)\n#df.iloc[df['A'] < 3]                        # bool 리스트 (Error!)\n```\n\n```python\n# 행 인덱싱과 슬라이싱4\n# 인덱싱은 열을 참조하는 반면, 슬라이싱은 행을 참조함\n#df[0]                                       # Error!\ndf[0:2]                                      # 권장하지 않음\ndf['x':'y']                                  # 권장하지 않음\ndf[df['A'] < 3]                              # 불리언 인덱싱은 행 단위로 적용됨\n```\n\n```python\n# 행 인덱싱과 슬라이싱5\ndf = pd.DataFrame({\n    'A': [1, 2, 3],\n    'B': [4, 5, 6],\n    'C': [7, 8, 9],\n    'D': [10, 11, 12]})\n\ndf.loc[0:1]                                  # 명시적 인덱스(label) 사용 - 마지막 인덱스 포함\ndf.iloc[0:1]                                 # 암묵적 인덱스(integer) 사용 - 마지막 인덱스 제외\ndf[0:1]                                      # 암묵적 인덱스(integer) 사용, iloc와 동일\n```\n\n<br>\n\n## 6.3. 데이터프레임 연산\n### 6.3.1. 기본 연산\n+ NumPy와 동일하게 벡터화, 브로드캐스팅 모두 지원\n+ 단항 연산: 인덱스와 열 레이블 보존\n+ 이항 연산: 인덱스와 열 레이블을 기준으로 자동 정렬되어 연산\n  + 위치가 아닌 동일한 레이블끼리 연산하며, 일치하지 않는 항목은 `NaN`으로 처리\n\n<br>\n\n::: {#230428aa .cell execution_count=22}\n``` {.python .cell-code}\n# 단항 연산1 : Series\nsr = pd.Series([1, 2, 3, 4, 5])\nprint(sr + 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0    3\n1    4\n2    5\n3    6\n4    7\ndtype: int64\n```\n:::\n:::\n\n\n::: {#9252c9f1 .cell execution_count=23}\n``` {.python .cell-code}\n# 단항 연산2 : DataFrame\ndf = pd.DataFrame({\n    'x': [1, 2, 3, 4, 5],\n    'y': [11, 12, 13, 14, 15] \n})\nprint(np.log(df))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          x         y\n0  0.000000  2.397895\n1  0.693147  2.484907\n2  1.098612  2.564949\n3  1.386294  2.639057\n4  1.609438  2.708050\n```\n:::\n:::\n\n\n::: {#f6eb6853 .cell execution_count=24}\n``` {.python .cell-code}\n# 이항 연산1 : Series\n# 두 시리즈에 존재하는 모든 행 인덱스를 포함한 결과 생성 (합집합처럼 동작)\nmath = pd.Series({'Alice': 85, 'Bob': 90, 'Charlie': 78})\nenglish = pd.Series({'Alice': 95, 'Charlie': 80, 'David': 88})\nprint(math + english)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAlice      180.0\nBob          NaN\nCharlie    158.0\nDavid        NaN\ndtype: float64\n```\n:::\n:::\n\n\n::: {#154a6d37 .cell execution_count=25}\n``` {.python .cell-code}\n# 이항 연산2: DataFrame\nmidterm = pd.DataFrame({\n    'math': [85, 90, 78],\n    'science': [88, 92, 79]\n}, index=['Alice', 'Bob', 'Charlie'])\n\nfinal = pd.DataFrame({\n    'math': [95, 88, 82],\n    'english': [95, 80, 88]\n}, index=['Alice', 'Charlie', 'David'])\n\nprint(midterm + final)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         english   math  science\nAlice        NaN  180.0      NaN\nBob          NaN    NaN      NaN\nCharlie      NaN  166.0      NaN\nDavid        NaN    NaN      NaN\n```\n:::\n:::\n\n\n<br>\n\n### 6.3.2. 연산자 메소드\n+ 인덱스와 열 레이블이 일치하지 않아도 연산 가능\n+ 예외 처리가 필요한 경우 기본 연산자보다 안정적임\n  + `fill_value` 인수를 사용하여 `NaN`를 다른 값으로 처리 가능\n\n<br>\n\n|연산자|연산자 메소드|\n|:---:|:------------|\n|+|add()|\n|-|sub()|\n|*|mul()|\n|/|divide()|\n|//|floordiv()|\n|%|mod()|\n|**|pow()|\n\n<br>\n\n::: {#605a2b71 .cell execution_count=26}\n``` {.python .cell-code}\n# 연산자 메소드1\n# midterm + final과 동일한 결과\nprint(midterm.add(final))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         english   math  science\nAlice        NaN  180.0      NaN\nBob          NaN    NaN      NaN\nCharlie      NaN  166.0      NaN\nDavid        NaN    NaN      NaN\n```\n:::\n:::\n\n\n::: {#13f9cb94 .cell execution_count=27}\n``` {.python .cell-code}\n# 연산자 메소드2\n# 하나의 데이터프레임에만 값이 있는 경우 0으로 처리하고, 둘 다 값이 없으면 NaN 반환\nprint(midterm.add(final, fill_value = 0))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         english   math  science\nAlice       95.0  180.0     88.0\nBob          NaN   90.0     92.0\nCharlie     80.0  166.0     79.0\nDavid       88.0   82.0      NaN\n```\n:::\n:::\n\n\n<br>\n\n### 6.3.3. 새로운 열 생성\n|함수|설명|\n|:---:|:---------------|\n|assign()|기존 데이터프레임을 수정하지 않고, 새로운 열을 추가한 복사본을 반환|\n|eval()|수식을 문자열로 작성하여 열 간 계산을 간결하게 수행(직관적인 수식 표현)|\n|where()|조건에 따라 서로 다른 값을 선택하여 새로운 열 생성(NumPy 메소드)|\n\n<br>\n\n::: {#9e557882 .cell execution_count=28}\n``` {.python .cell-code}\ndf = pd.DataFrame({\n    'product': ['A', 'B', 'C', 'D', 'E'],\n    'price': [100, 200, 150, 300, 250],\n    'quantity': [10, 5, 3, 7, 6]\n})\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  product  price  quantity\n0       A    100        10\n1       B    200         5\n2       C    150         3\n3       D    300         7\n4       E    250         6\n```\n:::\n:::\n\n\n::: {#ce3ca216 .cell execution_count=29}\n``` {.python .cell-code}\n# 새로운 열 생성1: 기본 할당\n# 기본 할당은 데이터를 직접 수정하므로, 권장하지 않음\ndf['total_price'] = df['price'] * df['quantity']\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  product  price  quantity  total_price\n0       A    100        10         1000\n1       B    200         5         1000\n2       C    150         3          450\n3       D    300         7         2100\n4       E    250         6         1500\n```\n:::\n:::\n\n\n::: {#b2cdd603 .cell execution_count=30}\n``` {.python .cell-code}\n# 새로운 열 생성2: assign() 사용\nprint(df.assign(total_price = df['price'] * df['quantity']))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  product  price  quantity  total_price\n0       A    100        10         1000\n1       B    200         5         1000\n2       C    150         3          450\n3       D    300         7         2100\n4       E    250         6         1500\n```\n:::\n:::\n\n\n::: {#a144ccd2 .cell execution_count=31}\n``` {.python .cell-code}\n# 새로운 열 생성3: eval() 사용\n# inplace=True: 기존 데이터프레임에 직접 적용(새 객체를 반환하지 않음)\ndf.eval('total_price = price * quantity', inplace=True)\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  product  price  quantity  total_price\n0       A    100        10         1000\n1       B    200         5         1000\n2       C    150         3          450\n3       D    300         7         2100\n4       E    250         6         1500\n```\n:::\n:::\n\n\n::: {#57ffea6b .cell execution_count=32}\n``` {.python .cell-code}\n# 새로운 열 생성4: where() 사용\n# 가격이 200 이상이면 'Expensive', 아니면 'Affordable'로 구분\ndf['price_category'] = np.where(df['price'] >= 200, 'Expensive', 'Affordable')\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  product  price  quantity  total_price price_category\n0       A    100        10         1000     Affordable\n1       B    200         5         1000      Expensive\n2       C    150         3          450     Affordable\n3       D    300         7         2100      Expensive\n4       E    250         6         1500      Expensive\n```\n:::\n:::\n\n\n<br>\n\n### 6.3.4. 데이터프레임 집계\n+ NumPy와 동일한 축 개념 사용\n  + axis 0 : 행 방향 연산(열 단위로 요약)\n  + axis 1 : 열 방향 연산(행 단위로 요약)\n+ 수치형 데이터에 적용되며, NaN은 기본적으로 제외됨\n\n<br>\n\n|함수|설명|\n|:---:|:------------|\n|count()|NaN를 제외한 행의 개수|\n|value_counts()|집단별 빈도|\n|describe()|요약 통계량|\n|sum()|합계|\n|mean()|평균|\n|std()|표준편차|\n|median()|중앙값|\n|min(), max()|최소값, 최대값|\n|cumsum(), cumprod()|누적 합계, 누적 곱|\n\n<br>\n\n::: {#31a84783 .cell execution_count=33}\n``` {.python .cell-code}\n## 실습 데이터 : tips 데이터셋\nimport seaborn as sns\ntips = sns.load_dataset('tips')\n```\n:::\n\n\n::: {#18c08093 .cell execution_count=34}\n``` {.python .cell-code}\n# total_bill: 식사 금액\n# tip: 팁 금액\n# sex: 성별\n# smoker: 흡연 여부\n# day: 요일\n# time: 식사 시간(Lunch, Dinner)\n# size: 식사 인원 수\nprint(tips.info())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 244 entries, 0 to 243\nData columns (total 7 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   total_bill  244 non-null    float64 \n 1   tip         244 non-null    float64 \n 2   sex         244 non-null    category\n 3   smoker      244 non-null    category\n 4   day         244 non-null    category\n 5   time        244 non-null    category\n 6   size        244 non-null    int64   \ndtypes: category(4), float64(2), int64(1)\nmemory usage: 7.4 KB\nNone\n```\n:::\n:::\n\n\n::: {#19c62ca4 .cell execution_count=35}\n``` {.python .cell-code}\nprint(tips.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   total_bill   tip     sex smoker  day    time  size\n0       16.99  1.01  Female     No  Sun  Dinner     2\n1       10.34  1.66    Male     No  Sun  Dinner     3\n2       21.01  3.50    Male     No  Sun  Dinner     3\n3       23.68  3.31    Male     No  Sun  Dinner     2\n4       24.59  3.61  Female     No  Sun  Dinner     4\n```\n:::\n:::\n\n\n::: {#d7132bbf .cell execution_count=36}\n``` {.python .cell-code}\nprint(tips.describe())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       total_bill         tip        size\ncount  244.000000  244.000000  244.000000\nmean    19.785943    2.998279    2.569672\nstd      8.902412    1.383638    0.951100\nmin      3.070000    1.000000    1.000000\n25%     13.347500    2.000000    2.000000\n50%     17.795000    2.900000    2.000000\n75%     24.127500    3.562500    3.000000\nmax     50.810000   10.000000    6.000000\n```\n:::\n:::\n\n\n::: {#32142125 .cell execution_count=37}\n``` {.python .cell-code}\n# 각 열의 유효한 데이터 수 (NaN 제외)\nprint(tips.count())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntotal_bill    244\ntip           244\nsex           244\nsmoker        244\nday           244\ntime          244\nsize          244\ndtype: int64\n```\n:::\n:::\n\n\n::: {#2bfced1c .cell execution_count=38}\n``` {.python .cell-code}\n# 식사 시간별 주문 수\nprint(tips.value_counts('time'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntime\nDinner    176\nLunch      68\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {#cedb45e2 .cell execution_count=39}\n``` {.python .cell-code}\n# 전체(합계) 식사 금액, 팁 금액, 식사 인원 수\nprint(tips[['total_bill', 'tip', 'size']].sum())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntotal_bill    4827.77\ntip            731.58\nsize           627.00\ndtype: float64\n```\n:::\n:::\n\n\n::: {#d7425c0c .cell execution_count=40}\n``` {.python .cell-code}\n# 고객 1인당 평균 식사 금액\nprint((tips['total_bill'] / tips['size']).mean())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n7.888229508196722\n```\n:::\n:::\n\n\n::: {#6a34774a .cell execution_count=41}\n``` {.python .cell-code}\n# 고객 1인당 평균 팁 금액\nprint((tips['tip'] / tips['size']).mean())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.2127616120218578\n```\n:::\n:::\n\n\n::: {#352dad99 .cell execution_count=42}\n``` {.python .cell-code}\n# 전체 식사 금액에서 팁이 차지하는 비율\nprint(tips['tip'] / tips['total_bill'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0      0.059447\n1      0.160542\n2      0.166587\n3      0.139780\n4      0.146808\n         ...   \n239    0.203927\n240    0.073584\n241    0.088222\n242    0.098204\n243    0.159744\nLength: 244, dtype: float64\n```\n:::\n:::\n\n\n::: {#9e5376ed .cell execution_count=43}\n``` {.python .cell-code}\n# 전체 식사 금액에서 팁이 차지하는 비율에 대한 요약 통계량\nprint((tips['tip'] / tips['total_bill']).describe())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncount    244.000000\nmean       0.160803\nstd        0.061072\nmin        0.035638\n25%        0.129127\n50%        0.154770\n75%        0.191475\nmax        0.710345\ndtype: float64\n```\n:::\n:::\n\n\n::: {#b32d4a81 .cell execution_count=44}\n``` {.python .cell-code}\n# 전체 식사 금액에서 팁이 차지하는 비율이 50% 이상인 경우\nprint(tips[tips['tip'] / tips['total_bill'] >= 0.5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     total_bill   tip   sex smoker  day    time  size\n172        7.25  5.15  Male    Yes  Sun  Dinner     2\n```\n:::\n:::\n\n\n<br>\n\n## 6.4. 고급 데이터 처리\n### 6.4.1. 집단별 연산\n+ `groupby()` 함수를 이용하여 특정 열을 기준으로 데이터를 집단화한 후, 다양한 연산 수행 가능\n+ SQL의 GROUP BY와 유사한 기능을 제공하며, 집계, 변환, 필터링을 지원\n\n<br>\n\n|함수|설명|\n|:---:|:------------|\n|aggregate() 또는 agg()|여러 집계 함수를 동시에 적용(문자열, 함수, 리스트 등 가능)|\n|filter()|집단별 집계 결과를 조건으로 집단 자체를 필터링|\n|transform()|집단별 연산 결과를 원래 구조와 같은 형태로 반환(원소 개수 유지)|\n|apply()|임의의 함수를 전체 집단에 유연하게 적용(집계, 반환 모두 가능)|\n\n<br>\n\n::: {#6be22ed3 .cell execution_count=45}\n``` {.python .cell-code}\n#  실습 데이터 : tips 데이터셋\ntips = sns.load_dataset('tips')\n```\n:::\n\n\n::: {#7f3d90c1 .cell execution_count=46}\n``` {.python .cell-code}\n# 요일별 평균 식사 금액\n# observed=False: 모든 범주 포함, 실제 데이터가 없으면 NaN\nprint(tips.groupby('day', observed=False)['total_bill'].mean())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nday\nThur    17.682742\nFri     17.151579\nSat     20.441379\nSun     21.410000\nName: total_bill, dtype: float64\n```\n:::\n:::\n\n\n::: {#6e1e9cbc .cell execution_count=47}\n``` {.python .cell-code}\n# 식사 시간별 식사 금액, 팁 금액의 평균 및 표준편차\nprint(tips.groupby('time', observed=False)[['total_bill', 'tip']].agg(['mean', 'std']))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       total_bill                 tip          \n             mean       std      mean       std\ntime                                           \nLunch   17.168676  7.713882  2.728088  1.205345\nDinner  20.797159  9.142029  3.102670  1.436243\n```\n:::\n:::\n\n\n::: {#79556315 .cell execution_count=48}\n``` {.python .cell-code}\n# 식사 시간별 식사 금액의 최대값, 팁 금액의 최소값: 딕셔너리 사용\nprint(tips.groupby('time', observed=False).agg({'total_bill': 'max', 'tip': 'min'}).reset_index())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     time  total_bill   tip\n0   Lunch       43.11  1.25\n1  Dinner       50.81  1.00\n```\n:::\n:::\n\n\n::: {#95bee7e9 .cell execution_count=49}\n``` {.python .cell-code}\n# 식사 시간별 식사 금액의 최대값, 팁 금액의 최소값: 튜플 사용, named aggregation 문법\nprint(tips.groupby('time', observed=False).agg(total_bill_max = ('total_bill', 'max'), tip_min = ('tip', 'min')).reset_index())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     time  total_bill_max  tip_min\n0   Lunch           43.11     1.25\n1  Dinner           50.81     1.00\n```\n:::\n:::\n\n\n<br>\n\n+ [참고] 람다 함수(lamdba function)\n  + 함수 이름 없이 일시적으로 정의해 사용할 수 있는 익명 함수\n  + `def`, `return` 없이 간단한 함수 로직을 한 줄로 표현\n  + 구조는 일반 함수와 같지만, 주로 짧고 단순한 연산에 사용\n  + `apply()`, `filter()` 등 함수의 인수로 전달할 때 유용하게 활용\n\n<br>\n\n::: {#d0b01dbc .cell execution_count=50}\n``` {.python .cell-code}\n# 함수 정의\ndef f(x, y):\n    return x + y\nf(1, 4)\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\n5\n```\n:::\n:::\n\n\n::: {#b2986a09 .cell execution_count=51}\n``` {.python .cell-code}\n# 람다 함수\n(lambda x, y: x + y)(1, 4)\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\n5\n```\n:::\n:::\n\n\n::: {#6f82fab5 .cell execution_count=52}\n``` {.python .cell-code}\n# 팀 금액 평균이 3달러 이상인 요일 데이터 필터링: 함수 정의\ndef filter_tip_avg(x):\n    return x['tip'].mean() >= 3\n\nprint(tips.groupby('day', observed=False).filter(filter_tip_avg))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     total_bill   tip     sex smoker  day    time  size\n0         16.99  1.01  Female     No  Sun  Dinner     2\n1         10.34  1.66    Male     No  Sun  Dinner     3\n2         21.01  3.50    Male     No  Sun  Dinner     3\n3         23.68  3.31    Male     No  Sun  Dinner     2\n4         24.59  3.61  Female     No  Sun  Dinner     4\n..          ...   ...     ...    ...  ...     ...   ...\n186       20.90  3.50  Female    Yes  Sun  Dinner     3\n187       30.46  2.00    Male    Yes  Sun  Dinner     5\n188       18.15  3.50  Female    Yes  Sun  Dinner     3\n189       23.10  4.00    Male    Yes  Sun  Dinner     3\n190       15.69  1.50    Male    Yes  Sun  Dinner     2\n\n[76 rows x 7 columns]\n```\n:::\n:::\n\n\n::: {#ab3bab6c .cell execution_count=53}\n``` {.python .cell-code}\n# 팀 금액 평균이 3달러 이상인 요일 데이터 필터링: 람다 함수 사용\nprint(tips.groupby('day', observed=False).filter(lambda x: x['tip'].mean() >= 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     total_bill   tip     sex smoker  day    time  size\n0         16.99  1.01  Female     No  Sun  Dinner     2\n1         10.34  1.66    Male     No  Sun  Dinner     3\n2         21.01  3.50    Male     No  Sun  Dinner     3\n3         23.68  3.31    Male     No  Sun  Dinner     2\n4         24.59  3.61  Female     No  Sun  Dinner     4\n..          ...   ...     ...    ...  ...     ...   ...\n186       20.90  3.50  Female    Yes  Sun  Dinner     3\n187       30.46  2.00    Male    Yes  Sun  Dinner     5\n188       18.15  3.50  Female    Yes  Sun  Dinner     3\n189       23.10  4.00    Male    Yes  Sun  Dinner     3\n190       15.69  1.50    Male    Yes  Sun  Dinner     2\n\n[76 rows x 7 columns]\n```\n:::\n:::\n\n\n::: {#4e90cdba .cell execution_count=54}\n``` {.python .cell-code}\n# 성별 팁 금액의 편차\ntips['tip_dev'] = tips.groupby('sex', observed=False)['tip'].transform(lambda x: x - x.mean())\nprint(tips[['sex', 'tip', 'tip_dev']].head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      sex   tip   tip_dev\n0  Female  1.01 -1.823448\n1    Male  1.66 -1.429618\n2    Male  3.50  0.410382\n3    Male  3.31  0.220382\n4  Female  3.61  0.776552\n```\n:::\n:::\n\n\n::: {#a2ffc65f .cell execution_count=55}\n``` {.python .cell-code}\n# 식사 시간별 팁 금액의 사분위수범위: 함수 정의\ndef iqr(x):\n    return x.quantile(0.75) - x.quantile(0.25)\n\nprint(tips.groupby('time', observed=False)['tip'].apply(iqr))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntime\nLunch     1.2875\nDinner    1.6875\nName: tip, dtype: float64\n```\n:::\n:::\n\n\n::: {#605960f5 .cell execution_count=56}\n``` {.python .cell-code}\n# 식사 시간별 팁 금액의 사분위수범위: 람다 함수 사용\nprint(tips.groupby('time', observed=False)['tip'].apply(lambda x: x.quantile(0.75) - x.quantile(0.25)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntime\nLunch     1.2875\nDinner    1.6875\nName: tip, dtype: float64\n```\n:::\n:::\n\n\n<br>\n\n### 6.4.2. 표현식 기반 처리\n+ eval(), query() 메소드를 사용하면 문자열 형태의 표현식을 통해 데이터를 보다 직관적으로 처리 가능\n+ 복잡한 연산이나 조건 필터링을 간결하게 표현할 수 있어 가독성과 성능 모두에 유리함\n  + 데이터프레임의 열 이름을 따옴표 없이 사용 가능\n  + 외부 변수는 `@` 기호를 사용하여 표현식에 표현 가능\n\n<br>\n\n|함수|설명|\n|:---:|:---------------|\n|eval()|- 문자열로 작성한 수식을 이용하여 기존 열을 연산하거나 새로운 열을 생성 <br>- Python 표현식을 그대로 사용할 수 있어 가독성이 높음|\n|query()|- 문자열로 작성한 조건식을 이용하여 행을 필터링<br>- 복잡한 불리언 인덱싱보다 간결하고 직관적인 문법 제공 <br>- 논리 연산자는 `&`, `\\|`, `~`의 사용을 권장하며, 각 조건은 괄호 ()로 감싸야 함|\n\n<br>\n\n::: {#5ad9be70 .cell execution_count=57}\n``` {.python .cell-code}\n#  실습 데이터 : tips 데이터셋\ntips = sns.load_dataset('tips')\n```\n:::\n\n\n::: {#422f0092 .cell execution_count=58}\n``` {.python .cell-code}\n# 기존 열 연산: 식사 금액에서 세금 10%를 제외한 실수령 금액\nprint(tips.eval('total_bill = total_bill * 0.9'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     total_bill   tip     sex smoker   day    time  size\n0        15.291  1.01  Female     No   Sun  Dinner     2\n1         9.306  1.66    Male     No   Sun  Dinner     3\n2        18.909  3.50    Male     No   Sun  Dinner     3\n3        21.312  3.31    Male     No   Sun  Dinner     2\n4        22.131  3.61  Female     No   Sun  Dinner     4\n..          ...   ...     ...    ...   ...     ...   ...\n239      26.127  5.92    Male     No   Sat  Dinner     3\n240      24.462  2.00  Female    Yes   Sat  Dinner     2\n241      20.403  2.00    Male    Yes   Sat  Dinner     2\n242      16.038  1.75    Male     No   Sat  Dinner     2\n243      16.902  3.00  Female     No  Thur  Dinner     2\n\n[244 rows x 7 columns]\n```\n:::\n:::\n\n\n::: {#c789a6a2 .cell execution_count=59}\n``` {.python .cell-code}\n# 새로운 열 생성: 전체 식사 금액 대비 팁 금액 비율\n# inplace=True: 기존 데이터프레임에 직접 적용(새 객체를 반환하지 않음)\ntips.eval('tip_rate = tip / total_bill', inplace=True)\nprint(tips)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     total_bill   tip     sex smoker   day    time  size  tip_rate\n0         16.99  1.01  Female     No   Sun  Dinner     2  0.059447\n1         10.34  1.66    Male     No   Sun  Dinner     3  0.160542\n2         21.01  3.50    Male     No   Sun  Dinner     3  0.166587\n3         23.68  3.31    Male     No   Sun  Dinner     2  0.139780\n4         24.59  3.61  Female     No   Sun  Dinner     4  0.146808\n..          ...   ...     ...    ...   ...     ...   ...       ...\n239       29.03  5.92    Male     No   Sat  Dinner     3  0.203927\n240       27.18  2.00  Female    Yes   Sat  Dinner     2  0.073584\n241       22.67  2.00    Male    Yes   Sat  Dinner     2  0.088222\n242       17.82  1.75    Male     No   Sat  Dinner     2  0.098204\n243       18.78  3.00  Female     No  Thur  Dinner     2  0.159744\n\n[244 rows x 8 columns]\n```\n:::\n:::\n\n\n::: {#4197587a .cell execution_count=60}\n``` {.python .cell-code}\n# 외부 변수 사용: 전체 식사 금액에 따른 기본(최소) 팁 금액\ntip_percentage = 0.15\ntips.eval('min_tip = total_bill * @tip_percentage', inplace = True)\nprint(tips)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     total_bill   tip     sex smoker   day    time  size  tip_rate  min_tip\n0         16.99  1.01  Female     No   Sun  Dinner     2  0.059447   2.5485\n1         10.34  1.66    Male     No   Sun  Dinner     3  0.160542   1.5510\n2         21.01  3.50    Male     No   Sun  Dinner     3  0.166587   3.1515\n3         23.68  3.31    Male     No   Sun  Dinner     2  0.139780   3.5520\n4         24.59  3.61  Female     No   Sun  Dinner     4  0.146808   3.6885\n..          ...   ...     ...    ...   ...     ...   ...       ...      ...\n239       29.03  5.92    Male     No   Sat  Dinner     3  0.203927   4.3545\n240       27.18  2.00  Female    Yes   Sat  Dinner     2  0.073584   4.0770\n241       22.67  2.00    Male    Yes   Sat  Dinner     2  0.088222   3.4005\n242       17.82  1.75    Male     No   Sat  Dinner     2  0.098204   2.6730\n243       18.78  3.00  Female     No  Thur  Dinner     2  0.159744   2.8170\n\n[244 rows x 9 columns]\n```\n:::\n:::\n\n\n::: {#a1c339b8 .cell execution_count=61}\n``` {.python .cell-code}\n# 기본(최소) 팁 금액보다 적게 준 경우 'Below', 많거나 같은 경우 'Above'로 구분\n# 기본(최소) 팁 금액보다 적게 준 경우는 108팀임\ntips['tip_group'] = np.where(tips['tip'] < tips['min_tip'], 'Below', 'Above')\nprint(tips['tip_group'].value_counts())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntip_group\nAbove    136\nBelow    108\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {#76f36c03 .cell execution_count=62}\n``` {.python .cell-code}\n# 단일 조건 필터링: 식사 금액이 20달러 이상인 경우\nprint(tips.query('total_bill >= 20'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     total_bill   tip     sex smoker  day    time  size  tip_rate  min_tip  \\\n2         21.01  3.50    Male     No  Sun  Dinner     3  0.166587   3.1515   \n3         23.68  3.31    Male     No  Sun  Dinner     2  0.139780   3.5520   \n4         24.59  3.61  Female     No  Sun  Dinner     4  0.146808   3.6885   \n5         25.29  4.71    Male     No  Sun  Dinner     4  0.186240   3.7935   \n7         26.88  3.12    Male     No  Sun  Dinner     4  0.116071   4.0320   \n..          ...   ...     ...    ...  ...     ...   ...       ...      ...   \n237       32.83  1.17    Male    Yes  Sat  Dinner     2  0.035638   4.9245   \n238       35.83  4.67  Female     No  Sat  Dinner     3  0.130338   5.3745   \n239       29.03  5.92    Male     No  Sat  Dinner     3  0.203927   4.3545   \n240       27.18  2.00  Female    Yes  Sat  Dinner     2  0.073584   4.0770   \n241       22.67  2.00    Male    Yes  Sat  Dinner     2  0.088222   3.4005   \n\n    tip_group  \n2       Above  \n3       Below  \n4       Below  \n5       Above  \n7       Below  \n..        ...  \n237     Below  \n238     Below  \n239     Above  \n240     Below  \n241     Below  \n\n[97 rows x 10 columns]\n```\n:::\n:::\n\n\n::: {#0c5dae38 .cell execution_count=63}\n``` {.python .cell-code}\n# 다중 조건 필터링: 식사 인원 수가 3명 이상이고, 목요일에 방문한 경우\n#print(tips.query('size >= 3 and day == \"Thur\"'))           # 권장하지 않음, 조건이 복잡할 경우 오류가 발생할 수 있음\nprint(tips.query('(size >= 3) & (day == \"Thur\")'))          # 권장 방식: 괄호로 각 조건을 명확히 구분\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     total_bill   tip     sex smoker   day   time  size  tip_rate  min_tip  \\\n77        27.20  4.00    Male     No  Thur  Lunch     4  0.147059   4.0800   \n85        34.83  5.17  Female     No  Thur  Lunch     4  0.148435   5.2245   \n119       24.08  2.92  Female     No  Thur  Lunch     4  0.121262   3.6120   \n125       29.80  4.20  Female     No  Thur  Lunch     6  0.140940   4.4700   \n129       22.82  2.18    Male     No  Thur  Lunch     3  0.095530   3.4230   \n141       34.30  6.70    Male     No  Thur  Lunch     6  0.195335   5.1450   \n142       41.19  5.00    Male     No  Thur  Lunch     5  0.121389   6.1785   \n143       27.05  5.00  Female     No  Thur  Lunch     6  0.184843   4.0575   \n146       18.64  1.36  Female     No  Thur  Lunch     3  0.072961   2.7960   \n197       43.11  5.00  Female    Yes  Thur  Lunch     4  0.115982   6.4665   \n200       18.71  4.00    Male    Yes  Thur  Lunch     3  0.213789   2.8065   \n204       20.53  4.00    Male    Yes  Thur  Lunch     4  0.194837   3.0795   \n205       16.47  3.23  Female    Yes  Thur  Lunch     3  0.196114   2.4705   \n\n    tip_group  \n77      Below  \n85      Below  \n119     Below  \n125     Below  \n129     Below  \n141     Above  \n142     Below  \n143     Above  \n146     Below  \n197     Below  \n200     Above  \n204     Above  \n205     Above  \n```\n:::\n:::\n\n\n::: {#2f139900 .cell execution_count=64}\n``` {.python .cell-code}\n# 외부 변수 사용: 기준 팁 금액 미만인 경우\nmin_tip_required = 5\nprint(tips.query('tip < @min_tip_required'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     total_bill   tip     sex smoker   day    time  size  tip_rate  min_tip  \\\n0         16.99  1.01  Female     No   Sun  Dinner     2  0.059447   2.5485   \n1         10.34  1.66    Male     No   Sun  Dinner     3  0.160542   1.5510   \n2         21.01  3.50    Male     No   Sun  Dinner     3  0.166587   3.1515   \n3         23.68  3.31    Male     No   Sun  Dinner     2  0.139780   3.5520   \n4         24.59  3.61  Female     No   Sun  Dinner     4  0.146808   3.6885   \n..          ...   ...     ...    ...   ...     ...   ...       ...      ...   \n238       35.83  4.67  Female     No   Sat  Dinner     3  0.130338   5.3745   \n240       27.18  2.00  Female    Yes   Sat  Dinner     2  0.073584   4.0770   \n241       22.67  2.00    Male    Yes   Sat  Dinner     2  0.088222   3.4005   \n242       17.82  1.75    Male     No   Sat  Dinner     2  0.098204   2.6730   \n243       18.78  3.00  Female     No  Thur  Dinner     2  0.159744   2.8170   \n\n    tip_group  \n0       Below  \n1       Above  \n2       Above  \n3       Below  \n4       Below  \n..        ...  \n238     Below  \n240     Below  \n241     Below  \n242     Below  \n243     Above  \n\n[216 rows x 10 columns]\n```\n:::\n:::\n\n\n::: {#7dc799b3 .cell execution_count=65}\n``` {.python .cell-code}\n# 기준 팁 금액보다 적게 준 경우는 216팀임\nprint(tips.query('tip < @min_tip_required').shape[0])\nprint(len(tips.query('tip < @min_tip_required')))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n216\n216\n```\n:::\n:::\n\n\n",
    "supporting": [
      "6_pandas_files"
    ],
    "filters": [],
    "includes": {}
  }
}