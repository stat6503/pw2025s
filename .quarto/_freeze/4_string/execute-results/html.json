{
  "hash": "c4b221e84846c1cebe12b153f4491410",
  "result": {
    "engine": "jupyter",
    "markdown": "---\njupyter: python3\n---\n\n\n\n\n<h1>4. 문자열 처리</h1>\n<br>\n\n## 4.1. 문자열 생성\n+ 문자열(string)\n  + 문자(character)들이 나열된 시퀀스 자료형(sequence data type)\n  + 한 번 생성된 이후에는 수정할 수 없는 불변형(immutable) 객체\n  + 큰 따옴표 또는 작은 따옴표로 감싸서 문자열을 생성함\n\n<br>\n\n+ 이스케이프 문자(escape character)\n  + `\\` 기호와 함께 조합해서 사용하는 특수한 문자\n  + `\\\"` : 큰 따옴표\n  + `\\'` : 작은 따옴표\n  + `\\n` : 줄 바꿈(new line)\n  + `\\t` : 탭(tab)\n\n<br>\n\n::: {#660c2ca6 .cell execution_count=1}\n``` {.python .cell-code}\n# 문자열 생성\nprint(\"안녕하세요\")\nprint('Hello')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n안녕하세요\nHello\n```\n:::\n:::\n\n\n::: {#731cf8a6 .cell execution_count=2}\n``` {.python .cell-code}\n# 문자열 내부에 따옴표 넣기\nprint('\"안녕하세요\"라고 말했습니다.')\nprint(\"'날씨가 좋다'라고 생각했습니다.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\"안녕하세요\"라고 말했습니다.\n'날씨가 좋다'라고 생각했습니다.\n```\n:::\n:::\n\n\n::: {#0ad0ea50 .cell execution_count=3}\n``` {.python .cell-code}\n# 이스케이프 문자 사용1\nprint(\"\\\"안녕하세요\\\"라고 말했습니다.\")\nprint('\\'날씨가 좋다\\'라고 생각했습니다.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\"안녕하세요\"라고 말했습니다.\n'날씨가 좋다'라고 생각했습니다.\n```\n:::\n:::\n\n\n::: {#02cea782 .cell execution_count=4}\n``` {.python .cell-code}\n# 이스케이프 문자 사용2\nprint(\"Hello\\nWorld\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello\nWorld\n```\n:::\n:::\n\n\n::: {#222df583 .cell execution_count=5}\n``` {.python .cell-code}\n# 이스케이프 문자 사용3\nprint(\"Hello\\tWorld\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello\tWorld\n```\n:::\n:::\n\n\n::: {#78bcdb3b .cell execution_count=6}\n``` {.python .cell-code}\n# 여러 줄 문자열 만들기 : 세 번 반복한 따옴표로 감쌈\nprint(\"\"\"동해물과 백두산이 마르고 닳도록\n하느님이 보우하사 우리나라 만세\n무궁화 삼천리 화려강산\n대한사람 대한으로 길이 보전하세\"\"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n동해물과 백두산이 마르고 닳도록\n하느님이 보우하사 우리나라 만세\n무궁화 삼천리 화려강산\n대한사람 대한으로 길이 보전하세\n```\n:::\n:::\n\n\n<br>\n\n## 4.2. 문자열 연산\n+ 문자열 연결 연산자 `+` : 두 문자열을 연결해서 새로운 문자열 생성\n+ 문자열 반복 연산자 `*` : 문자열을 숫자만큼 반복하여 새로운 문자열 생성 - (예) 문자열\\*숫자\n\n<br>\n\n::: {#6e342d74 .cell execution_count=7}\n``` {.python .cell-code}\n# 문자열 연결\nprint(\"Hello \" + \"Wolrld\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello Wolrld\n```\n:::\n:::\n\n\n::: {#ad1ebff5 .cell execution_count=8}\n``` {.python .cell-code}\n# 문자열 연결 연산자는 문자열과 숫자를 연결할 수 없음\n#score = 99\n#print(\"성적은\" + score + \"입니다.\")\n```\n:::\n\n\n::: {#18c4fc16 .cell execution_count=9}\n``` {.python .cell-code}\n# 문자열 연결 연산자로 문자열과 숫자를 연결하려면 숫자를 문자열로 변환해야 함\nscore = 99\nprint(\"성적은\" + str(score) + \"입니다.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n성적은99입니다.\n```\n:::\n:::\n\n\n::: {#ddd9836a .cell execution_count=10}\n``` {.python .cell-code}\n# 문자열 반복\nprint(\"Hello \" * 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello Hello Hello \n```\n:::\n:::\n\n\n<br>\n\n## 4.3. 인덱싱과 슬라이싱\n+ 문자열의 각 문자에 접근할 때 문자 위치인 인덱스(index)를 사용함\n  + Python은 숫자를 0부터 세는 제로 인덱스(zero index) 유형을 사용함\n\n<br>\n\n+ 인덱싱(indexing)\n  + `[index]`를 사용하여 문자열의 특정 위치에 있는 항목(문자)에 접근하는 것\n  + 리버스 인덱싱(reverse indexing) : 음수 인덱스를 사용하면 마지막 값부터 -1씩 감소하여 역순으로 접근할 수 있음\n\n<br>\n\n+ 슬라이싱(slicing)\n  + `[(start index):(stop index)]`를 이용하여 문자열의 일부 문자를 추출하는 것\n  + 끝 인덱스는 포함하지 않으니 주의해야 함\n  + 시작 인덱스를 생략하면 첫 번째 글자부터 추출하며, 끝 인덱스를 생략하면 가장 마지막 글자까지 추출함\n\n<br>\n\n![](./images/fig4-1.png){width=60%}\n\n<br>\n\n::: {#3c04f976 .cell execution_count=11}\n``` {.python .cell-code}\n# 문자열 인덱싱1\ns = \"안녕하세요\"\nprint(s[0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n안\n```\n:::\n:::\n\n\n::: {#6228176e .cell execution_count=12}\n``` {.python .cell-code}\n# 문자열 인덱싱2\ns = \"안녕하세요\"\nprint(s[-1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n요\n```\n:::\n:::\n\n\n::: {#6747b479 .cell execution_count=13}\n``` {.python .cell-code}\n# 문자열 슬라이싱1\ns = \"안녕하세요\"\nprint(s[0:2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n안녕\n```\n:::\n:::\n\n\n::: {#635e3d6d .cell execution_count=14}\n``` {.python .cell-code}\n# 문자열 슬라이싱2\ns = \"안녕하세요\"\nprint(s[:2])\nprint(s[2:])\nprint(s[::2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n안녕\n하세요\n안하요\n```\n:::\n:::\n\n\n::: {#a545b12b .cell execution_count=15}\n``` {.python .cell-code}\n# 문자열은 불변형 객체이므로 인덱스를 이용한 수정은 불가능함\n#s = \"안녕하세요\"\n#s[2:5] = \"하십니까\"\n#print(s)\n```\n:::\n\n\n::: {#0fff1d9b .cell execution_count=16}\n``` {.python .cell-code}\n# 문자열을 변경하려면 새로운 문자열을 만들어야 함\ns = \"안녕하세요\"\ns = s[:2] + \"하십니까\"\nprint(s)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n안녕하십니까\n```\n:::\n:::\n\n\n::: {#c2c00380 .cell execution_count=17}\n``` {.python .cell-code}\n# 문자열 거꾸로 출력하기\nmy_str = \"Hello Python!\"\nprint(my_str[::-1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n!nohtyP olleH\n```\n:::\n:::\n\n\n<br>\n\n## 4.4. 문자열 함수\n### 4.4.1. 문자열 길이\n+ `len()` 함수 : 문자열에 들어있는 문자의 개수(문자열의 길이) 반환\n\n<br>\n\n::: {#2b2adb0f .cell execution_count=18}\n``` {.python .cell-code}\n# 문자열 길이\ns = \"안녕하세요\"\nprint(len(s))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n```\n:::\n:::\n\n\n<br>\n\n### 4.4.2. 대소문자 변환\n|함수|설명|\n|:---:|:------------|\n|lower()|문자열의 알파벳을 모두 소문자로 변환|\n|upper()|문자열의 알파벳을 모두 대문자로 변환|\n\n<br>\n\n::: {#de380c1b .cell execution_count=19}\n``` {.python .cell-code}\n# 대소문자 변환 : 원본은 변하지 않음\ns = \"Hello Python!\"\nprint(s.lower())\nprint(s.upper())\nprint(s)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhello python!\nHELLO PYTHON!\nHello Python!\n```\n:::\n:::\n\n\n<br>\n\n### 4.4.3. 문자열 찾기\n|함수|설명|\n|:---:|:------------|\n|find()|- 문자열에서 특정 문자열을 왼쪽에서부터 찾아서 인덱스를 반환 <br>- 찾는 문자열이 없으면 -1을 반환|\n|rfind()|- 문자열에서 특정 문자열을 오른쪽에서부터 찾아서 인덱스를 반환 <br>- 찾는 문자열이 없으면 -1을 반환|\n|count()|- 문자열에서 특정 문자열의 개수를 반환|\n|in 연산자|- 문자열 내부에 특정 문자열이 있다면 True, 없다면 False를 반환|\n\n<br>\n\n::: {#2f0a876e .cell execution_count=20}\n``` {.python .cell-code}\n# 문자열 찾기\ns = \"Hello! Python is Python\"\nprint(s.find(\"Python\"))\nprint(s.rfind(\"Python\"))\nprint(s.count(\"Python\"))\nprint(\"Hello\" in s)\nprint(\"Hi\" in s)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n7\n17\n2\nTrue\nFalse\n```\n:::\n:::\n\n\n<br>\n\n#### 4.4.4. 공백 제거 및 문자열 변경\n|함수|설명|\n|:---:|:------------|\n|strip()|문자열 양 옆의 공백이나 특정 문자를 제거|\n|rstrip()|문자열 오른쪽의 공백이나 특정 문자를 제거|\n|lstrip()|문자열 왼쪽의 공백이나 특정 문자를 제거|\n|replace()|특정 문자열을 다른 문자열로 변경|\n\n<br>\n\n::: {#2ae2c045 .cell execution_count=21}\n``` {.python .cell-code}\n# 공백 제거\ns = \"  Hello Python!  \"\nprint(s)\nprint(s.strip())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Hello Python!  \nHello Python!\n```\n:::\n:::\n\n\n::: {#1bfe7913 .cell execution_count=22}\n``` {.python .cell-code}\n# 특정 문자 제거\ns = \"##100kg, ##200kg\"\nprint(s.rstrip(\"kg\"))\nprint(s.lstrip(\"#\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n##100kg, ##200\n100kg, ##200kg\n```\n:::\n:::\n\n\n::: {#73e4c603 .cell execution_count=23}\n``` {.python .cell-code}\n# 문자열 변경\ns = \"Hello Python!\"\nprint(s.replace(\"Hello\", \"Hi\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHi Python!\n```\n:::\n:::\n\n\n<br>\n\n#### 4.4.5. 문자열 분리 및 결합\n|함수|설명|\n|:---:|:------------|\n|split()|- 특정문자를 기준으로 문자열을 분리하고 리스트로 반환|\n|join()|- 여러 문자열을 모아서 하나의 문자열로 만듬 <br>- 문자열을 구분할 구분자를 지정해야 함|\n\n<br>\n\n::: {#5548d267 .cell execution_count=24}\n``` {.python .cell-code}\n# 문자열 분리\ns = \"Hello Python!\"\ns.split(\" \")\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n['Hello', 'Python!']\n```\n:::\n:::\n\n\n::: {#f50277c8 .cell execution_count=25}\n``` {.python .cell-code}\n# 문자열 결합\nlst = [\"one\", \"two\", \"three\"]\nprint(\", \".join(lst))\nprint(\" - \".join(lst))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\none, two, three\none - two - three\n```\n:::\n:::\n\n\n<br>\n\n#### 4.4.6. 문자열 구성 파악\n|함수|설명|\n|:---:|:------------|\n|isdigit()|문자열이 숫자로만 구성되었는지 확인|\n|isalpha()|문자열이 알파벳으로만 구성되었는지 확인|\n|isalnum()|문자열이 알파벳과 숫자로만 구성되었는지 확인|\n|islower()|문자열이 소문자로만 구성되었는지 확인|\n|isupper()|문자열이 대문자로만 구성되었는지 확인|\n|isspace()|문자열이 공백으로만 구성되었는지 확인|\n\n<br>\n\n::: {#bc904797 .cell execution_count=26}\n``` {.python .cell-code}\n# 문자열 구성 파악\nprint(\"1234\".isdigit())\nprint(\"Python\".isalpha())\nprint(\"pass123\".isalnum())\nprint(\"hello\".islower())\nprint(\"HELLO\".isupper())\nprint(\"     \".isspace())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n```\n:::\n:::\n\n\n<br>\n\n### 4.4.7. 형 변환\n|함수|설명|\n|:---:|:------------|\n|str()|수를 문자열로 변환|\n|int()|정수 형식의 문자열이나 실수를 정수로 변환|\n|float()|실수 형식의 문자열이나 정수를 실수로 변환|\n\n<br>\n\n::: {#33d10572 .cell execution_count=27}\n``` {.python .cell-code}\n# 형 변환1\na = 1234\n#print(a + \"kg\")\nprint(str(a) + \"kg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1234kg\n```\n:::\n:::\n\n\n::: {#612e7277 .cell execution_count=28}\n``` {.python .cell-code}\n# 형 변환2\nprint(int(\"1234\"))\nprint(float(\"3.14\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1234\n3.14\n```\n:::\n:::\n\n\n<br>\n\n### 4.4.8. format() 함수\n\n> \"{자료형}\".format(인수)\n\n<br>\n\n+ `{}`를 포함한 문자열 뒤에 `.`을 찍고 `format()` 함수를 사용하여 문자열이 출력되는 형식을 지정할 수 있음\n  + 앞쪽에 있는 문자열 안의 `{}` 기호가 `format()` 함수의 매개변수로 차례로 대치되면서 숫자가 문자열이 됨\n  + `{}` 개수와 `format()` 함수의 매개변수 개수는 반드시 같아야 함\n+  f-string이 `format()` 함수보다 간단하고 직관적이므로, 대부분 f-string을 사용함\n\n<br>\n\n+ f-string보다 `format()` 함수를 사용하는 것이 더 좋은 경우\n  + 문자열 내용이 너무 많을 때 - 어떤 데이터를 출력하는지 모아서 볼 수 있어 더 유용함\n  + 데이터를 리스트에 담아서 사용할 때\n\n<br>\n\n::: {#2f137dbf .cell execution_count=29}\n``` {.python .cell-code}\n# format() 함수1\nprint(\"{}\".format(10))\nprint(\"{} {}\".format(10, 20))\nprint(\"{} {} {} {} {}\".format(10, 20, 30, 40, 50))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n10 20\n10 20 30 40 50\n```\n:::\n:::\n\n\n::: {#b59b5ec2 .cell execution_count=30}\n``` {.python .cell-code}\n# format() 함수2\nname = \"홍길동\"\nage = 20\nprint(f\"이름은 {name}이고, 나이는 {age}입니다.\")\nprint(\"이름은 {}이고, 나이는 {}입니다.\".format(name, age))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n이름은 홍길동이고, 나이는 20입니다.\n이름은 홍길동이고, 나이는 20입니다.\n```\n:::\n:::\n\n\n::: {#f8099490 .cell execution_count=31}\n``` {.python .cell-code}\n# format() 함수3\na = 4\nb = 3.14159265\nprint(\"20{:02d}\".format(a))                # a 값을 두자리로 출력하되 앞의 빈곳은 0으로 채움\nprint(\"{:.3f}\".format(b))                  # b 값을 소수점 이하 세자리로 반올림하여 출력\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2004\n3.142\n```\n:::\n:::\n\n\n::: {#0a5406c5 .cell execution_count=32}\n``` {.python .cell-code}\n# 데이터를 리스트에 담아서 사용할 때는 format() 함수를 사용하는 것이 더 좋음\ndata = [\"별\", 2, \"M\", \"Yes\"]\n\n# f-string 사용\nprint(f\"이름: {data[0]}, 나이: {data[1]}, 성별: {data[2]}, 중성화 여부: {data[3]}\")\n\n# format() 함수 사용\n# 전개 연산자 *를 사용하여 리스트 내용을 전개함\nprint(\"이름: {}, 나이: {}, 성별: {}, 중성화 여부: {}\".format(*data))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n이름: 별, 나이: 2, 성별: M, 중성화 여부: Yes\n이름: 별, 나이: 2, 성별: M, 중성화 여부: Yes\n```\n:::\n:::\n\n\n",
    "supporting": [
      "4_string_files"
    ],
    "filters": [],
    "includes": {}
  }
}