{
  "hash": "279b1e36435d74d3f6eb203b92cc7402",
  "result": {
    "engine": "jupyter",
    "markdown": "---\njupyter: python3\n---\n\n\n\n\n<h1>3. 자료구조</h1>\n<br>\n\n## 3.1. 자료구조\n### 3.1.1. 자료구조의 중요성\n+ 자료구조(data structure)\n  + 데이터를 효율적으로 저장하고 접근하기 위한 구조적 방식\n \n<br>\n\n+ 자료구조의 중요성\n  + 데이터 저장과 검색 효율화 : (예) 빠른 검색이 필요한 경우 딕셔너리 사용\n  + 연산 속도 최적화 : (예) 중복을 제거하는 경우 리스트보다 세트가 효율적임\n  + 메모리 사용 절약 : (예) 불변형 객체를 다룰 때는 리스트 대신 튜플 사용\n  + 코드 가독성 및 유지보수성 향상\n\n<br>\n\n### 3.1.2. Python 자료구조\n+ 대표적인 자료구조에는 리스트(list), 튜플(tuple), 세트(set), 딕셔너리(dictionary)가 있음\n\n|자료구조|설명|\n|:---:|:------------|\n|리스트(list)|여러 개의 값을 저장할 수 있는 순차적인 자료구조|\n|튜플(tuple)|리스트와 같지만 데이터의 변경을 허용하지 않는 자료구조|\n|세트(set)|데이터의 중복을 허용하지 않고, 수학의 집합 연산을 지원하는 자료구조|\n|딕셔너리(dictionary)|키(key)와 값(value)의 형태로 데이터를 저장하는 자료구조|\n\n<br>\n\n+ 자료구조 비교\n\n|자료구조|순서 유지|변경 가능|중복 허용|특징|\n|:------:|:---:|:---:|:---:|:------------------|\n|리스트(list)|○|○|○|가장 기본적인 자료구조, 인덱스로 접근|\n|튜플(tuple)|○|×|○|리스트와 유사하지만 불변형(immutable)|\n|세트(set)|×|○|×|중복 제거, 수학적 집합 연산 가능|\n|딕셔너리(dictionary)|○|○|△|키-값(key-value) 형태로 저장|\n\n<br>\n\n<br>\n\n## 3.2. 리스트\n### 3.2.1. 리스트 생성\n+ 리스트(list)\n  + 여러 개의 값을 저장할 수 있는 컬렉션 자료형(collection data type)\n  + 순서가 존재하는 시퀀스 자료형(sequence data type)\n  + 한 번 생성된 이후에도 수정할 수 있는 가변형(mutable) 객체\n  + 정수, 부동소수점수, 문자열, bool, 리스트, 튜플, 딕셔너리 등 다양한 자료형을 저장할 수 있는 컨테이너형 객체\n\n<br>\n\n+ 리스트 생성\n  + 리터럴 방식(list literal)\n    + `[]` 사용하여 리스트를 직접 정의하는 방법\n    + `[]` 안에 원소(element)를 `,`로 구분하여 나열함\n  + 생성자 방식(list constructor)\n    + `list()` 함수를 사용하여 리스트를 생성하는 방법\n    + 다른 iterable 객체(리스트, 튜플, 세트, 딕셔너리, 문자열 등)을 인수로 받아 리스트를 생성할 때 유용함\n\n<br>\n\n::: {#d81e9b70 .cell execution_count=1}\n``` {.python .cell-code}\n# 리스트 생성1\nlst = [1, 2, 3, 4, 5]\nprint(lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 4, 5]\n```\n:::\n:::\n\n\n::: {#3c2f8ae1 .cell execution_count=2}\n``` {.python .cell-code}\n# 리스트 생성2\nlst = list([1, 2, 3, 4, 5])\nprint(lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 4, 5]\n```\n:::\n:::\n\n\n::: {#552a6d23 .cell execution_count=3}\n``` {.python .cell-code}\n# 리스트 생성3 : 리스트는 다양한 자료형을 저장할 수 있음\nlst = [1, 3.14, \"Hello\", True, [11, 12, 13]]\nprint(lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 3.14, 'Hello', True, [11, 12, 13]]\n```\n:::\n:::\n\n\n::: {#d3c833c1 .cell execution_count=4}\n``` {.python .cell-code}\n# 리스트 생성4 : iterable 객체 사용\nlst = list(\"Hello\")\nprint(lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['H', 'e', 'l', 'l', 'o']\n```\n:::\n:::\n\n\n::: {#36dd15d8 .cell execution_count=5}\n``` {.python .cell-code}\n# 리스트 생성5 : iterable 객체 사용\nlst = list(range(10))\nprint(lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n:::\n:::\n\n\n<br>\n\n### 3.2.2. 리스트 연산\n+ 리스트 연결 연산자 `+` : 두 리스트를 연결해서 새로운 리스트 생성\n+ 리스트 반복 연산자 `*` : 리스트를 숫자만큼 반복하여 새로운 리스트 생성 - (예) 리스트\\*숫자\n\n<br>\n\n::: {#500c6a64 .cell execution_count=6}\n``` {.python .cell-code}\n# 리스트 연결\nlst1 = [1, 2, 3]\nlst2 = [11, 12, 13]\nprint(lst1 + lst2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 11, 12, 13]\n```\n:::\n:::\n\n\n::: {#d04b6d9c .cell execution_count=7}\n``` {.python .cell-code}\n# 리스트 반복\nprint(lst1 * 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 1, 2, 3, 1, 2, 3]\n```\n:::\n:::\n\n\n<br>\n\n### 3.2.3. 인덱싱과 슬라이싱\n+ 인덱싱(indexing) : `[index]`를 사용하여 리스트의 특정 위치에 있는 원소에 접근함\n+ 슬라이싱(slicing) : `[(start index):(stop index)]`를 사용하여 리스트의 일부 원소를 추출함\n  + `list[(start index):(end index)] = iterable`를 사용하면 `start:end`로 지정한 부분이 iterable 객체의 모든 원소로 대체됨\n  + 슬라이싱을 이용하여 기존 리스트의 일부를 삭제하거나, 새로운 원소를 추가 및 변경할 수 있음\n\n<br>\n\n![](./images/fig3-2.png){width=60%}\n\n<br>\n\n::: {#b93df626 .cell execution_count=8}\n``` {.python .cell-code}\n# 리스트 인덱싱1\nlst = [10, 20, 30, 40, 50]\nprint(lst[0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n```\n:::\n:::\n\n\n::: {#051c2c96 .cell execution_count=9}\n``` {.python .cell-code}\n# 리스트 인덱싱2\nlst = [10, 20, 30, 40, 50]\nprint(lst[-1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n50\n```\n:::\n:::\n\n\n::: {#4648a981 .cell execution_count=10}\n``` {.python .cell-code}\n# 리스트 접근 연산자 []를 이중으로 사용할 수 있음\nlst = [1, 3.14, \"Hello\", True, [11, 12, 13]]\nprint(lst[2])\nprint(lst[2][0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello\nH\n```\n:::\n:::\n\n\n::: {#0c0e2b6b .cell execution_count=11}\n``` {.python .cell-code}\n# 리스트 슬라이싱1\nlst = [10, 20, 30, 40, 50]\nprint(lst[0:2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[10, 20]\n```\n:::\n:::\n\n\n::: {#9ba7f998 .cell execution_count=12}\n``` {.python .cell-code}\n# 리스트 슬라이싱2\nlst = [10, 20, 30, 40, 50]\nprint(lst[:2])\nprint(lst[2:])\nprint(lst[::2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[10, 20]\n[30, 40, 50]\n[10, 30, 50]\n```\n:::\n:::\n\n\n::: {#ccad4180 .cell execution_count=13}\n``` {.python .cell-code}\n# 리스트는 가변형 객체이므로 인덱스를 이용한 수정이 가능함\nlst = [10, 20, 30, 40, 50]\nlst[2] = 3\nprint(lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[10, 20, 3, 40, 50]\n```\n:::\n:::\n\n\n::: {#8757ba37 .cell execution_count=14}\n``` {.python .cell-code}\n# 슬라이싱을 이용한 원소 삭제\nlst = [10, 20, 30, 40, 50]\nlst[1:4] = []                              # 빈 리스트를 할당하면 해당 부분이 삭제됨\nprint(lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[10, 50]\n```\n:::\n:::\n\n\n::: {#0738f3b1 .cell execution_count=15}\n``` {.python .cell-code}\n# 슬라이싱을 이용한 원소 추가\nlst = [10, 20, 30, 40, 50]\nlst[1:1] = [6, 7]                          # 인덱스 1 위치에 [6, 7]의 원소를 개별적으로 추가\nprint(lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[10, 6, 7, 20, 30, 40, 50]\n```\n:::\n:::\n\n\n::: {#a47f55d9 .cell execution_count=16}\n``` {.python .cell-code}\n# 슬라이싱을 이용한 원소 수정\nlst = [10, 20, 30, 40, 50]\nlst[1:3] = [6, 7, 8]                       # 인덱스 1~2 부분을 [6, 7, 8]로 수정\nprint(lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[10, 6, 7, 8, 40, 50]\n```\n:::\n:::\n\n\n<br>\n\n### 3.2.4. 중첩 리스트\n+ 리스트 안에 또 다른 리스트가 포함된 구조\n+ 2차원 리스트\n  + 모든 내부 리스트가 동일한 길이를 가진 경우\n  + 일반적으로 행(row)과 열(column)로 이루어짐\n  + 행렬(matrix)처럼 활용하거나, 데이터를 일정한 구조로 관리할 때 유용함\n\n<br>\n\n::: {#992e746e .cell execution_count=17}\n``` {.python .cell-code}\n# 중첩 리스트\nnested_lst = [\n    [1, 2, 3],\n    [4, 5, 6, 7],\n    [8, 9]\n]\n\nprint(nested_lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1, 2, 3], [4, 5, 6, 7], [8, 9]]\n```\n:::\n:::\n\n\n::: {#ed62af17 .cell execution_count=18}\n``` {.python .cell-code}\nfor items in nested_lst:\n    for item in items:\n        print(item)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n```\n:::\n:::\n\n\n::: {#da552621 .cell execution_count=19}\n``` {.python .cell-code}\n# 2차원 리스트\nkor = [80, 82, 75, 95]\neng = [67, 95, 84, 83]\nmath = [74, 88, 82, 76]\nmidterm = [kor, eng, math]\nprint(midterm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[80, 82, 75, 95], [67, 95, 84, 83], [74, 88, 82, 76]]\n```\n:::\n:::\n\n\n::: {#1535c351 .cell execution_count=20}\n``` {.python .cell-code}\n# 2차원 리스트 인덱싱\nmidterm[0][3]\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n95\n```\n:::\n:::\n\n\n<br>\n\n### 3.2.5. 리스트 메소드\n#### 3.2.5.1. 리스트 추가\n|함수|설명|\n|:---:|:------------|\n|append()|- 새로운 값을 기존 리스트의 맨 끝에 추가|\n|extend()|- 새로운 리스트를 기존 리스트에 추가(덧셈 연산과 같은 효과)|\n|insert()|- 기존 리스트의 i번째 인덱스에 새로운 값을 추가 <br>- i번째 인덱스를 기준으로 뒤쪽의 인덱스는 하나씩 밀림|\n\n<br>\n\n::: {#8957eed2 .cell execution_count=21}\n``` {.python .cell-code}\n# 리스트에 한 개의 원소 추가1\nlst = [1, 2, 3]\nlst.append(4)                              # 실행 결과로 아무것도 출력하지 않음\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 4]\n```\n:::\n:::\n\n\n::: {#314e957c .cell execution_count=22}\n``` {.python .cell-code}\n# 리스트에 한 개의 원소 추가2\n# 원본 값 변화 없이 리스트에 한 개의 원소를 추가하려면 전개 연산자 *를 사용하면 됨\nlst = [1, 2, 3]\nnew_lst = [*lst, 4]\nprint(lst)                                 # lst 원본 값이 변하지 않음\nprint(new_lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3]\n[1, 2, 3, 4]\n```\n:::\n:::\n\n\n::: {#be251fc7 .cell execution_count=23}\n``` {.python .cell-code}\n# append() 함수는 여러 개의 인수를 입력하거나, 연속으로 사용할 수 없음\nlst = [1, 2, 3]\n#lst.append(4,5)\n#lst.append(4).append(5)\n```\n:::\n\n\n::: {#88a2de0c .cell execution_count=24}\n``` {.python .cell-code}\n# 리스트에 여러 개의 원소 추가\nlst = [1, 2, 3]\nlst.extend([11, 12])                       # 실행 결과로 아무것도 출력하지 않음\nprint(lst)                                 # lst1 원본 값이 변함\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 11, 12]\n```\n:::\n:::\n\n\n::: {#b250ad31 .cell execution_count=25}\n``` {.python .cell-code}\n# extend() 함수와 리스트 연결 연산자 +의 차이\nlst1 = [1, 2, 3]\nlst2 = [11, 12, 13]\nlst1 + lst2                                # 실행 결과가 출력됨\nprint(lst1)                                # lst1 원본 값이 변하지 않음\nprint(lst2)                                # lst2 원본 값이 변하지 않음\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3]\n[11, 12, 13]\n```\n:::\n:::\n\n\n::: {#28bb996c .cell execution_count=26}\n``` {.python .cell-code}\n# 특정 위치에 한 개의 원소 추가\nlst = [1, 2, 3]\nlst.insert(0, 100)                         # 실행 결과로 아무것도 출력하지 않음\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[100, 1, 2, 3]\n```\n:::\n:::\n\n\n::: {#78c53c5c .cell execution_count=27}\n``` {.python .cell-code}\n# 특정 위치에 여러 개의 원소 추가 : 슬라이싱을 이용\nlst = [1, 2, 3]\nlst[1:1] = [11, 12]                        # 인덱스 1의 위치에 리스트 [11, 12]의 원소를 개별적으로 삽입\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 11, 12, 2, 3]\n```\n:::\n:::\n\n\n<br>\n\n#### 3.2.5.2. 리스트 삭제\n|함수|설명|\n|:---:|:------------|\n|pop()|- 특정 인덱스 값을 삭제하고 그 값을 반환 <br>- 인덱스를 생략하면 마지막 원소를 삭제|\n|del 키워드|- 특정 인덱스 값을 삭제 <br>- 리스트 객체 자체를 삭제 가능함|\n|remove()|- 리스트에서 첫 번째로 일치하는 값을 삭제 <br>- 값으로 삭제하므로 인덱스를 사용하지 않음|\n|clear()|- 리스트의 모든 원소를 삭제|\n\n<br>\n\n::: {#d5aa1ceb .cell execution_count=28}\n``` {.python .cell-code}\n# 특정 인덱스 값 삭제1\nlst = [1, 2, 3, 4, 5]\nresult = lst.pop(3)                        # 실행 결과로 삭제한 값을 반환\nprint(lst)                                 # lst 원본 값이 변함\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 5]\n4\n```\n:::\n:::\n\n\n::: {#7435a37e .cell execution_count=29}\n``` {.python .cell-code}\n# 특정 인덱스 값 삭제2\nlst = [1, 2, 3, 4, 5]\nresult = lst.pop()                         # 인덱스를 생략하면 마지막 원소를 삭제 후 반환\nprint(lst)                                 # lst 원본 값이 변함\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 4]\n5\n```\n:::\n:::\n\n\n::: {#c94ca761 .cell execution_count=30}\n``` {.python .cell-code}\n# 특정 인덱스 값 삭제3\nlst = [1, 2, 3, 4, 5]\ndel lst[3]                                 # 실행 결과로 아무것도 반환하지 않음\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 5]\n```\n:::\n:::\n\n\n::: {#4d65a69c .cell execution_count=31}\n``` {.python .cell-code}\n# 리스트 객체 삭제\nlst = [1, 2, 3, 4, 5]\ndel lst\n#print(lst)\n```\n:::\n\n\n::: {#50ab0185 .cell execution_count=32}\n``` {.python .cell-code}\n# 일치하는 값 삭제1\nlst = [1, 2, 3, 4, 5]\nlst.remove(4)                              # 실행 결과로 아무것도 출력하지 않음\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 5]\n```\n:::\n:::\n\n\n::: {#5684128e .cell execution_count=33}\n``` {.python .cell-code}\n# 일치하는 값 삭제2\nlst = [1, 2, 3, 1, 4, 5, 1, 6, 7]\nlst.remove(1)                              # 첫 번째로 일치하는 값만 삭제됨\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2, 3, 1, 4, 5, 1, 6, 7]\n```\n:::\n:::\n\n\n::: {#a730e471 .cell execution_count=34}\n``` {.python .cell-code}\n# 리스트 모든 원소 삭제\nlst = [1, 2, 3, 4, 5]\nlst.clear()                                # 실행 결과로 아무것도 출력하지 않음\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[]\n```\n:::\n:::\n\n\n<br>\n\n#### 3.2.5.3. 리스트 재배열\n|함수|설명|\n|:---:|:------------|\n|reverse()|- 리스트 원소를 역순으로 재배열|\n|sort()|- 리스트 원소를 오름차순(default)으로 정렬 <br>- 내림차순으로 정렬하려면 reverse=True로 설정|\n\n<br>\n\n::: {#1bfa109a .cell execution_count=35}\n``` {.python .cell-code}\n# 리스트 역순 재배열\nlst = [52, 273, 103, 32, 275, 1, 7]\nlst.reverse()                              # 실행 결과로 아무것도 출력하지 않음\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[7, 1, 275, 32, 103, 273, 52]\n```\n:::\n:::\n\n\n::: {#487691b4 .cell execution_count=36}\n``` {.python .cell-code}\n# 리스트 정렬\nlst = [52, 273, 103, 32, 275, 1, 7]\nlst.sort()                                 # 실행 결과로 아무것도 출력하지 않음, 오름차순 정렬\nprint(lst)                                 # lst 원본 값이 변함\n\nlst.sort(reverse=True)                     # 내림차순 정렬\nprint(lst)                                 # lst 원본 값이 변함\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 7, 32, 52, 103, 273, 275]\n[275, 273, 103, 52, 32, 7, 1]\n```\n:::\n:::\n\n\n<br>\n\n#### 3.2.5.4. 리스트 검색\n|함수|설명|\n|:---:|:------------|\n|count()|리스트 내부에 특정 값이 몇 번 나타나는지 개수를 반환|\n|index()|리스트 내부에 특정 값의 첫 번째 인덱스를 반환하며, 없으면 오류 발생|\n|in 연산자|리스트 내부에 특정 값이 있다면 True, 없다면 False를 반환|\n\n<br>\n\n::: {#91f205a6 .cell execution_count=37}\n``` {.python .cell-code}\n# 특정 값 개수\nlst = [1, 2, 3, 1, 4, 5, 1, 6, 7]\nprint(lst.count(1))\nprint(lst.count(9))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n0\n```\n:::\n:::\n\n\n::: {#39aec3aa .cell execution_count=38}\n``` {.python .cell-code}\n# 특정 값의 첫 번쩨 인덱스\nlst = [1, 2, 3, 1, 4, 5, 1, 6, 7]\nprint(lst.index(1))\n#print(lst.index(9))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n```\n:::\n:::\n\n\n::: {#7c8923c0 .cell execution_count=39}\n``` {.python .cell-code}\n# 특정 값 찾기\nlst = [1, 2, 3, 4, 5]\nprint(3 in lst)\nprint(6 in lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nFalse\n```\n:::\n:::\n\n\n<br>\n\n#### 3.2.5.5. 리스트 통계\n|함수|설명|\n|:---:|:------------|\n|len()|리스트 원소의 개수(리스트 길이) 반환|\n|sum()|리스트 원소의 합계 반환|\n|max()|리스트 원소 중 최대값 반환|\n|min()|리스트 원소 중 최소값 반환|\n\n<br>\n\n::: {#5bb141ae .cell execution_count=40}\n``` {.python .cell-code}\nlst = [1, 2, 3, 4, 5]\nprint(len(lst))\nprint(sum(lst))\nprint(max(lst))\nprint(min(lst))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n15\n5\n1\n```\n:::\n:::\n\n\n<br>\n\n### 3.2.6. 리스트 컴프리헨션\n\n> [식 for 변수 in 반복범위 if 조건식]\n\n<br>\n\n+ 기존 리스트를 사용하여 간결하게 새로운 리스트를 생성하는 기법\n+ 리스트와 for 문을 한 줄에 사용할 수 있어 코드가 더 직관적으로 작성됨\n+ 필터링, 중첩 반복문, 이차원 리스트 등 다양한 방식으로 활용됨\n\n<br>\n\n+ 리스트 컴프리헨션은 수학에서 집합을 정의할 때 **특정 조건을 만족하는 원소들의 집합**으로 표현하는 방법과 유사함\n  + 수학적 집합 :  S = {x | x는 0 이상 10 이하의 정수}\n  + 리스트 컴프리헨션 :  `[x for x in range(10)]`\n\n<br>\n\n::: {#e5422b6d .cell execution_count=41}\n``` {.python .cell-code}\n## 0~9 정수 저장\n# 일반적인 반복문 + 리스트\nresult1 = []\nfor i in range(10):\n    result1.append(i)\n\nprint(result1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n:::\n:::\n\n\n::: {#8427ec18 .cell execution_count=42}\n``` {.python .cell-code}\n## 0~9 정수 저장\n# 리스트 컴프리헨션\nresult2 = [i for i in range(10)]\nprint(result2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n:::\n:::\n\n\n::: {#b7f7e63f .cell execution_count=43}\n``` {.python .cell-code}\n## 짝수만 저장 (필터링, if 문과 함께 사용)\n# 일반적인 반복문 + 리스트\nresult1 = []\nfor i in range(10):\n    if i % 2 == 0:\n        result1.append(i)\n\nprint(result1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0, 2, 4, 6, 8]\n```\n:::\n:::\n\n\n::: {#198aeb7e .cell execution_count=44}\n``` {.python .cell-code}\n## 짝수만 저장 (필터링, if 문과 함께 사용)\n# 리스트 컴프리헨션\nresult2 = [i for i in range(10) if i % 2 == 0]\nprint(result2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0, 2, 4, 6, 8]\n```\n:::\n:::\n\n\n::: {#e732196c .cell execution_count=45}\n``` {.python .cell-code}\n## 두 개의 문자열 조합하여 새로운 리스트 생성 (중첩 반복문)\n# 일반적인 반복문 + 리스트\nword1 = \"Hello\"\nword2 = \"World\"\nresult1 = []\n\nfor i in word1:\n    for j in word2:\n        result1.append(i+j)\n\nprint(result1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['HW', 'Ho', 'Hr', 'Hl', 'Hd', 'eW', 'eo', 'er', 'el', 'ed', 'lW', 'lo', 'lr', 'll', 'ld', 'lW', 'lo', 'lr', 'll', 'ld', 'oW', 'oo', 'or', 'ol', 'od']\n```\n:::\n:::\n\n\n::: {#af82f705 .cell execution_count=46}\n``` {.python .cell-code}\n## 두 개의 문자열 조합하여 새로운 리스트 생성 (중첩 반복문)\n# 리스트 컴프리헨션\nword1 = \"Hello\"\nword2 = \"World\"\n\nresult2 = [i+j for i in word1 for j in word2]\nprint(result2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['HW', 'Ho', 'Hr', 'Hl', 'Hd', 'eW', 'eo', 'er', 'el', 'ed', 'lW', 'lo', 'lr', 'll', 'ld', 'lW', 'lo', 'lr', 'll', 'ld', 'oW', 'oo', 'or', 'ol', 'od']\n```\n:::\n:::\n\n\n::: {#bded03b3 .cell execution_count=47}\n``` {.python .cell-code}\n# 리스트 컴프리헨션 (필터링 + 중첩 반복문)\ncase1 = [\"A\", \"B\", \"C\"]\ncase2 = [\"D\", \"E\", \"A\"]\nresult = [i + j for i in case1 for j in case2 if not(i==j)]\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['AD', 'AE', 'BD', 'BE', 'BA', 'CD', 'CE', 'CA']\n```\n:::\n:::\n\n\n::: {#cc7c6e41 .cell execution_count=48}\n``` {.python .cell-code}\n## 리스트의 각 원소를 대문자, 소문자, 길이로 변환하여 이차원 리스트 생성 (이차원 리스트)\n# 일반적인 반복문 + 리스트\nwords = \"The quick brown fox jumps over the lazy dog\".split()\nword_info1 = []\n\nfor w in words:\n    word_info1.append([w.upper(), w.lower(), len(w)])\n\nword_info1\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\n[['THE', 'the', 3],\n ['QUICK', 'quick', 5],\n ['BROWN', 'brown', 5],\n ['FOX', 'fox', 3],\n ['JUMPS', 'jumps', 5],\n ['OVER', 'over', 4],\n ['THE', 'the', 3],\n ['LAZY', 'lazy', 4],\n ['DOG', 'dog', 3]]\n```\n:::\n:::\n\n\n::: {#b6a89adf .cell execution_count=49}\n``` {.python .cell-code}\n## 리스트의 각 원소를 대문자, 소문자, 길이로 변환하여 이차원 리스트 생성 (이차원 리스트)\n# 리스트 컴프리헨션\nwords = \"The quick brown fox jumps over the lazy dog\".split()\nword_info2 = [[w.upper(), w.lower(), len(w)] for w in words]\nword_info2\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\n[['THE', 'the', 3],\n ['QUICK', 'quick', 5],\n ['BROWN', 'brown', 5],\n ['FOX', 'fox', 3],\n ['JUMPS', 'jumps', 5],\n ['OVER', 'over', 4],\n ['THE', 'the', 3],\n ['LAZY', 'lazy', 4],\n ['DOG', 'dog', 3]]\n```\n:::\n:::\n\n\n::: {#2ce8fde0 .cell execution_count=50}\n``` {.python .cell-code}\n# [주의] 반복문에서 대괄호의 위치에 따라 리스트의 구조가 달라짐\ncase1 = [\"A\", \"B\", \"C\"]\ncase2 = [\"1\", \"2\", \"3\"]\n\n# 일차원 리스트, 앞의 for 문이 먼저 실행됨\nresult1 = [i + j for i in case1 for j in case2]\nprint(result1)\n\n# 이차원 리스트, 뒤의 for 문이 바깥쪽에서 먼저 실행됨\nresult2 = [[i + j for i in case1] for j in case2]\nprint(result2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3']\n[['A1', 'B1', 'C1'], ['A2', 'B2', 'C2'], ['A3', 'B3', 'C3']]\n```\n:::\n:::\n\n\n<br>\n\n## 3.3. 튜플\n### 3.3.1. 튜플 생성\n+ 튜플(tuple)\n  + 여러 개의 값을 저장할 수 있는 컬렉션 자료형(collection data type)\n  + 순서가 존재하는 시퀀스 자료형(sequence data type)\n  + 한 번 생성된 이후에는 수정할 수 없는 불변형(immutable) 객체\n  + 정수, 부동소수점수, 문자열, bool, 리스트, 튜플, 딕셔너리 등 다양한 자료형을 저장할 수 있는 컨테이너형 객체\n  + 리스트와 구조 및 사용 방법이 거의 동일하지만, **수정이 불가능**하다는 차이점이 있음\n\n<br>\n\n+ 튜플 생성\n  + 리터럴 방식(tuple literal)\n    + `()`를 사용하여 튜플을 직접 정의하는 방법\n    + `()` 안에 원소(element)를 `,`로 구분하여 나열함\n    + `()`을 생략할 수도 있지만, 원소가 하나인 경우에는 `(값,)`처럼 반드시 `,`를 포함해야 함\n  + 생성자 방식(tuple constructor)\n    + `tuple()` 함수를 사용하여 튜플을 생성하는 방법\n    + 다른 iterable 객체(리스트, 튜플, 세트, 딕셔너리, 문자열 등)를 인수로 받아 튜플을 생성할 때 유용함\n\n<br>\n\n::: {#e1a2d3c2 .cell execution_count=51}\n``` {.python .cell-code}\n# 튜플 생성1\ntpl = (1, 2, 3, 4, 5)\nprint(tpl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1, 2, 3, 4, 5)\n```\n:::\n:::\n\n\n::: {#d73500f6 .cell execution_count=52}\n``` {.python .cell-code}\n# 튜플 생성2\ntpl = 1, 2, 3, 4, 5\nprint(tpl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1, 2, 3, 4, 5)\n```\n:::\n:::\n\n\n::: {#6cca3fb0 .cell execution_count=53}\n``` {.python .cell-code}\n# 튜플 생성3 : 원소가 하나인 경우에는 반드시 ,를 포함해야 함\ntpl = (1,)\nprint(tpl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1,)\n```\n:::\n:::\n\n\n::: {#d35d9aa4 .cell execution_count=54}\n``` {.python .cell-code}\n# 튜플 생성4 : 튜플은 다양한 자료형을 저장할 수 있음\ntpl = (1, 3.14, \"Hello\", True, [11, 12, 13], (21, 22))\nprint(tpl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1, 3.14, 'Hello', True, [11, 12, 13], (21, 22))\n```\n:::\n:::\n\n\n::: {#08d0939a .cell execution_count=55}\n``` {.python .cell-code}\n# 튜플 생성5 : iterable 객체 사용\ntpl = tuple(\"Hello\")\nprint(tpl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n('H', 'e', 'l', 'l', 'o')\n```\n:::\n:::\n\n\n::: {#39de9e22 .cell execution_count=56}\n``` {.python .cell-code}\n# 튜플 생성6 : iterable 객체 사용\ntpl = tuple([1, 2, 3])\nprint(tpl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1, 2, 3)\n```\n:::\n:::\n\n\n<br>\n\n### 3.3.2. 튜플 연산\n+ 리스트 연산과 문법이 동일함\n+ 튜플 연결 연산자 `+` : 두 튜플을 연결해서 새로운 튜플 생성\n+ 튜플 반복 연산자 `*` : 튜플을 숫자만큼 반복하여 새로운 튜플 생성 - (예) 튜플\\*숫자\n\n<br>\n\n::: {#8beea824 .cell execution_count=57}\n``` {.python .cell-code}\n# 튜플 연결\ntpl1 = 1, 2, 3\ntpl2 = 11, 12, 13\nprint(tpl1 + tpl2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1, 2, 3, 11, 12, 13)\n```\n:::\n:::\n\n\n::: {#05c42466 .cell execution_count=58}\n``` {.python .cell-code}\n# 튜플 반복\nprint(tpl1 * 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1, 2, 3, 1, 2, 3, 1, 2, 3)\n```\n:::\n:::\n\n\n<br>\n\n### 3.3.3. 인덱싱와 슬라이싱\n+ 리스트와 문법이 동일함\n+ 인덱싱(indexing) : `[index]`를 사용하여 튜플의 특정 위치에 있는 원소에 접근함\n+ 슬라이싱(slicing) : `[(start index):(stop index)]`를 사용하여 튜플의 일부 원소를 추출함\n  + 리스트와 달리 불변형 객체이므로 슬라이싱을 이용하여 기존 튜플의 일부를 삭제하거나, 새로운 원소를 추가 및 변경할 수 없음\n\n<br>\n\n::: {#902b24a3 .cell execution_count=59}\n``` {.python .cell-code}\n# 튜플 인덱싱1\ntpl = 1, 2, 3, 4, 5\nprint(tpl[0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n```\n:::\n:::\n\n\n::: {#17e6c698 .cell execution_count=60}\n``` {.python .cell-code}\n# 튜플 인덱싱2\ntpl = 1, 2, 3, 4, 5\nprint(tpl[-1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n```\n:::\n:::\n\n\n::: {#772a49a6 .cell execution_count=61}\n``` {.python .cell-code}\n# 튜플 슬라이싱1\ntpl = 1, 2, 3, 4, 5\nprint(tpl[0:2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1, 2)\n```\n:::\n:::\n\n\n::: {#8e338dd5 .cell execution_count=62}\n``` {.python .cell-code}\n# 튜플 슬라이싱2\ntpl = 1, 2, 3, 4, 5\nprint(tpl[:2])\nprint(tpl[2:])\nprint(tpl[::2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1, 2)\n(3, 4, 5)\n(1, 3, 5)\n```\n:::\n:::\n\n\n::: {#9e372305 .cell execution_count=63}\n``` {.python .cell-code}\n# 튜플은 불변형 객체이므로 인덱스를 이용한 수정이 불가능함\n#tpl = 1, 2, 3, 4, 5\n#tpl[2] = 3\n#print(tpl)\n```\n:::\n\n\n<br>\n\n### 3.3.4. 튜플 메소드\n|함수|설명|\n|:---:|:------------|\n|count()|튜플 내부에 특정 값이 몇 번 나타나는지 개수를 반환|\n|index()|튜플 내부에 특정 값의 첫 번째 인덱스를 반환하며, 없으면 오류 발생|\n|in 연산자|튜플 내부에 특정 값이 있다면 True, 없다면 False를 반환|\n|len()|튜플 원소의 개수(튜플 길이) 반환|\n|sum()|튜플 원소의 합계 반환|\n|max()|튜플 원소 중 최대값 반환|\n|min()|튜플 원소 중 최소값 반환|\n\n<br>\n\n::: {#71ca65a8 .cell execution_count=64}\n``` {.python .cell-code}\n# 특정 값 개수\ntpl = 1, 2, 3, 1, 4, 5, 1, 6, 7\nprint(tpl.count(1))\nprint(tpl.count(9))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n0\n```\n:::\n:::\n\n\n::: {#d1553cd8 .cell execution_count=65}\n``` {.python .cell-code}\n# 특정 값의 첫 번쩨 인덱스\ntpl = 1, 2, 3, 1, 4, 5, 1, 6, 7\nprint(tpl.index(1))\n#print(tpl.index(9))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n```\n:::\n:::\n\n\n::: {#53d6626d .cell execution_count=66}\n``` {.python .cell-code}\n# 특정값 찾기\ntpl = 1, 2, 3, 4, 5\nprint(3 in tpl)\nprint(6 in tpl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nFalse\n```\n:::\n:::\n\n\n::: {#bc4167f8 .cell execution_count=67}\n``` {.python .cell-code}\ntpl = 1, 2, 3, 4, 5\nprint(len(tpl))\nprint(sum(tpl))\nprint(max(tpl))\nprint(min(tpl))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n15\n5\n1\n```\n:::\n:::\n\n\n<br>\n\n## 3.4. 세트\n### 3.4.1. 세트 생성\n+ 세트(set)\n  + 여러 개의 값을 저장할 수 있는 컬렉션 자료형(collection data type)\n  + 순서가 없는 집합 자료형(set data type)\n  + 중복을 허용하지 않으며, 순서가 유지되지 않음\n    + 리스트, 튜플과 달리 인덱싱과 슬라이싱이 불가능함\n  + 한 번 생성된 이후에도 수정할 수 있는 가변형(mutable) 객체\n  + 정수, 부동소수점수, 문자열, bool, 튜플 등 해시 가능한(immutable) 자료형을 저장할 수 있는 컨테이너형 객체\n\n<br>\n\n+ [참고] 해시(hash)\n  + 데이터를 저장하거나 검색할 때 사용되는 고유한 숫자 값(해시 값)을 사용하는 과정\n  + 세트와 딕셔너리는 내부적으로 해시 값을 사용하여 원소 또는 key에 빠르게 접근함(검색 속도가 빠름)\n  + 해시 값은 변경되지 않아야 하므로, 불변형 객체만 사용할 수 있음\n\n<br>\n\n+ 세트 생성\n  + 리터럴 방식(set literal)\n    + `{}`를 사용하여 세트를 직접 정의하는 방법\n    + `{}` 안에 원소(element)를 `,`로 구분하여 나열함\n    + **중복된 원소는 자동으로 제거됨**\n  + 생성자 방식(set constructor)\n    + `set()` 함수를 사용하여 세트를 생성하는 방법\n    + 다른 iterable 객체(리스트, 튜플, 세트, 딕셔너리, 문자열 등)를 인수로 받아 세트를 생성할 때 유용함\n    + 빈 세트를 만들려면 반드시 `set()` 함수를 사용해야 함\n\n<br>\n\n::: {#9e0f783a .cell execution_count=68}\n``` {.python .cell-code}\n# 세트 생성1\nst = {1, 2, 3, 1, 1, 4}\nprint(st)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{1, 2, 3, 4}\n```\n:::\n:::\n\n\n::: {#be321f36 .cell execution_count=69}\n``` {.python .cell-code}\n# 세트 생성2\nst = set({1, 2, 3, 1, 1, 4})\nprint(st)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{1, 2, 3, 4}\n```\n:::\n:::\n\n\n::: {#a621fb7c .cell execution_count=70}\n``` {.python .cell-code}\n# 세트 생성3 : 세트는 해시 가능한(immutable) 자료형을 저장할 수 있음\nst = {1, 3.14, \"Hello\", True, (1, 2, 3), \"Hello\", 1, 1, 1}\nprint(st)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{1, 3.14, (1, 2, 3), 'Hello'}\n```\n:::\n:::\n\n\n::: {#d001917a .cell execution_count=71}\n``` {.python .cell-code}\n# 세트 생성4: iterable 객체 사용\nst = set(\"Hello\")\nprint(st)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'H', 'e', 'l', 'o'}\n```\n:::\n:::\n\n\n::: {#ca631aab .cell execution_count=72}\n``` {.python .cell-code}\n# 세트 생성5 : iterable 객체 사용\nst1 = set([1, 2, 3, 1, 1, 4])\nst2 = set((1, 2, 3, 1, 1, 4))\nprint(st1)\nprint(st2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{1, 2, 3, 4}\n{1, 2, 3, 4}\n```\n:::\n:::\n\n\n<br>\n\n### 3.4.2. 세트 집합 연산 및 메소드\n\n|연산|연산자|함수|\n|:---:|:---:|:------------:|\n|합집합|\\||union()|\n|교집합|&|intersection()|\n|차집합|-|difference()|\n|대칭차집합|^|symmetric_difference()|\n|부분집합 여부|<=|issubset()|\n\n<br>\n\n![](./images/fig3-3.png){width=60%}\n\n<br>\n\n::: {#31160b5c .cell execution_count=73}\n``` {.python .cell-code}\n# 세트 연산1\nA = {1, 2, 3}\nB = {3, 4, 5}\n\nprint(A | B)                               # 합집합\nprint(A & B)                               # 교집합\nprint(A - B)                               # 차집합\nprint(A ^ B)                               # 대칭차집합\nprint(A <= B)                              # 부분집합 여부\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{1, 2, 3, 4, 5}\n{3}\n{1, 2}\n{1, 2, 4, 5}\nFalse\n```\n:::\n:::\n\n\n::: {#45f36108 .cell execution_count=74}\n``` {.python .cell-code}\n# 세트 연산2\nA = {1, 2, 3}\nB = {3, 4, 5}\n\nprint(A.union(B))\nprint(A.intersection(B))\nprint(A.difference(B))\nprint(A.symmetric_difference(B))\nprint(A.issubset(B))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{1, 2, 3, 4, 5}\n{3}\n{1, 2}\n{1, 2, 4, 5}\nFalse\n```\n:::\n:::\n\n\n::: {#243979eb .cell execution_count=75}\n``` {.python .cell-code}\n# 세트 연산3 : 여러 개의 세트를 연쇄적으로 한 번에 연산 가능\nA = {1, 2, 3}\nB = {3, 4, 5}\nC = {5, 6, 7}\n\n# 연산자 사용\nprint(A | B | C)\nprint(A & B & C)\n\n# 메소드 사용\nprint(A.union(B, C))\nprint(A.intersection(B, C))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{1, 2, 3, 4, 5, 6, 7}\nset()\n{1, 2, 3, 4, 5, 6, 7}\nset()\n```\n:::\n:::\n\n\n<br>\n\n#### 3.4.2.3. 세트 추가/삭제/검색\n|함수|설명|\n|:---:|:------------|\n|add()|- 새로운 값을 세트에 추가|\n|update()|- 여러 개 값을 세트에 추가|\n|pop()|- 임의의 값을 삭제하고 그 값을 반환 <br>- 어떤 값을 삭제할지 예측 불가능|\n|remove()|- 세트에서 일치하는 값을 삭제 <br>- 일치하는 값이 없으면 오류가 발생함|\n|discard()|- 세트에서 일치하는 값을 삭제 <br>- 일치하는 값이 없어도 오류가 발생하지 않음|\n|clear()|- 세트의 모든 원소를 삭제|\n|in 연산자|세트 내부에 특정 값이 있다면 True, 없다면 False를 반환|\n\n<br>\n\n::: {#ca055624 .cell execution_count=76}\n``` {.python .cell-code}\n# 세트에 한 개의 원소 추가\nst = {1, 2, 3}\nst.add(6)                                  # 실행 결과로 아무것도 출력하지 않음\nprint(st)                                  # st 원본 값이 변함\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{1, 2, 3, 6}\n```\n:::\n:::\n\n\n::: {#8439886e .cell execution_count=77}\n``` {.python .cell-code}\n# 세트에 여러 개의 원소 추가\nst = {1, 2, 3}\nst.update([1, 2, 6])                       # 리스트 사용\nprint(st)\n\nst.update((1, 7))                          # 튜플 사용\nprint(st)\n\nst.update({8, 9})                          # 세트 사용\nprint(st)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{1, 2, 3, 6}\n{1, 2, 3, 6, 7}\n{1, 2, 3, 6, 7, 8, 9}\n```\n:::\n:::\n\n\n::: {#a12a4cd4 .cell execution_count=78}\n``` {.python .cell-code}\n# 임의의 원소 삭제\nst = {1, 2, 3}\nresult = st.pop()                          # 임의의 원소를 삭제 후 반환\nprint(st)                                  # st 원본 값이 변함\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{2, 3}\n1\n```\n:::\n:::\n\n\n::: {#6ca46ff6 .cell execution_count=79}\n``` {.python .cell-code}\n# 일치하는 값 삭제1\nst = {1, 2, 3}\nst.remove(3)\nprint(st)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{1, 2}\n```\n:::\n:::\n\n\n::: {#0353559c .cell execution_count=80}\n``` {.python .cell-code}\n# 일치하는 값 삭제2 : remove() 함수는 일치하는 값이 없으면 오류가 발생함\n#st = {1, 2, 3}\n#st.remove(4)\n#print(st)\n```\n:::\n\n\n::: {#8b3793ad .cell execution_count=81}\n``` {.python .cell-code}\n# 일치하는 값 삭제3\nst = {1, 2, 3}\nst.discard(3)\nprint(st)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{1, 2}\n```\n:::\n:::\n\n\n::: {#3632d8b8 .cell execution_count=82}\n``` {.python .cell-code}\n# 일치하는 값 삭제4 : discard() 함수는 일치하는 값이 없어도 오류가 발생하지 않음\nst = {1, 2, 3}\nst.discard(4)\nprint(st)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{1, 2, 3}\n```\n:::\n:::\n\n\n::: {#f697841a .cell execution_count=83}\n``` {.python .cell-code}\n# 세트 모든 원소 삭제\nst = {1, 2, 3}\nst.clear()\nprint(st)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nset()\n```\n:::\n:::\n\n\n::: {#c612172e .cell execution_count=84}\n``` {.python .cell-code}\n# 특정값 찾기\nst = {1, 2, 3}\nprint(3 in st)\nprint(6 in st)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nFalse\n```\n:::\n:::\n\n\n<br>\n\n## 3.5. 딕셔너리\n### 3.5.1. 딕셔너리 생성\n+ 딕셔너리(dictionary)\n  + 여러 개의 키-값(key-value) 쌍을 저장할 수 있는 컬렉션 자료형(collection data type)\n  + 순서가 있는 매핑 자료형(mapping data type)(Python 3.7+)\n  + 키(key)를 통해 값(value)을 찾는 구조\n    + 키는 중복될 수 없고(해시 가능한 자료형만 가능), 값은 중복 가능함(모든 자료형 가능)\n  + 한 번 생성된 이후에도 수정할 수 있는 가변형(mutable) 객체\n\n<br>\n\n+ 딕셔너리 생성\n  + 리터럴 방식(dictionary literal)\n    + `{key: value}`를 사용하여 딕셔너리를 직접 정의하는 방법\n    + `{}` 안에 여러 개의 `key: value` 쌍을 `,`로 구분하여 나열함\n    + **중복된 키가 있으면 마지막에 정의한 값이 적용됨**\n  + 생성자 방식(dictionary constructor)\n    + `dict()` 함수를 사용하여 딕셔너리를 생성하는 방법\n    + 다른 iterable 객체(리스트, 튜플, 세트, 딕셔너리, 문자열 등)를 인수로 받아 딕셔너리를 생성할 때 유용함\n      + `zip()` 함수를 이용하여 여러 개의 리스트나 튜플을 병렬로 묶어 키-값 쌍의 형태로 구성할 수 있음\n      + `enumerate()` 함수를 이용하여 인덱스를 키로, 원소를 값으로 하여 쌍으로 묶어 딕셔너리를 생성할 수 있음\n\n<br>\n\n::: {#68697243 .cell execution_count=85}\n``` {.python .cell-code}\n# 딕셔너리 생성1\ndct = {'a': 1, 'b': 2, 'c': 3}\nprint(dct)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'a': 1, 'b': 2, 'c': 3}\n```\n:::\n:::\n\n\n::: {#45836a4a .cell execution_count=86}\n``` {.python .cell-code}\n# 딕셔너리 생성2\ndct = dict(a=1, b=2, c=3)\nprint(dct)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'a': 1, 'b': 2, 'c': 3}\n```\n:::\n:::\n\n\n::: {#7c284557 .cell execution_count=87}\n``` {.python .cell-code}\n# 딕셔너리 생성3 : 키는 중복될 수 없음\ndct = {'a':1, 'b': 2, 'c': 3, 'a': 4, 'b': 5}\nprint(dct)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'a': 4, 'b': 5, 'c': 3}\n```\n:::\n:::\n\n\n::: {#14b517cc .cell execution_count=88}\n``` {.python .cell-code}\n# 딕셔너리 생성4 : (key, value) 쌍의 리스트 사용\ndct = dict([('x', 100), ('y', 200)])\nprint(dct)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'x': 100, 'y': 200}\n```\n:::\n:::\n\n\n::: {#6054d330 .cell execution_count=89}\n``` {.python .cell-code}\n# 딕셔너리 생성5 : zip() 함수 사용\nkeys = ['name', 'age', 'city']\nvalues = ['Alice', 28, 'Jeonju']\ndct = dict(zip(keys, values))\nprint(dct)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\n```\n:::\n:::\n\n\n::: {#7167a6af .cell execution_count=90}\n``` {.python .cell-code}\n# 딕셔너리 생성6 : enumerate() 함수 사용\nfruits = ['apple', 'banana', 'cherry']\ndct = dict(enumerate(fruits))\nprint(dct)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{0: 'apple', 1: 'banana', 2: 'cherry'}\n```\n:::\n:::\n\n\n<br>\n\n### 3.5.2. 딕셔너리 값 접근\n+ 딕셔너리는 키를 사용하여 값에 접근함\n+ 리스트, 튜플처럼 정수 인덱스를 이용한 접근은 불가능함\n\n<br>\n\n::: {#4108b0ac .cell execution_count=91}\n``` {.python .cell-code}\n# 키를 이용한 값 접근\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nprint(info['name'])\nprint(info['age'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAlice\n28\n```\n:::\n:::\n\n\n::: {#5fb3b41f .cell execution_count=92}\n``` {.python .cell-code}\n# 딕셔너리는 가변형 객체이므로 키를 이용한 수정이 가능함\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\ninfo['city'] = 'Iksan'\nprint(info)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'name': 'Alice', 'age': 28, 'city': 'Iksan'}\n```\n:::\n:::\n\n\n::: {#1a24f9f0 .cell execution_count=93}\n``` {.python .cell-code}\n# 새로운 키-값 쌍 추가\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\ninfo['email'] = 'alice123@gmail.com'\nprint(info)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'name': 'Alice', 'age': 28, 'city': 'Jeonju', 'email': 'alice123@gmail.com'}\n```\n:::\n:::\n\n\n<br>\n\n### 3.5.3. 딕셔너리 메소드\n#### 3.5.3.1. 딕셔너리 조회\n|함수|설명|\n|:---:|:------------|\n|keys()|딕셔너리의 모든 키를 반환(`dict_keys` 객체)|\n|values()|딕셔너리의 모든 값을 반환(`dict_values` 객체)|\n|items()|(키, 값) 쌍을 튜플 형태로 반환(`dict_items` 객체)|\n|get()|지정한 키의 값을 반환하며, 없으면 None 반환|\n|in 연산자|특정 키가 딕셔너리에 있다면 True, 없다면 False 반환|\n\n<br>\n\n::: {#ccab74e8 .cell execution_count=94}\n``` {.python .cell-code}\n# 모든 키\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nprint(list(info.keys()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['name', 'age', 'city']\n```\n:::\n:::\n\n\n::: {#891620a7 .cell execution_count=95}\n``` {.python .cell-code}\n# 모든 값\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nprint(list(info.values()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Alice', 28, 'Jeonju']\n```\n:::\n:::\n\n\n::: {#dd83e4f3 .cell execution_count=96}\n``` {.python .cell-code}\n# (키, 값) 쌍\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nprint(list(info.items()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[('name', 'Alice'), ('age', 28), ('city', 'Jeonju')]\n```\n:::\n:::\n\n\n::: {#0948b136 .cell execution_count=97}\n``` {.python .cell-code}\n# 키를 이용한 값 조회\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nprint(info.get('name'))\nprint(info.get('email'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAlice\nNone\n```\n:::\n:::\n\n\n::: {#547b1af2 .cell execution_count=98}\n``` {.python .cell-code}\n# 특정 키 찾기\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nprint('age' in info)\nprint('email' in info)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nFalse\n```\n:::\n:::\n\n\n<br>\n\n#### 3.5.3.2. 딕셔너리 추가/삭제\n|함수|설명|\n|:---:|:------------|\n|update()|다른 딕셔너리나 키워드 인수를 이용하여 원소를 추가 및 수정|\n|pop()|특정 키의 값을 삭제하고 그 값을 반환하며, 키가 없으면 오류 발생|\n|popitem()|마지막 (키, 값) 쌍을 삭제하고 반환|\n|del 키워드|특정 키의 원소를 삭제하며, 키가 없으면 오류 발생|\n|clear()|딕셔너리의 모든 원소를 삭제|\n\n<br>\n\n::: {#d6d48a62 .cell execution_count=99}\n``` {.python .cell-code}\n# 원소 추가 및 수정1\ninfo = {'name': 'Alice', 'age': 28}\ninfo.update({'age': 29, 'city': 'Jeonju'})\nprint(info)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'name': 'Alice', 'age': 29, 'city': 'Jeonju'}\n```\n:::\n:::\n\n\n::: {#249e792c .cell execution_count=100}\n``` {.python .cell-code}\n# 원소 추가 및 수정2\ninfo = {'name': 'Alice', 'age': 28}\ninfo.update(age=29, city='Jeonju')\nprint(info)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'name': 'Alice', 'age': 29, 'city': 'Jeonju'}\n```\n:::\n:::\n\n\n::: {#2449a1f7 .cell execution_count=101}\n``` {.python .cell-code}\n# 특정 키의 값 삭제1\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nage = info.pop('age')\nprint(info)\nprint(age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'name': 'Alice', 'city': 'Jeonju'}\n28\n```\n:::\n:::\n\n\n::: {#a8363f4a .cell execution_count=102}\n``` {.python .cell-code}\n# 특정 키의 값 삭제2\n#info = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\n#age = info.pop('email')\n#print(info)\n#print(email)\n```\n:::\n\n\n::: {#70a4378f .cell execution_count=103}\n``` {.python .cell-code}\n# 마지막 (키, 값) 쌍 삭제\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\nlast_item = info.popitem()\nprint(info)\nprint(last_item)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'name': 'Alice', 'age': 28}\n('city', 'Jeonju')\n```\n:::\n:::\n\n\n::: {#8287c6a6 .cell execution_count=104}\n``` {.python .cell-code}\n# 특정 키의 원소 삭제1\ninfo = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\ndel info['age']\nprint(info)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'name': 'Alice', 'city': 'Jeonju'}\n```\n:::\n:::\n\n\n::: {#b194f674 .cell execution_count=105}\n``` {.python .cell-code}\n# 특정 키의 원소 삭제2\n#info = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}\n#del info['email']\n#print(info)\n```\n:::\n\n\n",
    "supporting": [
      "3_structure_files"
    ],
    "filters": [],
    "includes": {}
  }
}