---
jupyter: python3
---

<h1>3. 자료구조</h1>
<br>

## 3.1. 자료구조
### 3.1.1. 자료구조의 중요성
+ 자료구조(data structure)
  + 데이터를 효율적으로 저장하고 접근하기 위한 구조적 방식
 
<br>

+ 자료구조의 중요성
  + 데이터 저장과 검색 효율화 : (예) 빠른 검색이 필요한 경우 딕셔너리 사용
  + 연산 속도 최적화 : (예) 중복을 제거하는 경우 리스트보다 세트가 효율적임
  + 메모리 사용 절약 : (예) 불변형 객체를 다룰 때는 리스트 대신 튜플 사용
  + 코드 가독성 및 유지보수성 향상

<br>

### 3.1.2. Python 자료구조
+ 대표적인 자료구조에는 리스트(list), 튜플(tuple), 세트(set), 딕셔너리(dictionary)가 있음

|자료구조|설명|
|:---:|:------------|
|리스트(list)|여러 개의 값을 저장할 수 있는 순차적인 자료구조|
|튜플(tuple)|리스트와 같지만 데이터의 변경을 허용하지 않는 자료구조|
|세트(set)|데이터의 중복을 허용하지 않고, 수학의 집합 연산을 지원하는 자료구조|
|딕셔너리(dictionary)|키(key)와 값(value)의 형태로 데이터를 저장하는 자료구조|

<br>

+ 자료구조 비교

|자료구조|순서 유지|변경 가능|중복 허용|특징|
|:------:|:---:|:---:|:---:|:------------------|
|리스트(list)|○|○|○|가장 기본적인 자료구조, 인덱스로 접근|
|튜플(tuple)|○|×|○|리스트와 유사하지만 불변형(immutable)|
|세트(set)|×|○|×|중복 제거, 수학적 집합 연산 가능|
|딕셔너리(dictionary)|○|○|△|키-값(key-value) 형태로 저장|

<br>

<br>

## 3.2. 리스트
### 3.2.1. 리스트 생성
+ 리스트(list)
  + 여러 개의 값을 저장할 수 있는 컬렉션 자료형(collection data type)
  + 순서가 존재하는 시퀀스 자료형(sequence data type)
  + 한 번 생성된 이후에도 수정할 수 있는 가변형(mutable) 객체
  + 정수, 부동소수점수, 문자열, bool, 리스트, 튜플, 딕셔너리 등 다양한 자료형을 저장할 수 있는 컨테이너형 객체

<br>

+ 리스트 생성
  + 리터럴 방식(list literal)
    + `[]` 사용하여 리스트를 직접 정의하는 방법
    + `[]` 안에 원소(element)를 `,`로 구분하여 나열함
  + 생성자 방식(list constructor)
    + `list()` 함수를 사용하여 리스트를 생성하는 방법
    + 다른 iterable 객체(리스트, 튜플, 세트, 딕셔너리, 문자열 등)을 인수로 받아 리스트를 생성할 때 유용함

<br>

```{python}
# 리스트 생성1
lst = [1, 2, 3, 4, 5]
print(lst)
```

```{python}
# 리스트 생성2
lst = list([1, 2, 3, 4, 5])
print(lst)
```

```{python}
# 리스트 생성3 : 리스트는 다양한 자료형을 저장할 수 있음
lst = [1, 3.14, "Hello", True, [11, 12, 13]]
print(lst)
```

```{python}
# 리스트 생성4 : iterable 객체 사용
lst = list("Hello")
print(lst)
```

```{python}
# 리스트 생성5 : iterable 객체 사용
lst = list(range(10))
print(lst)
```

<br>

### 3.2.2. 리스트 연산
+ 리스트 연결 연산자 `+` : 두 리스트를 연결해서 새로운 리스트 생성
+ 리스트 반복 연산자 `*` : 리스트를 숫자만큼 반복하여 새로운 리스트 생성 - (예) 리스트\*숫자

<br>

```{python}
# 리스트 연결
lst1 = [1, 2, 3]
lst2 = [11, 12, 13]
print(lst1 + lst2)
```

```{python}
# 리스트 반복
print(lst1 * 3)
```

<br>

### 3.2.3. 인덱싱과 슬라이싱
+ 인덱싱(indexing) : `[index]`를 사용하여 리스트의 특정 위치에 있는 원소에 접근함
+ 슬라이싱(slicing) : `[(start index):(stop index)]`를 사용하여 리스트의 일부 원소를 추출함
  + `list[(start index):(end index)] = iterable`를 사용하면 `start:end`로 지정한 부분이 iterable 객체의 모든 원소로 대체됨
  + 슬라이싱을 이용하여 기존 리스트의 일부를 삭제하거나, 새로운 원소를 추가 및 변경할 수 있음

<br>

![](./images/fig3-2.png){width=60%}

<br>

```{python}
# 리스트 인덱싱1
lst = [10, 20, 30, 40, 50]
print(lst[0])
```

```{python}
# 리스트 인덱싱2
lst = [10, 20, 30, 40, 50]
print(lst[-1])
```

```{python}
# 리스트 접근 연산자 []를 이중으로 사용할 수 있음
lst = [1, 3.14, "Hello", True, [11, 12, 13]]
print(lst[2])
print(lst[2][0])
```

```{python}
# 리스트 슬라이싱1
lst = [10, 20, 30, 40, 50]
print(lst[0:2])
```

```{python}
# 리스트 슬라이싱2
lst = [10, 20, 30, 40, 50]
print(lst[:2])
print(lst[2:])
print(lst[::2])
```

```{python}
# 리스트는 가변형 객체이므로 인덱스를 이용한 수정이 가능함
lst = [10, 20, 30, 40, 50]
lst[2] = 3
print(lst)
```

```{python}
# 슬라이싱을 이용한 원소 삭제
lst = [10, 20, 30, 40, 50]
lst[1:4] = []                              # 빈 리스트를 할당하면 해당 부분이 삭제됨
print(lst)
```

```{python}
# 슬라이싱을 이용한 원소 추가
lst = [10, 20, 30, 40, 50]
lst[1:1] = [6, 7]                          # 인덱스 1 위치에 [6, 7]의 원소를 개별적으로 추가
print(lst)
```

```{python}
# 슬라이싱을 이용한 원소 수정
lst = [10, 20, 30, 40, 50]
lst[1:3] = [6, 7, 8]                       # 인덱스 1~2 부분을 [6, 7, 8]로 수정
print(lst)
```

<br>

### 3.2.4. 중첩 리스트
+ 리스트 안에 또 다른 리스트가 포함된 구조
+ 2차원 리스트
  + 모든 내부 리스트가 동일한 길이를 가진 경우
  + 일반적으로 행(row)과 열(column)로 이루어짐
  + 행렬(matrix)처럼 활용하거나, 데이터를 일정한 구조로 관리할 때 유용함

<br>

```{python}
# 중첩 리스트
nested_lst = [
    [1, 2, 3],
    [4, 5, 6, 7],
    [8, 9]
]

print(nested_lst)
```

```{python}
for items in nested_lst:
    for item in items:
        print(item)
```

```{python}
# 2차원 리스트
kor = [80, 82, 75, 95]
eng = [67, 95, 84, 83]
math = [74, 88, 82, 76]
midterm = [kor, eng, math]
print(midterm)
```

```{python}
# 2차원 리스트 인덱싱
midterm[0][3]
```

<br>

### 3.2.5. 리스트 메소드
#### 3.2.5.1. 리스트 추가
|함수|설명|
|:---:|:------------|
|append()|- 새로운 값을 기존 리스트의 맨 끝에 추가|
|extend()|- 새로운 리스트를 기존 리스트에 추가(덧셈 연산과 같은 효과)|
|insert()|- 기존 리스트의 i번째 인덱스에 새로운 값을 추가 <br>- i번째 인덱스를 기준으로 뒤쪽의 인덱스는 하나씩 밀림|

<br>

```{python}
# 리스트에 한 개의 원소 추가1
lst = [1, 2, 3]
lst.append(4)                              # 실행 결과로 아무것도 출력하지 않음
print(lst)                                 # lst 원본 값이 변함
```

```{python}
# 리스트에 한 개의 원소 추가2
# 원본 값 변화 없이 리스트에 한 개의 원소를 추가하려면 전개 연산자 *를 사용하면 됨
lst = [1, 2, 3]
new_lst = [*lst, 4]
print(lst)                                 # lst 원본 값이 변하지 않음
print(new_lst)
```

```{python}
# append() 함수는 여러 개의 인수를 입력하거나, 연속으로 사용할 수 없음
lst = [1, 2, 3]
#lst.append(4,5)
#lst.append(4).append(5)
```

```{python}
# 리스트에 여러 개의 원소 추가
lst = [1, 2, 3]
lst.extend([11, 12])                       # 실행 결과로 아무것도 출력하지 않음
print(lst)                                 # lst1 원본 값이 변함
```

```{python}
# extend() 함수와 리스트 연결 연산자 +의 차이
lst1 = [1, 2, 3]
lst2 = [11, 12, 13]
lst1 + lst2                                # 실행 결과가 출력됨
print(lst1)                                # lst1 원본 값이 변하지 않음
print(lst2)                                # lst2 원본 값이 변하지 않음
```

```{python}
# 특정 위치에 한 개의 원소 추가
lst = [1, 2, 3]
lst.insert(0, 100)                         # 실행 결과로 아무것도 출력하지 않음
print(lst)                                 # lst 원본 값이 변함
```

```{python}
# 특정 위치에 여러 개의 원소 추가 : 슬라이싱을 이용
lst = [1, 2, 3]
lst[1:1] = [11, 12]                        # 인덱스 1의 위치에 리스트 [11, 12]의 원소를 개별적으로 삽입
print(lst)                                 # lst 원본 값이 변함
```

<br>

#### 3.2.5.2. 리스트 삭제
|함수|설명|
|:---:|:------------|
|pop()|- 특정 인덱스 값을 삭제하고 그 값을 반환 <br>- 인덱스를 생략하면 마지막 원소를 삭제|
|del 키워드|- 특정 인덱스 값을 삭제 <br>- 리스트 객체 자체를 삭제 가능함|
|remove()|- 리스트에서 첫 번째로 일치하는 값을 삭제 <br>- 값으로 삭제하므로 인덱스를 사용하지 않음|
|clear()|- 리스트의 모든 원소를 삭제|

<br>

```{python}
# 특정 인덱스 값 삭제1
lst = [1, 2, 3, 4, 5]
result = lst.pop(3)                        # 실행 결과로 삭제한 값을 반환
print(lst)                                 # lst 원본 값이 변함
print(result)
```

```{python}
# 특정 인덱스 값 삭제2
lst = [1, 2, 3, 4, 5]
result = lst.pop()                         # 인덱스를 생략하면 마지막 원소를 삭제 후 반환
print(lst)                                 # lst 원본 값이 변함
print(result)
```

```{python}
# 특정 인덱스 값 삭제3
lst = [1, 2, 3, 4, 5]
del lst[3]                                 # 실행 결과로 아무것도 반환하지 않음
print(lst)                                 # lst 원본 값이 변함
```

```{python}
# 리스트 객체 삭제
lst = [1, 2, 3, 4, 5]
del lst
#print(lst)
```

```{python}
# 일치하는 값 삭제1
lst = [1, 2, 3, 4, 5]
lst.remove(4)                              # 실행 결과로 아무것도 출력하지 않음
print(lst)                                 # lst 원본 값이 변함
```

```{python}
# 일치하는 값 삭제2
lst = [1, 2, 3, 1, 4, 5, 1, 6, 7]
lst.remove(1)                              # 첫 번째로 일치하는 값만 삭제됨
print(lst)                                 # lst 원본 값이 변함
```

```{python}
# 리스트 모든 원소 삭제
lst = [1, 2, 3, 4, 5]
lst.clear()                                # 실행 결과로 아무것도 출력하지 않음
print(lst)                                 # lst 원본 값이 변함
```

<br>

#### 3.2.5.3. 리스트 재배열
|함수|설명|
|:---:|:------------|
|reverse()|- 리스트 원소를 역순으로 재배열|
|sort()|- 리스트 원소를 오름차순(default)으로 정렬 <br>- 내림차순으로 정렬하려면 reverse=True로 설정|

<br>

```{python}
# 리스트 역순 재배열
lst = [52, 273, 103, 32, 275, 1, 7]
lst.reverse()                              # 실행 결과로 아무것도 출력하지 않음
print(lst)                                 # lst 원본 값이 변함
```

```{python}
# 리스트 정렬
lst = [52, 273, 103, 32, 275, 1, 7]
lst.sort()                                 # 실행 결과로 아무것도 출력하지 않음, 오름차순 정렬
print(lst)                                 # lst 원본 값이 변함

lst.sort(reverse=True)                     # 내림차순 정렬
print(lst)                                 # lst 원본 값이 변함
```

<br>

#### 3.2.5.4. 리스트 검색
|함수|설명|
|:---:|:------------|
|count()|리스트 내부에 특정 값이 몇 번 나타나는지 개수를 반환|
|index()|리스트 내부에 특정 값의 첫 번째 인덱스를 반환하며, 없으면 오류 발생|
|in 연산자|리스트 내부에 특정 값이 있다면 True, 없다면 False를 반환|

<br>

```{python}
# 특정 값 개수
lst = [1, 2, 3, 1, 4, 5, 1, 6, 7]
print(lst.count(1))
print(lst.count(9))
```

```{python}
# 특정 값의 첫 번쩨 인덱스
lst = [1, 2, 3, 1, 4, 5, 1, 6, 7]
print(lst.index(1))
#print(lst.index(9))
```

```{python}
# 특정 값 찾기
lst = [1, 2, 3, 4, 5]
print(3 in lst)
print(6 in lst)
```

<br>

#### 3.2.5.5. 리스트 통계
|함수|설명|
|:---:|:------------|
|len()|리스트 원소의 개수(리스트 길이) 반환|
|sum()|리스트 원소의 합계 반환|
|max()|리스트 원소 중 최대값 반환|
|min()|리스트 원소 중 최소값 반환|

<br>

```{python}
lst = [1, 2, 3, 4, 5]
print(len(lst))
print(sum(lst))
print(max(lst))
print(min(lst))
```

<br>

### 3.2.6. 리스트 컴프리헨션

> [식 for 변수 in 반복범위 if 조건식]

<br>

+ 기존 리스트를 사용하여 간결하게 새로운 리스트를 생성하는 기법
+ 리스트와 for 문을 한 줄에 사용할 수 있어 코드가 더 직관적으로 작성됨
+ 필터링, 중첩 반복문, 이차원 리스트 등 다양한 방식으로 활용됨

<br>

+ 리스트 컴프리헨션은 수학에서 집합을 정의할 때 **특정 조건을 만족하는 원소들의 집합**으로 표현하는 방법과 유사함
  + 수학적 집합 :  S = {x | x는 0 이상 10 이하의 정수}
  + 리스트 컴프리헨션 :  `[x for x in range(10)]`

<br>

```{python}
## 0~9 정수 저장
# 일반적인 반복문 + 리스트
result1 = []
for i in range(10):
    result1.append(i)

print(result1)
```

```{python}
## 0~9 정수 저장
# 리스트 컴프리헨션
result2 = [i for i in range(10)]
print(result2)
```

```{python}
## 짝수만 저장 (필터링, if 문과 함께 사용)
# 일반적인 반복문 + 리스트
result1 = []
for i in range(10):
    if i % 2 == 0:
        result1.append(i)

print(result1)
```

```{python}
## 짝수만 저장 (필터링, if 문과 함께 사용)
# 리스트 컴프리헨션
result2 = [i for i in range(10) if i % 2 == 0]
print(result2)
```

```{python}
## 두 개의 문자열 조합하여 새로운 리스트 생성 (중첩 반복문)
# 일반적인 반복문 + 리스트
word1 = "Hello"
word2 = "World"
result1 = []

for i in word1:
    for j in word2:
        result1.append(i+j)

print(result1)
```

```{python}
## 두 개의 문자열 조합하여 새로운 리스트 생성 (중첩 반복문)
# 리스트 컴프리헨션
word1 = "Hello"
word2 = "World"

result2 = [i+j for i in word1 for j in word2]
print(result2)
```

```{python}
# 리스트 컴프리헨션 (필터링 + 중첩 반복문)
case1 = ["A", "B", "C"]
case2 = ["D", "E", "A"]
result = [i + j for i in case1 for j in case2 if not(i==j)]
print(result)
```

```{python}
## 리스트의 각 원소를 대문자, 소문자, 길이로 변환하여 이차원 리스트 생성 (이차원 리스트)
# 일반적인 반복문 + 리스트
words = "The quick brown fox jumps over the lazy dog".split()
word_info1 = []

for w in words:
    word_info1.append([w.upper(), w.lower(), len(w)])

word_info1
```

```{python}
## 리스트의 각 원소를 대문자, 소문자, 길이로 변환하여 이차원 리스트 생성 (이차원 리스트)
# 리스트 컴프리헨션
words = "The quick brown fox jumps over the lazy dog".split()
word_info2 = [[w.upper(), w.lower(), len(w)] for w in words]
word_info2
```

```{python}
# [주의] 반복문에서 대괄호의 위치에 따라 리스트의 구조가 달라짐
case1 = ["A", "B", "C"]
case2 = ["1", "2", "3"]

# 일차원 리스트, 앞의 for 문이 먼저 실행됨
result1 = [i + j for i in case1 for j in case2]
print(result1)

# 이차원 리스트, 뒤의 for 문이 바깥쪽에서 먼저 실행됨
result2 = [[i + j for i in case1] for j in case2]
print(result2)
```

<br>

## 3.3. 튜플
### 3.3.1. 튜플 생성
+ 튜플(tuple)
  + 여러 개의 값을 저장할 수 있는 컬렉션 자료형(collection data type)
  + 순서가 존재하는 시퀀스 자료형(sequence data type)
  + 한 번 생성된 이후에는 수정할 수 없는 불변형(immutable) 객체
  + 정수, 부동소수점수, 문자열, bool, 리스트, 튜플, 딕셔너리 등 다양한 자료형을 저장할 수 있는 컨테이너형 객체
  + 리스트와 구조 및 사용 방법이 거의 동일하지만, **수정이 불가능**하다는 차이점이 있음

<br>

+ 튜플 생성
  + 리터럴 방식(tuple literal)
    + `()`를 사용하여 튜플을 직접 정의하는 방법
    + `()` 안에 원소(element)를 `,`로 구분하여 나열함
    + `()`을 생략할 수도 있지만, 원소가 하나인 경우에는 `(값,)`처럼 반드시 `,`를 포함해야 함
  + 생성자 방식(tuple constructor)
    + `tuple()` 함수를 사용하여 튜플을 생성하는 방법
    + 다른 iterable 객체(리스트, 튜플, 세트, 딕셔너리, 문자열 등)를 인수로 받아 튜플을 생성할 때 유용함

<br>

```{python}
# 튜플 생성1
tpl = (1, 2, 3, 4, 5)
print(tpl)
```

```{python}
# 튜플 생성2
tpl = 1, 2, 3, 4, 5
print(tpl)
```

```{python}
# 튜플 생성3 : 원소가 하나인 경우에는 반드시 ,를 포함해야 함
tpl = (1,)
print(tpl)
```

```{python}
# 튜플 생성4 : 튜플은 다양한 자료형을 저장할 수 있음
tpl = (1, 3.14, "Hello", True, [11, 12, 13], (21, 22))
print(tpl)
```

```{python}
# 튜플 생성5 : iterable 객체 사용
tpl = tuple("Hello")
print(tpl)
```

```{python}
# 튜플 생성6 : iterable 객체 사용
tpl = tuple([1, 2, 3])
print(tpl)
```

<br>

### 3.3.2. 튜플 연산
+ 리스트 연산과 문법이 동일함
+ 튜플 연결 연산자 `+` : 두 튜플을 연결해서 새로운 튜플 생성
+ 튜플 반복 연산자 `*` : 튜플을 숫자만큼 반복하여 새로운 튜플 생성 - (예) 튜플\*숫자

<br>

```{python}
# 튜플 연결
tpl1 = 1, 2, 3
tpl2 = 11, 12, 13
print(tpl1 + tpl2)
```

```{python}
# 튜플 반복
print(tpl1 * 3)
```

<br>

### 3.3.3. 인덱싱와 슬라이싱
+ 리스트와 문법이 동일함
+ 인덱싱(indexing) : `[index]`를 사용하여 튜플의 특정 위치에 있는 원소에 접근함
+ 슬라이싱(slicing) : `[(start index):(stop index)]`를 사용하여 튜플의 일부 원소를 추출함
  + 리스트와 달리 불변형 객체이므로 슬라이싱을 이용하여 기존 튜플의 일부를 삭제하거나, 새로운 원소를 추가 및 변경할 수 없음

<br>

```{python}
# 튜플 인덱싱1
tpl = 1, 2, 3, 4, 5
print(tpl[0])
```

```{python}
# 튜플 인덱싱2
tpl = 1, 2, 3, 4, 5
print(tpl[-1])
```

```{python}
# 튜플 슬라이싱1
tpl = 1, 2, 3, 4, 5
print(tpl[0:2])
```

```{python}
# 튜플 슬라이싱2
tpl = 1, 2, 3, 4, 5
print(tpl[:2])
print(tpl[2:])
print(tpl[::2])
```

```{python}
# 튜플은 불변형 객체이므로 인덱스를 이용한 수정이 불가능함
#tpl = 1, 2, 3, 4, 5
#tpl[2] = 3
#print(tpl)
```

<br>

### 3.3.4. 튜플 메소드
|함수|설명|
|:---:|:------------|
|count()|튜플 내부에 특정 값이 몇 번 나타나는지 개수를 반환|
|index()|튜플 내부에 특정 값의 첫 번째 인덱스를 반환하며, 없으면 오류 발생|
|in 연산자|튜플 내부에 특정 값이 있다면 True, 없다면 False를 반환|
|len()|튜플 원소의 개수(튜플 길이) 반환|
|sum()|튜플 원소의 합계 반환|
|max()|튜플 원소 중 최대값 반환|
|min()|튜플 원소 중 최소값 반환|

<br>

```{python}
# 특정 값 개수
tpl = 1, 2, 3, 1, 4, 5, 1, 6, 7
print(tpl.count(1))
print(tpl.count(9))
```

```{python}
# 특정 값의 첫 번쩨 인덱스
tpl = 1, 2, 3, 1, 4, 5, 1, 6, 7
print(tpl.index(1))
#print(tpl.index(9))
```

```{python}
# 특정값 찾기
tpl = 1, 2, 3, 4, 5
print(3 in tpl)
print(6 in tpl)
```

```{python}
#| scrolled: true
tpl = 1, 2, 3, 4, 5
print(len(tpl))
print(sum(tpl))
print(max(tpl))
print(min(tpl))
```

<br>

## 3.4. 세트
### 3.4.1. 세트 생성
+ 세트(set)
  + 여러 개의 값을 저장할 수 있는 컬렉션 자료형(collection data type)
  + 순서가 없는 집합 자료형(set data type)
  + 중복을 허용하지 않으며, 순서가 유지되지 않음
    + 리스트, 튜플과 달리 인덱싱과 슬라이싱이 불가능함
  + 한 번 생성된 이후에도 수정할 수 있는 가변형(mutable) 객체
  + 정수, 부동소수점수, 문자열, bool, 튜플 등 해시 가능한(immutable) 자료형을 저장할 수 있는 컨테이너형 객체

<br>

+ [참고] 해시(hash)
  + 데이터를 저장하거나 검색할 때 사용되는 고유한 숫자 값(해시 값)을 사용하는 과정
  + 세트와 딕셔너리는 내부적으로 해시 값을 사용하여 원소 또는 key에 빠르게 접근함(검색 속도가 빠름)
  + 해시 값은 변경되지 않아야 하므로, 불변형 객체만 사용할 수 있음

<br>

+ 세트 생성
  + 리터럴 방식(set literal)
    + `{}`를 사용하여 세트를 직접 정의하는 방법
    + `{}` 안에 원소(element)를 `,`로 구분하여 나열함
    + **중복된 원소는 자동으로 제거됨**
  + 생성자 방식(set constructor)
    + `set()` 함수를 사용하여 세트를 생성하는 방법
    + 다른 iterable 객체(리스트, 튜플, 세트, 딕셔너리, 문자열 등)를 인수로 받아 세트를 생성할 때 유용함
    + 빈 세트를 만들려면 반드시 `set()` 함수를 사용해야 함

<br>

```{python}
# 세트 생성1
st = {1, 2, 3, 1, 1, 4}
print(st)
```

```{python}
# 세트 생성2
st = set({1, 2, 3, 1, 1, 4})
print(st)
```

```{python}
# 세트 생성3 : 세트는 해시 가능한(immutable) 자료형을 저장할 수 있음
st = {1, 3.14, "Hello", True, (1, 2, 3), "Hello", 1, 1, 1}
print(st)
```

```{python}
# 세트 생성4: iterable 객체 사용
st = set("Hello")
print(st)
```

```{python}
# 세트 생성5 : iterable 객체 사용
st1 = set([1, 2, 3, 1, 1, 4])
st2 = set((1, 2, 3, 1, 1, 4))
print(st1)
print(st2)
```

<br>

### 3.4.2. 세트 집합 연산 및 메소드

|연산|연산자|함수|
|:---:|:---:|:------------:|
|합집합|\||union()|
|교집합|&|intersection()|
|차집합|-|difference()|
|대칭차집합|^|symmetric_difference()|
|부분집합 여부|<=|issubset()|

<br>

![](./images/fig3-3.png){width=60%}

<br>

```{python}
# 세트 연산1
A = {1, 2, 3}
B = {3, 4, 5}

print(A | B)                               # 합집합
print(A & B)                               # 교집합
print(A - B)                               # 차집합
print(A ^ B)                               # 대칭차집합
print(A <= B)                              # 부분집합 여부
```

```{python}
# 세트 연산2
A = {1, 2, 3}
B = {3, 4, 5}

print(A.union(B))
print(A.intersection(B))
print(A.difference(B))
print(A.symmetric_difference(B))
print(A.issubset(B))
```

```{python}
# 세트 연산3 : 여러 개의 세트를 연쇄적으로 한 번에 연산 가능
A = {1, 2, 3}
B = {3, 4, 5}
C = {5, 6, 7}

# 연산자 사용
print(A | B | C)
print(A & B & C)

# 메소드 사용
print(A.union(B, C))
print(A.intersection(B, C))
```

<br>

#### 3.4.2.3. 세트 추가/삭제/검색
|함수|설명|
|:---:|:------------|
|add()|- 새로운 값을 세트에 추가|
|update()|- 여러 개 값을 세트에 추가|
|pop()|- 임의의 값을 삭제하고 그 값을 반환 <br>- 어떤 값을 삭제할지 예측 불가능|
|remove()|- 세트에서 일치하는 값을 삭제 <br>- 일치하는 값이 없으면 오류가 발생함|
|discard()|- 세트에서 일치하는 값을 삭제 <br>- 일치하는 값이 없어도 오류가 발생하지 않음|
|clear()|- 세트의 모든 원소를 삭제|
|in 연산자|세트 내부에 특정 값이 있다면 True, 없다면 False를 반환|

<br>

```{python}
# 세트에 한 개의 원소 추가
st = {1, 2, 3}
st.add(6)                                  # 실행 결과로 아무것도 출력하지 않음
print(st)                                  # st 원본 값이 변함
```

```{python}
# 세트에 여러 개의 원소 추가
st = {1, 2, 3}
st.update([1, 2, 6])                       # 리스트 사용
print(st)

st.update((1, 7))                          # 튜플 사용
print(st)

st.update({8, 9})                          # 세트 사용
print(st)
```

```{python}
# 임의의 원소 삭제
st = {1, 2, 3}
result = st.pop()                          # 임의의 원소를 삭제 후 반환
print(st)                                  # st 원본 값이 변함
print(result)
```

```{python}
# 일치하는 값 삭제1
st = {1, 2, 3}
st.remove(3)
print(st)
```

```{python}
# 일치하는 값 삭제2 : remove() 함수는 일치하는 값이 없으면 오류가 발생함
#st = {1, 2, 3}
#st.remove(4)
#print(st)
```

```{python}
# 일치하는 값 삭제3
st = {1, 2, 3}
st.discard(3)
print(st)
```

```{python}
# 일치하는 값 삭제4 : discard() 함수는 일치하는 값이 없어도 오류가 발생하지 않음
st = {1, 2, 3}
st.discard(4)
print(st)
```

```{python}
# 세트 모든 원소 삭제
st = {1, 2, 3}
st.clear()
print(st)
```

```{python}
# 특정값 찾기
st = {1, 2, 3}
print(3 in st)
print(6 in st)
```

<br>

## 3.5. 딕셔너리
### 3.5.1. 딕셔너리 생성
+ 딕셔너리(dictionary)
  + 여러 개의 키-값(key-value) 쌍을 저장할 수 있는 컬렉션 자료형(collection data type)
  + 순서가 있는 매핑 자료형(mapping data type)(Python 3.7+)
  + 키(key)를 통해 값(value)을 찾는 구조
    + 키는 중복될 수 없고(해시 가능한 자료형만 가능), 값은 중복 가능함(모든 자료형 가능)
  + 한 번 생성된 이후에도 수정할 수 있는 가변형(mutable) 객체

<br>

+ 딕셔너리 생성
  + 리터럴 방식(dictionary literal)
    + `{key: value}`를 사용하여 딕셔너리를 직접 정의하는 방법
    + `{}` 안에 여러 개의 `key: value` 쌍을 `,`로 구분하여 나열함
    + **중복된 키가 있으면 마지막에 정의한 값이 적용됨**
  + 생성자 방식(dictionary constructor)
    + `dict()` 함수를 사용하여 딕셔너리를 생성하는 방법
    + 다른 iterable 객체(리스트, 튜플, 세트, 딕셔너리, 문자열 등)를 인수로 받아 딕셔너리를 생성할 때 유용함
      + `zip()` 함수를 이용하여 여러 개의 리스트나 튜플을 병렬로 묶어 키-값 쌍의 형태로 구성할 수 있음
      + `enumerate()` 함수를 이용하여 인덱스를 키로, 원소를 값으로 하여 쌍으로 묶어 딕셔너리를 생성할 수 있음

<br>

```{python}
# 딕셔너리 생성1
dct = {'a': 1, 'b': 2, 'c': 3}
print(dct)
```

```{python}
# 딕셔너리 생성2
dct = dict(a=1, b=2, c=3)
print(dct)
```

```{python}
# 딕셔너리 생성3 : 키는 중복될 수 없음
dct = {'a':1, 'b': 2, 'c': 3, 'a': 4, 'b': 5}
print(dct)
```

```{python}
# 딕셔너리 생성4 : (key, value) 쌍의 리스트 사용
dct = dict([('x', 100), ('y', 200)])
print(dct)
```

```{python}
# 딕셔너리 생성5 : zip() 함수 사용
keys = ['name', 'age', 'city']
values = ['Alice', 28, 'Jeonju']
dct = dict(zip(keys, values))
print(dct)
```

```{python}
# 딕셔너리 생성6 : enumerate() 함수 사용
fruits = ['apple', 'banana', 'cherry']
dct = dict(enumerate(fruits))
print(dct)
```

<br>

### 3.5.2. 딕셔너리 값 접근
+ 딕셔너리는 키를 사용하여 값에 접근함
+ 리스트, 튜플처럼 정수 인덱스를 이용한 접근은 불가능함

<br>

```{python}
# 키를 이용한 값 접근
info = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}
print(info['name'])
print(info['age'])
```

```{python}
# 딕셔너리는 가변형 객체이므로 키를 이용한 수정이 가능함
info = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}
info['city'] = 'Iksan'
print(info)
```

```{python}
# 새로운 키-값 쌍 추가
info = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}
info['email'] = 'alice123@gmail.com'
print(info)
```

<br>

### 3.5.3. 딕셔너리 메소드
#### 3.5.3.1. 딕셔너리 조회
|함수|설명|
|:---:|:------------|
|keys()|딕셔너리의 모든 키를 반환(`dict_keys` 객체)|
|values()|딕셔너리의 모든 값을 반환(`dict_values` 객체)|
|items()|(키, 값) 쌍을 튜플 형태로 반환(`dict_items` 객체)|
|get()|지정한 키의 값을 반환하며, 없으면 None 반환|
|in 연산자|특정 키가 딕셔너리에 있다면 True, 없다면 False 반환|

<br>

```{python}
# 모든 키
info = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}
print(list(info.keys()))
```

```{python}
# 모든 값
info = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}
print(list(info.values()))
```

```{python}
# (키, 값) 쌍
info = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}
print(list(info.items()))
```

```{python}
# 키를 이용한 값 조회
info = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}
print(info.get('name'))
print(info.get('email'))
```

```{python}
# 특정 키 찾기
info = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}
print('age' in info)
print('email' in info)
```

<br>

#### 3.5.3.2. 딕셔너리 추가/삭제
|함수|설명|
|:---:|:------------|
|update()|다른 딕셔너리나 키워드 인수를 이용하여 원소를 추가 및 수정|
|pop()|특정 키의 값을 삭제하고 그 값을 반환하며, 키가 없으면 오류 발생|
|popitem()|마지막 (키, 값) 쌍을 삭제하고 반환|
|del 키워드|특정 키의 원소를 삭제하며, 키가 없으면 오류 발생|
|clear()|딕셔너리의 모든 원소를 삭제|

<br>

```{python}
# 원소 추가 및 수정1
info = {'name': 'Alice', 'age': 28}
info.update({'age': 29, 'city': 'Jeonju'})
print(info)
```

```{python}
# 원소 추가 및 수정2
info = {'name': 'Alice', 'age': 28}
info.update(age=29, city='Jeonju')
print(info)
```

```{python}
# 특정 키의 값 삭제1
info = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}
age = info.pop('age')
print(info)
print(age)
```

```{python}
# 특정 키의 값 삭제2
#info = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}
#age = info.pop('email')
#print(info)
#print(email)
```

```{python}
# 마지막 (키, 값) 쌍 삭제
info = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}
last_item = info.popitem()
print(info)
print(last_item)
```

```{python}
# 특정 키의 원소 삭제1
info = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}
del info['age']
print(info)
```

```{python}
# 특정 키의 원소 삭제2
#info = {'name': 'Alice', 'age': 28, 'city': 'Jeonju'}
#del info['email']
#print(info)
```

