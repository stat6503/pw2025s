---
jupyter: python3
---

<h1>2. 기초 문법</h1>
<br>

## 2.1. 변수
+ 변수
  + 프로그램이 실행되는 동안 값을 저장하는 공간
  + 하나의 프로그램에서 여러 개의 변수를 만들어 사용할 수 있으며, 각 변수를 구분하기 위해 변수마다 이름을 붙여 관리함
  + 변수에는 언제든지 새로운 값을 저장할 수 있음

<br>

+ 대입 연산자 `=`
  + 변수에 값을 저장할 때 사용하는 연산자로, 할당 연산자라고도 함
  + `=` 기호 오른쪽의 값을 `=` 기호 왼쪽의 변수에 저장한다는 의미

<br>

```{python}
# 변수에 값을 저장하고 출력
age = 20
print(age)
```

```{python}
# 변수에 저장된 값 변경
age = 21
print(age)
```

```{python}
# 여러 변수에 값 대입
a = b = c = 7
print(a)
print(b)
print(c)
```

```{python}
# 코드 한 줄에서 여러 개의 변수에 각각 다른 값을 한번에 대입할 수 있음
a, b, c = 7, 11, 19
print(a)
print(b)
print(c)
```

```{python}
# 일반적인 프로그래밍 언어에서 두 변수의 값 교환
a = 7
b = 11
tmp = a
a = b
b = tmp
print(a, b)
```

```{python}
# Python에서는 임시변수 없이 두 변수의 값을 쉽게 교환할 수 있음 (패킹과 언패킹)
a = 7
b = 11
a, b = b, a
print(a, b)
```

<br>

+ 변수명 작성 규칙
  + 변수가 어떤 용도로 쓰이는지 잘 설명하는 이름으로 만드는 것이 좋음
  + 첫 번째 글자는 문자 또는 `_`이어야 하고, 나머지 글자는 문자, 숫자, `_`이어야 함
  + 영문 대문자와 소문자를 구분함
  + 키워드(예약어; keyword)는 사용할 수 없음
    + 키워드 : 프로그래밍 언어에서 사용하기 위해 쓰임새를 미리 정해 놓은 단어
   
<br>

```{python}
import keyword
print(keyword.kwlist)
```

<br>

## 2.2. 자료형
+ 기본 자료형
  + 단순한 값을 저장하는 자료형
  + (예) 정수(1,2,3,...), 부동소수점수(1.23, 3.14, ...), 복소수(2+3j), 문자열("Hello"), bool(True, False)
+ 구조적 자료형
  + 여러 개의 값을 담을 수 있는 자료형
  + (예) 리스트(list), 튜플(tuple), 세트(set), 딕셔너리(dictionary)
+ `type()` 함수를 이용하여 자료형을 확인할 수 있음

<br>

```{python}
# 정수형
a = 20                      # 10진수
b = 0o34                    # 8진수
c = 0xA1                    # 16진수
d = 0b1110                  # 2진수
print(a, b, c, d)
print(type(a))
```

```{python}
# 부동소수점수형
a = 3.14
b = 1.23e5                  # 지수 표현 방식
print(a, b)
print(type(a))
```

```{python}
# 문자열형
a = 'Hello'
b = "Python"
print(a, b)
print(type(a))
```

```{python}
# bool형
a = 10>20
print(a)
print(type(a))
```

<br>

## 2.3. 표준 입출력
+ 입력
  + 사용자로부터 데이터를 입력받기 위해 `input()` 함수를 이용함
  + `input()` 함수는 안내문을 출력한 후 사용자의 입력을 기다리며, 입력한 데이터를 문자열 형식으로 반환함
  + 입력한 값을 숫자로 사용하려면 `int()`, `float()` 함수를 이용하여 자료형 변환을 해야 함
  + `변수 = input(안내문)`

<br>

+ 출력
  + 데이터를 출력하기 위해 `print()` 함수를 이용함
  + 여러 개의 값을 출력하려면 `,`로 구분한 값을 나열하면 됨

<br>

```{python}
# 문자열 입력
#name = input("이름: ")
#age = input("나이: ")
#print(name, "나이:", age)
```

```{python}
# 정수 형식의 문자열 입력
# input 함수를 통해서 입력받은 데이터는 문자열형임
# 따라서 int() 함수를 이용하여 정수 형식의 문자열을 정수로 변환해야 함
#a = int(input("정수: "))
#b = int(input("정수: "))
#print(a-b)
```

```{python}
# 부동소수점 형식의 문자열 입력
# float() 함수를 이용하여 부동소수점수 형식의 문자열을 부동소수점수로 변환함
#minute = float(input("분 단위 시간: "))
#second = minute * 60
#print(second, "초")
```

```{python}
# 문자열 출력
print("안녕하세요.")
age = 25
print("나이는", age, "입니다.")
```

```{python}
# print() 함수가 여러 개일 때는 다음 줄로 넘어가서 값을 출력함
a = 25
b = 42
print(a)
print(b)
```

```{python}
# print() 함수가 여러 개일 때 다음 줄로 넘어가는 대신 공백이 출력되기를 원하면 end 매개변수를 공백으로 설정함
a = 25
b = 42
print(a, end=' ')
print(b)
```

<br>

+ f-string 포맷팅
  + 문자열 맨 앞에 f 또는 F를 붙이고, `{}` 안에 변수명을 직접 작성하여 출력하는 방식
  + 가독성이 좋고 사용 방법이 간단하여 자주 사용됨

<br>

```{python}
# f-string 사용
name = "홍길동"
age = 20
print(f"이름은 {name}이고, 나이는 {age}입니다.")
```

```{python}
# f-string 출력 형식 지정
# 변수 이름 옆에 :을 작성한 다음 형식을 지정함
name = "홍길동"
age = 20
print(f"{name:5}, {age:3}")

a = 4
b = 3.14159265
print(f"20{a:02d}")                        # a 값을 두자리로 출력하되 앞의 빈곳은 0으로 채움
print(f"{b:.3f}")                          # b 값을 소수점 이하 세자리로 반올림하여 출력
```

<br>

## 2.4. 연산자
+ 연산(operation) : 덧셈, 뺄셈 등과 같이 일정한 규칙에 따라 계산하는 것

<br>

### 2.4.1. 산술 연산자
|연산자|설명|예시|결과|
|:---:|:---:|:---:|:---:|
|+|더하기|print(6+4)|10|
|-|빼기|print(6-4)|2|
|*|곱하기|print(6*4)|24|
|/|나누기|print(6/4)|1.5|
|//|나눈 정수 몫|print(6//4)|1|
|%|나눈 나머지|print(6%4)|2|
|**|거듭제곱|print(6**4)|1296|

<br>

### 2.4.2. 비교 연산자
+ 크기를 비교할 때 사용하는 연산자
+ 연산 결과는 참(True) 또는 거짓(False)으로 나타남

|연산자|설명|예시|결과|
|:---:|:---:|:---:|:---:|
|==|같다|print(10==20)|False|
|!=|같지 않다|print(10!=20)|True|
|>|크다|print(10>20)|False|
|<|작다|print(10<20)|True|
|>=|크거나 같다|print(10>=20)|False|
|<=|작거나 같다|print(10<=20)|True|

<br>

### 2.4.3. 논리 연산자
+ 참과 거짓의 논리 동작을 다루는 연산
+ 여러 조건을 조합할 때 주로 사용함

|연산자|설명|예시|결과|
|:---:|:------------------|:------|:---:|
|and|왼쪽 식과 오른쪽 식 모두 참인 경우에만 True|a=25 <br>print(a>8 and a<60)|True|
|or|왼쪽 식과 오른쪽 식 중 하나라도 참인 경우에만 True|a=70 <br>print(a<8 or a>=60)|True|
|not|오른쪽 식이 참이면 False, 거짓이면 True|a=20 <br>print(not a==20)|False|

<br>

### 2.4.4. 복합 대입 연산자
+ 연산한 값을 다시 대입하는 연산자

|연산자|설명|예시|결과|
|:---:|:------------------|:---|:---:|
|+=|왼쪽 값에 오른쪽 값을 더한 결과를 다시 왼쪽에 대입|a, b = 2, 3 <br>a += b <br> print(a)|5|
|-=|왼쪽 값에 오른쪽 값을 뺀 결과를 다시 왼쪽에 대입|a, b = 2, 3 <br>a -= b <br> print(a)|-1|
|*=|왼쪽 값에 오른쪽 값을 곱한 결과를 다시 왼쪽에 대입|a, b = 2, 3 <br>a *= b <br> print(a)|6|
|/=|왼쪽 값에 오른쪽 값을 나눈 결과를 다시 왼쪽에 대입|a, b = 3, 2 <br>a /= b <br> print(a)|1.5|
|//=|왼쪽 값에 오른쪽 값을 나눈 몫을 다시 왼쪽에 대입|a, b = 7, 3 <br>a //= b <br> print(a)|2|
|%=|왼쪽 값에 오른쪽 값을 나눈 나머지를 다시 왼쪽에 대입|a, b = 7, 3 <br>a %= b <br> print(a)|1|

<br>

### 2.4.5. 연산자 우선순위
+ 프로그래밍 언어는 연산자에 우선순위를 부여하여 우선순위가 높은 연산자를 먼저 계산함
+ 우선순위에 관계없이 연산의 순서를 정하려면 괄호 `()`를 사용함

|우선순위|연산자|설명|
|:---:|:---:|:---:|
|1|**|거듭제곱 연산자|
|2|+, -|양수, 음수를 나타내는 단항 연산자|
|3|*, /, //, %|곱셈, 나눗셈, 나눈 몫, 나머지|
|4|+, -|덧셈, 뺄셈|
|5|<, <=, >, >=|비교 연산자|
|6|==, !=|동등 연산자|
|7|=, +=, -=, /=, //=, %=, **=|대입 연산자|
|8|not|논리 연산자|
|9|and|논리 연산자|
|10|or|논리 연산자|

<br>

```{python}
# 정수 3개의 평균 계산(틀림)
avg = 70 + 80 + 90 / 3
print(avg)
```

```{python}
# 정수 3개의 평균 계산
avg = (70 + 80 + 90) / 3
print(avg)
```

```{python}
# 길이 단위 변환
#_cm = int(input("센티미터 단위 길이: "))
#m = _cm // 100
#cm = _cm % 100
#print(f'{m}미터 {cm}센티미터')
```

<br>

## 2.5. 조건문
### 2.5.1. 프로그램 구조

+ 프로그램 구조는 크게 순차 구조, 선택 구조, 반복 구조로 구분됨
  + 순차 구조 : 위에서부터 아래로 순차적으로 실행되는 구조
  + 선택 구조 : 조건에 따라 문장을 선택적으로 실행하는 구조로, 조건이 참(True)인지 거짓(False)인지에 따라 실행되는 문장이 달라짐
  + 반복 구조 : 임의의 문장을 반복해서 실행하는 구조

<br>

![](./images/fig2-1.png){width=120%}

<br>

<br>

### 2.5.2. if 문

> if 조건식: <br>
> 　　문장

<br>

+ 조건식이 참이면 문장을 실행하고 거짓이면 문장을 실행하지 않음
+ 조건식 오른쪽에 `:`이 위치하고, 참인 경우 실행될 문장은 반드시 <b>들여쓰기(indentation)</b>해야 함

<br>

![](./images/fig2-2.png)

<br>

```{python}
# 무작위로 1~100 사이의 두 정수를 생성한 후, 큰 수부터 작은 수 순으로 출력
import random
a = random.randint(1, 100)
b = random.randint(1, 100)

if a<b:
    a, b = b, a

print(a, b)
```

<br>

### 2.5.3. if\~else 문

> if 조건식: <br>
> 　　문장1 <br>
> else: <br>
> 　　문장2

<br>

+ 조건식이 참이면 문장1을 실행하고, 거짓이면 문장2를 실행함
+ 조건식 오른쪽에 `:`이 위치하고, else 오른쪽에는 조건식 없이 `:`이 위치함
+ 문장1과 문장2는 반드시 들여쓰기해야 함

<br>

![](./images/fig2-3.png)

<br>

```{python}
# 무작위로 1~100 사이의 정수를 생성한 후, 짝수인지 홀수인지 판단
import random
a = random.randint(1, 100)

if a % 2 == 0:
    print(f'{a}는 짝수입니다')
else:
    print(f'{a}는 홀수입니다')
```

<br>

### 2.5.4. if\~elif\~else문

> if 조건식1: <br>
> 　　문장1 <br>
> elif 조건식2: <br>
> 　　문장2 <br>
> else: <br>
> 　　문장3

<br>

+ 조건식1이 거짓인 경우에 또 다른 선택구조를 연결하는 구조
+ 조건식1이 참이면 문장1을 실행하고, 조건식1이 거짓이면서 조건식2가 참이면 문장2를 실행하고, 두 조건식 모두 거짓이면 문장3을 실행함
+ 조건식1, 조건식2 오른쪽에 `:`이 위치하고, 문장1, 문장2, 문장3은 반드시 들여쓰기해야 함

<br>

![](./images/fig2-4.png)

<br>

```{python}
# 놀이공원 기본 입장료는 5,000원임
# 8세 미만은 기본 입장료 30% 할인, 65세 이상은 기본 입장료 20% 할인 적용함
# 연령이 주어졌을 때, 놀이공원 입장료 산출
fee = 5000
age = 7

if age < 8:
    print('입장료:', fee*0.7)
elif age < 65:
    print('입장료:', fee)
else:
    print('입장료:', fee*0.8)
```

<br>

## 2.6. 반복문
### 2.6.1. for 문

> for 반복변수 in 반복범위: <br>
> 　　문장

<br>

+ 반복범위를 지정하여(정해진 횟수만큼) 반복해서 문장을 실행함
+ 반복범위 오른쪽에는 `:`이 위치하고, 반복해서 실행할 문장은 반드시 **들여쓰기**해야 함
+ 반복범위에는 범위, 문자열, 리스트, 딕셔너리 등이 사용될 수 있음
  + 그 중 범위가 가장 많이 사용되며, `range()` 함수로 만들 수 있음
 
|형식|설명|예시|결과|
|:---------|:------------|:---:|:---:|
|range(종료값)|0으로 시작해서 1씩 증가하며 종료값 전까지의 정수를 생성|range(5)|0,1,2,3,4|
|range(시작값, 종료값)|시작값으로 시작해서 1씩 증가하며 종료값 전까지의 정수를 생성|rang(2,7)|2,3,4,5,6|
|range(시작값, 종료값, 증가값)|시작값으로 시작해서 증가값만큼 증가시키면서 종료값 전까지의 정수를 생성|range(2,11,3)|2,5,8|

<br>

```{python}
# 문자열을 3번 반복해서 출력
for i in range(3):
    print("Hello!")
```

```{python}
# 반복범위의 값을 출력1
for i in range(5):
    print(i)
```

```{python}
# 반복범위의 값을 출력2
for i in "World":
    print(i)
```

```{python}
# 1~100 정수의 합 계산
sum = 0

for i in range(1,101):
    sum += i

print(sum)
```

```{python}
# 30의 약수 출력
num = 30

for i in range(1, num+1):
    if num%i == 0:
        print(i, end=' ')
```

<br>

### 2.6.2. while 문

> while 조건식: <br>
> 　　문장

<br>

+ 조건이 참인 동안 문장을 반복해서 실행하고, 조건이 거짓이면 반복문을 종료함

<br>

```{python}
# 1~100 정수의 합 계산
sum = 0
num = 1

while num<=100:
    sum += num
    num += 1

print(sum)
```

```{python}
#| scrolled: true
# 구구단 9단 출력
num = 1

while num<=9:
    print(f'9x{num}={9*num}')
    num += 1
```

## 2.7. 함수
### 2.7.1. 함수의 개념
+ 함수(function)
  + 특정한 기능을 수행하도록 미리 만들어 놓고, 필요할 때마다 호출하여 사용하는 일련의 코드
  + Python에서 기본적으로 제공하는 **내장 함수**와 사용자가 직접 만들어서 사용할 수 있는 **사용자 정의 함수**가 있음

<br>

+ 함수의 장점
  + 필요할 때마다 호출 가능 : 반복적으로 수행해야 하는 업무를 한 번만 작성해 놓고 필요할 때마다 호출하여 사용할 수 있음
  + 논리적인 단위로 분할 가능 : (예) 도형 계산 프로그램 - 덧셈 코드, 곱셈 코드, 나눗셈 코드 등으로 나눔
  + 코드의 캡슐화 가능 : 함수의 인터페이스만 잘 정의하면 다른 사람이 자신의 코드를 쉽게 가져다 사용할 수 있음

<br>

```{python}
# 절대값 반환 함수
abs(-10)
```

<br>

### 2.7.2. 함수 정의

> def 함수명(매개변수1, 매개변수2, ...): <br>
> 　　문장 <br>
> 　　return 반환값

<br>

+ 함수명 작성 규칙
  + 변수 이름 규칙과 동일함
  + 일반적으로 소문자로 입력
  + 작업을 나타내기 위해 동사와 명사를 함께 사용하는 경우가 많음 - (예) find_number
  + 외부에 공개하는  함수일 경우 줄임말을 사용하지 않고 짧고 명료한 이름으로 정함

<br>

+ 매개변수(parameter)
  + 함수에서 입력값으로 사용하는 변수로, 1개 이상의 값을 적을 수 있음
 
<br>

+ 함수 형태
|구분|매개변수 ×|매개변수 ○|
|:---:|:------------|:------------|
|반환값 ×|함수 내부 명령문만 수행|매개변수를 사용하여 명령문만 수행|
|반환값 ○|매개변수 없이 명령문을 수행한 후 결과값 반환|매개변수를 사용하여 명령문을 수행한 후 결과값 반환|

<br>

```{python}
# 매개변수 ×, 반환값 ×
def func():
    print('함수입니다.')

print('함수 호출 전입니다')
func()
print('함수 호출 후입니다')
```

```{python}
# 매개변수 ○, 반환값 ×
def add1(x, y):
    print(x+y)

res1 = add1(10,20)
print(res1)
```

```{python}
# 매개변수 ○, 반환값 ○
def add2(x, y):
    return x+y

res2 = add2(10,20)
print(res2)
```

```{python}
## 섭씨온도를 화씨온도로 변환하는 함수
# (섭씨온도) = (화씨온도 - 32) × 5/9
def f_to_c(fahrenheit):
    return (fahrenheit-32) * 5/9

f_to_c(100)
```

